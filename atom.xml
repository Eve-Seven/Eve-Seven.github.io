<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eve-Seven</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-19T14:28:13.140Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Seven</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python第十二话之异常</title>
    <link href="http://yoursite.com/2018/12/19/2018-12-19-python-error/"/>
    <id>http://yoursite.com/2018/12/19/2018-12-19-python-error/</id>
    <published>2018-12-18T16:00:00.000Z</published>
    <updated>2018-12-19T14:28:13.140Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><blockquote><p>异常是什么？</p><p>程序运行过程中出现异常，程序还能正常运行吗？</p><p>如果出现异常该如何让程序正常运行下去呢？</p></blockquote><p>异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。</p><p>一般情况下，在Python无法正常处理程序时就会发生一个异常。</p><p>异常是Python对象，表示一个错误。</p><p>当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。</p><h4 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h4><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-19/20180386.jpg" alt="异常处理"></p><h4 id="try-except"><a href="#try-except" class="headerlink" title="try-except"></a>try-except</h4><blockquote><p>异常是我们敲代码的过程中遇到最多的，那么我们有什么办法来捕获异常呢？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b</span><br><span class="line">print(<span class="string">'ok'</span>)  <span class="comment">#ok能够打印出来吗？</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NameError: name <span class="string">'b'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><blockquote><p>捕获异常 ，让代码正常执行</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">print(<span class="string">'ok'</span>)  <span class="comment">#ok能够打印出来吗？</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name <span class="string">'b'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line">ok</span><br></pre></td></tr></table></figure><blockquote><p>通过捕获异常，代码不仅把错误打印了，后面的代码也正常执行了。</p></blockquote><blockquote><p>那么其他异常怎么办呢？是一样的吗？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    file = open(<span class="string">'test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">print(<span class="string">'ok'</span>)  <span class="comment">#ok能够打印出来吗？</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileNotFoundError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">'test.txt'</span></span><br></pre></td></tr></table></figure><blockquote><p>不同类型的异常，就要用不同的状态去捕获</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    file = open(<span class="string">'test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">print(<span class="string">'ok'</span>)  <span class="comment">#ok能够打印出来吗？</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">'test.txt'</span></span><br><span class="line">ok</span><br></pre></td></tr></table></figure><blockquote><p>异常那么多，我们需要每一个都写吗？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    c = <span class="number">1</span> + <span class="string">'a'</span></span><br><span class="line">    file = open(<span class="string">'test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'ok'</span>)  <span class="comment">#ok能够打印出来吗？</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unsupported operand type(s) <span class="keyword">for</span> +: <span class="string">'int'</span> <span class="keyword">and</span> <span class="string">'str'</span></span><br><span class="line">ok</span><br></pre></td></tr></table></figure><blockquote><p>同时出现两个异常，会都捕获吗？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    c</span><br><span class="line">    file = open(<span class="string">'test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">print(<span class="string">'ok'</span>)  <span class="comment">#ok能够打印出来吗？</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name <span class="string">'c'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line">ok</span><br></pre></td></tr></table></figure><blockquote><p>出现异常后，报异常后的代码就不会执行了，就会跳到except去执行。</p></blockquote><h4 id="try-except-else"><a href="#try-except-else" class="headerlink" title="try-except-else"></a>try-except-else</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    c = <span class="number">1</span></span><br><span class="line">    file = open(<span class="string">'tests.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'ok'</span>)  <span class="comment">#ok能够打印出来吗？</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">'tests.txt'</span></span><br><span class="line">ok</span><br><span class="line">file</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"C:\Program Files\Python36\lib\site-packages\IPython\core\interactiveshell.py"</span>, line <span class="number">3265</span>, <span class="keyword">in</span> run_code</span><br><span class="line">    exec(code_obj, self.user_global_ns, self.user_ns)</span><br><span class="line">  File <span class="string">"&lt;ipython-input-3-046c168df224&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    file</span><br><span class="line">NameError: name <span class="string">'file'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><blockquote><p>这是有抛出异常的情况。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    c = <span class="number">1</span></span><br><span class="line">    file = open(<span class="string">'test.txt'</span>, <span class="string">'x'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    file.close()</span><br><span class="line">    </span><br><span class="line">print(<span class="string">'ok'</span>)  <span class="comment">#ok能够打印出来吗？</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ok</span><br><span class="line">file</span><br><span class="line">Out[<span class="number">3</span>]: &lt;_io.TextIOWrapper name=<span class="string">'test.txt'</span> mode=<span class="string">'w'</span> encoding=<span class="string">'cp936'</span>&gt;</span><br><span class="line">file.closed</span><br><span class="line">Out[<span class="number">4</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p>这是没有异常的情况</p></blockquote><blockquote><p>else是在不抛出异常的情况下执行。</p></blockquote><h4 id="try-except-finally"><a href="#try-except-finally" class="headerlink" title="try-except-finally"></a>try-except-finally</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    c = <span class="number">1</span></span><br><span class="line">    file = open(<span class="string">'tests.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'end'</span>)</span><br><span class="line">print(<span class="string">'ok'</span>)  <span class="comment">#ok能够打印出来吗？</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">'tests.txt'</span></span><br><span class="line">end</span><br><span class="line">ok</span><br></pre></td></tr></table></figure><blockquote><p>这是抛出异常的情况</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    c = <span class="number">1</span></span><br><span class="line">    file = open(<span class="string">'test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'end'</span>)</span><br><span class="line">print(<span class="string">'ok'</span>)  <span class="comment">#ok能够打印出来吗？</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">end</span><br><span class="line">ok</span><br></pre></td></tr></table></figure><blockquote><p>这是不抛出异常的情况</p></blockquote><blockquote><p>不管会不会抛出异常，finally都会在最后执行。</p></blockquote><h4 id="返回错误"><a href="#返回错误" class="headerlink" title="返回错误"></a>返回错误</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        c = <span class="number">1</span></span><br><span class="line">        file = open(<span class="string">'tx.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">        print(<span class="string">'aaaaaa'</span>)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line">x = func()</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">'tx.txt'</span></span><br></pre></td></tr></table></figure><h4 id="直接抛出异常"><a href="#直接抛出异常" class="headerlink" title="直接抛出异常"></a>直接抛出异常</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        c = <span class="number">1</span></span><br><span class="line">        file = open(<span class="string">'tx.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">        print(<span class="string">'aaaaaa'</span>)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> NameError <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line">x = func()</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileNotFoundError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">'tx.txt'</span></span><br></pre></td></tr></table></figure><blockquote><p>raise是直接抛出异常–和不使用try是一样的。</p></blockquote><h4 id="自定义类"><a href="#自定义类" class="headerlink" title="自定义类"></a>自定义类</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> repr(self.value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> MyError(<span class="number">2</span> * <span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span> MyError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'My exception occurred, value:'</span>, e.value)</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">My exception occurred, value: <span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="自定义异常错误"><a href="#自定义异常错误" class="headerlink" title="自定义异常错误"></a>自定义异常错误</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span><span class="params">(ValueError)</span>:</span></span><br><span class="line">    ERROR = (<span class="string">"-1"</span>, <span class="string">"没有该用户！"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抛出异常测试函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">raiseTest</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 抛出异常</span></span><br><span class="line">    <span class="keyword">raise</span> MyError(MyError.ERROR[<span class="number">0</span>],  <span class="comment"># 异常错误参数1</span></span><br><span class="line">                  MyError.ERROR[<span class="number">1</span>])  <span class="comment"># 异常错误参数2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        raiseTest()</span><br><span class="line">    <span class="keyword">except</span> MyError <span class="keyword">as</span> msg:</span><br><span class="line">        print(<span class="string">"errCode:"</span>, msg.args[<span class="number">0</span>])  <span class="comment"># 获取异常错误参数1</span></span><br><span class="line">        print(<span class="string">"errMsg:"</span>, msg.args[<span class="number">1</span>])  <span class="comment"># 获取异常错误参数2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">errCode: <span class="number">-1</span></span><br><span class="line">errMsg: 没有该用户！</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote><p>注意事项：</p><ol><li><p>try 后面必须跟上 except</p></li><li><p>except 只有在函数中才能使用 return</p></li><li><p>finally 不管是否发生异常，始终都会执行</p></li></ol></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>try: 将可能会发生异常的代码放在try中，就可以得到异常，并做相应处理</p><p>except: except用来接受异常，并且可以抛出或者返回异常</p><p>else和finally: else在没有异常的时候会执行；finally不管是否有异常，都会执行</p></blockquote><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><blockquote><p>python中有哪些异常？</p><p>怎样查看所有的异常？</p><p>如何通过程序的报错来找到有问题的代码</p></blockquote><h4 id="异常层次结构"><a href="#异常层次结构" class="headerlink" title="异常层次结构"></a><a href="https://docs.python.org/3/library/exceptions.html" target="_blank" rel="noopener">异常层次结构</a></h4><blockquote><p>在 Python 中所有的异常都是继承 BaseException</p><p>代码中会出现的异常都是 Exception 的子类， 因此在 except 中只需要在最后加上 Exception 即可</p><p>在抛出异常的过程中，会从上倒下依次对比异常，找到之后就不会再往后查找</p></blockquote><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-19/719558.jpg" alt="异常"></p><h4 id="错误回溯"><a href="#错误回溯" class="headerlink" title="错误回溯"></a>错误回溯</h4><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-19/1559957.jpg" alt="错误"></p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><blockquote><p>在今后的学习和工作过程中，会遇到大量的报错，每个开发人员都必须掌握查找和解决报错的能力</p><p>在自己无法解决需要寻求帮助时，也要掌握如何描述问题，把问题描述清楚的能力，这会大大节省双方的时间和精力</p></blockquote><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>在调试代码过程中，对于不知道的值可以使用print输出查看一下，但是有些时候，我们清楚某个值应该是怎样的，比如应该是int类型的数据，这个时候需要在类型不对的情况下终止代码，再来调试代码，该怎么做呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span>  <span class="number">1</span>==<span class="number">1</span> </span><br><span class="line"><span class="keyword">assert</span>  <span class="number">1</span>==<span class="number">2</span>  <span class="comment">#报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> len(in_s) == <span class="number">4</span>, <span class="string">'input size rank 4 required!'</span></span><br><span class="line"><span class="keyword">assert</span> len(f_s) == <span class="number">4</span>, <span class="string">'filter size rank 4 required!'</span></span><br><span class="line"><span class="keyword">assert</span> f_s[<span class="number">2</span>] == in_s[<span class="number">3</span>], <span class="string">'intput channels not match filter channels.'</span></span><br><span class="line"><span class="keyword">assert</span> f_s[<span class="number">0</span>] &gt;= stride <span class="keyword">and</span> f_s[<span class="number">1</span>] &gt;= stride, <span class="string">'filter should not be less than stride!'</span></span><br><span class="line"><span class="keyword">assert</span> padding <span class="keyword">in</span> [<span class="string">'SAME'</span>, <span class="string">'VALID'</span>], <span class="string">'padding value[&#123;0&#125;] not allowded!!'</span>.format(padding)</span><br></pre></td></tr></table></figure><blockquote><p>断言语句是将调试断言插入程序的一种便捷方式</p><p>assert 的语法规则是：</p><p>表达式返回 True 不报错</p><p>表达式返回 False 报错 报 AssertionError</p></blockquote><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      python异常
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://yoursite.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python第十一话之文件</title>
    <link href="http://yoursite.com/2018/12/19/2018-12-18-python-file/"/>
    <id>http://yoursite.com/2018/12/19/2018-12-18-python-file/</id>
    <published>2018-12-18T16:00:00.000Z</published>
    <updated>2018-12-19T14:28:06.971Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><h3 id="私有属性和私有方法"><a href="#私有属性和私有方法" class="headerlink" title="私有属性和私有方法"></a>私有属性和私有方法</h3><p>我们python3中有没有私有属性这种说法？如果有的话有是怎么使用的？</p><h4 id="”私有“变量、方法"><a href="#”私有“变量、方法" class="headerlink" title="”私有“变量、方法"></a>”私有“变量、方法</h4><blockquote><p>1、封装类的实例上面的“私有”数据，但是Python语言并没有访问控制。</p><p>2、Python程序员不去依赖语言特性去封装数据，而是通过遵循一定的属性和方法命名规约来达到这个效果。</p></blockquote><h4 id="单下滑线"><a href="#单下滑线" class="headerlink" title="单下滑线(_)"></a>单下滑线(_)</h4><blockquote><p>第一个约定是任何以单下划线_开头的名字都应该是内部实现。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._internal = <span class="number">0</span> <span class="comment"># An internal attribute</span></span><br><span class="line">        self.public = <span class="number">1</span> <span class="comment"># A public attribute</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">public_method</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        A public method</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_internal_method</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'_internal_method'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Python并不会真的阻止别人访问内部名称。但是如果你这么做肯定是不好的，可能会导致脆弱的代码。 同时还要注意到，使用下划线开头的约定同样适用于模块名和模块级别函数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = A()</span><br><span class="line">a._internal_method()</span><br><span class="line">a._internal</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_internal_method</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="双下滑线（-）"><a href="#双下滑线（-）" class="headerlink" title="双下滑线（__）"></a>双下滑线（__）</h4><p>你还可能会遇到在类定义中使用两个下划线(__)开头的命名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__private = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__private_method</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'_B__private_method'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">public_method</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        self.__private_method()</span><br></pre></td></tr></table></figure><blockquote><p>使用双下划线开始会导致访问名称变成其他形式。 比如，在前面的类B中，私有属性会被分别重命名为 <code>_B__private</code> 和 <code>_B__private_method</code> 。 这时候你可能会问这样重命名的目的是什么，答案就是继承——这种属性通过继承是无法被覆盖的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b = B()</span><br><span class="line">b._B__private</span><br><span class="line">b._B__private_method()</span><br><span class="line">b.public_method()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_B__private_method</span><br><span class="line">_B__private_method</span><br></pre></td></tr></table></figure><blockquote><p>私有名称 <code>__private</code> 和 <code>__private_method</code> 被重命名为 <code>_C__private</code> 和 <code>_C__private_method</code> ，这个跟父类B中的名称是完全不同的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(B)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.__private = <span class="number">1</span> <span class="comment"># Does not override B.__private</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Does not override B.__private_method()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__private_method</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'_C__private_method'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_B__private_method</span><br><span class="line">_B__private_method</span><br><span class="line">_C__private_method</span><br></pre></td></tr></table></figure><h3 id="文件基本操作"><a href="#文件基本操作" class="headerlink" title="文件基本操作"></a>文件基本操作</h3><p>我们的程序都是运行在内存中的，内存是不可持久化存储的，那怎样才能持久存储呢？</p><h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">'text.txt'</span>  <span class="comment"># 相对路径</span></span><br><span class="line">path = <span class="string">'home/seven/text.txt'</span>  <span class="comment"># 绝对路径</span></span><br><span class="line">file = open(path, mode=<span class="string">'w+'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>以w+模式打开文件，是为写入和读取的模式，没有文件会新建文件，有文件会清空文件。</p></blockquote><h4 id="文件打开模式"><a href="#文件打开模式" class="headerlink" title="文件打开模式"></a>文件打开模式</h4><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-19/31221654.jpg" alt="文件打开模式"></p><blockquote><p>不同的文件打开模式，对文件的操作有不同，大家一定要注意。</p></blockquote><h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file.write(<span class="string">'python'</span>)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">6</span></span><br><span class="line">file.write(<span class="string">'python2'</span>)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">7</span></span><br></pre></td></tr></table></figure><blockquote><p>写单个字符串</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.writelines([<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>])</span><br></pre></td></tr></table></figure><blockquote><p>写一行数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.flush()</span><br></pre></td></tr></table></figure><blockquote><p>本来写入的数据是存在内存里的，使用flush方法，把数据保存到硬盘中。</p></blockquote><h4 id="读取与关闭"><a href="#读取与关闭" class="headerlink" title="读取与关闭"></a>读取与关闭</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file.seek(<span class="number">0</span>) <span class="comment"># 把光标移到首位</span></span><br><span class="line">file.read()</span><br><span class="line">Out[<span class="number">18</span>]: <span class="string">'python\n\npython3\n\nc++\n\nc\n\njava\n\nmachine learning\n\ndeep learning\n'</span></span><br></pre></td></tr></table></figure><blockquote><p>读取全部数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">file.readline()</span><br><span class="line">Out[<span class="number">21</span>]: <span class="string">'python\n'</span></span><br><span class="line">file.readline()</span><br><span class="line">Out[<span class="number">22</span>]: <span class="string">'\n'</span></span><br><span class="line">file.readline()</span><br><span class="line">Out[<span class="number">23</span>]: <span class="string">'python3\n'</span></span><br><span class="line">file.readline()</span><br><span class="line">Out[<span class="number">24</span>]: <span class="string">'\n'</span></span><br><span class="line">file.readline()</span><br><span class="line">Out[<span class="number">25</span>]: <span class="string">'c++\n'</span></span><br></pre></td></tr></table></figure><blockquote><p>一行一行的读取数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">file.readlines()</span><br><span class="line">Out[<span class="number">26</span>]: </span><br><span class="line">[<span class="string">'\n'</span>,</span><br><span class="line"> <span class="string">'c\n'</span>,</span><br><span class="line"> <span class="string">'\n'</span>,</span><br><span class="line"> <span class="string">'java\n'</span>,</span><br><span class="line"> <span class="string">'\n'</span>,</span><br><span class="line"> <span class="string">'machine learning\n'</span>,</span><br><span class="line"> <span class="string">'\n'</span>,</span><br><span class="line"> <span class="string">'deep learning\n'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>读取所有行并以列表形式返回</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file.flush() <span class="comment"># 把内存中的数据保存到硬盘中</span></span><br><span class="line">file.close() <span class="comment"># 关闭并保存文件</span></span><br><span class="line">file.closed  <span class="comment"># 判断文件是否关闭</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file.close()</span><br><span class="line">file.closed</span><br><span class="line">Out[<span class="number">28</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h4 id="查看与移动指针"><a href="#查看与移动指针" class="headerlink" title="查看与移动指针"></a>查看与移动指针</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file.tell()</span><br><span class="line">Out[<span class="number">9</span>]: <span class="number">50</span></span><br><span class="line">file.seek(<span class="number">0</span>, <span class="number">0</span>)  <span class="comment">#0代表从文件开头开始算起，1代表从当前位置开始算起，2代表从文件末尾算起。</span></span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">0</span></span><br><span class="line">file.tell()</span><br><span class="line">Out[<span class="number">11</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>tell 查看光标位置，seek移动光标的位置。</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>持久存储：保存内存中数据都是易丢失的，只有保存在硬盘中才能持久的存储，保存在硬盘中的基本方法就是把数据写入文件中。</p><p>打开与关闭：在python中文件的打开与关闭变得十分简单快捷，文件在关闭的时候就会自动保存</p><p>写入与读取：文件的写入和读取是必须要十分熟练的内容</p></blockquote><h3 id="上下文管理"><a href="#上下文管理" class="headerlink" title="上下文管理"></a>上下文管理</h3><p>文件能够自动关闭吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    st = file.read()</span><br><span class="line">    print(st)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c</span><br><span class="line">java</span><br><span class="line">machine learning</span><br><span class="line">deep learning</span><br><span class="line">file.closed</span><br><span class="line">Out[<span class="number">3</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p>with能够自动关闭文件，不需要执行close方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunTime</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.start_time = time.time()</span><br><span class="line">        <span class="keyword">return</span> self.start_time</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        self.end_time = time.time()</span><br><span class="line">        self.run_time = self.end_time - self.start_time</span><br><span class="line">        print(<span class="string">'Time consuming %s '</span> % self.run_time)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> RunTime():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Time consuming <span class="number">0.005983591079711914</span></span><br></pre></td></tr></table></figure><blockquote><p>通过这两个方法可以方便的实现上下文管理</p><p>with会把 <strong>enter</strong> 的返回值赋值给 as 后的变量</p></blockquote><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><blockquote><p>with: 使用with打开文件，则文件不需要自己关闭，会自动的关闭</p><p><strong>enter</strong>: 进入时需要执行的代码，相当于准备工作</p><p><strong>exit</strong> : 退出时需要执行的代码，相当于收尾工作</p></blockquote><h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><p>文件可以持久存储，但是现在类似于临时的一些文件，不需要持久存储，如一些临时的二维码等，这个不需要持久存储，但是却需要短时间内大量读取，这是时候还是只能保存在文件里面吗？</p><h4 id="StringIO"><a href="#StringIO" class="headerlink" title="StringIO"></a><a href="https://docs.python.org/3/library/io.html" target="_blank" rel="noopener">StringIO</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: <span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: sio = io.StringIO()  <span class="comment"># 创建io</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: sio.write(<span class="string">'abc'</span>)  <span class="comment"># 写入数据</span></span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: sio</span><br><span class="line">Out[<span class="number">7</span>]: &lt;_io.StringIO at <span class="number">0x7f0b775ddaf8</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: sio.read()</span><br><span class="line">Out[<span class="number">8</span>]: <span class="string">''</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: sio.seek(<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">9</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: sio.read()</span><br><span class="line">Out[<span class="number">10</span>]: <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: sio.getvalue()  <span class="comment"># 读取数据，全部的，不管光标位置</span></span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: sio.close()</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: sio</span><br><span class="line">Out[<span class="number">13</span>]: &lt;_io.StringIO at <span class="number">0x7f0b775ddaf8</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: sio.getvalue()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-14</span><span class="number">-2</span>c8cd5e6194b&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 sio.getvalue()</span><br><span class="line"></span><br><span class="line">ValueError: I/O operation on closed file</span><br></pre></td></tr></table></figure><blockquote><p>StringIO在内存中如同打开文件一样操作字符串，因此也有文件的很多方法</p><p>当创建的StringIO调用 close() 方法时，在内存中的数据会被丢失</p></blockquote><h4 id="BytesIO"><a href="#BytesIO" class="headerlink" title="BytesIO"></a><a href="https://docs.python.org/3/library/io.html" target="_blank" rel="noopener">BytesIO</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">17</span>]: bio = io.BytesIO()  <span class="comment"># 创建IO</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: bio</span><br><span class="line">Out[<span class="number">18</span>]: &lt;_io.BytesIO at <span class="number">0x7f0b775b9150</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: bio.write(<span class="string">b'abc'</span>)  <span class="comment"># 写入数据</span></span><br><span class="line">Out[<span class="number">19</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: bio.read()</span><br><span class="line">Out[<span class="number">20</span>]: <span class="string">b''</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: bio.seek(<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">21</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: bio.read()</span><br><span class="line">Out[<span class="number">22</span>]: <span class="string">b'abc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: bio.getvalue()  <span class="comment"># 读取数据 </span></span><br><span class="line">Out[<span class="number">23</span>]: <span class="string">b'abc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: bio.close()</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: bio.read()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-25</span>-dca3ff2736f4&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 bio.read()</span><br><span class="line"></span><br><span class="line">ValueError: I/O operation on closed file.</span><br></pre></td></tr></table></figure><blockquote><p>BytesIO和 StringIO 类似，但是BytesIO操作的是 Bytes数据</p></blockquote><h3 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h3><p>文件可以直接新建，但是现在如果需要创建文件夹和移动文件夹怎么办呢？</p><h4 id="os-操作系统交互"><a href="#os-操作系统交互" class="headerlink" title="os   操作系统交互"></a><a href="https://docs.python.org/3/library/os.html" target="_blank" rel="noopener">os</a> 操作系统交互</h4><blockquote><p>os模块提供python和操作系统交互的接口</p></blockquote><h5 id="直接调用吸引命令"><a href="#直接调用吸引命令" class="headerlink" title="直接调用吸引命令"></a>直接调用吸引命令</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: os.system(<span class="string">'ls'</span>)</span><br><span class="line">Data  PythonClassEnv  ReadMe.md</span><br><span class="line">Out[<span class="number">2</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="通用路径操作"><a href="#通用路径操作" class="headerlink" title="通用路径操作"></a>通用路径操作</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: os.path</span><br><span class="line">Out[<span class="number">5</span>]: &lt;module <span class="string">'posixpath'</span> <span class="keyword">from</span> <span class="string">'/usr/lib/python3.5/posixpath.py'</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: os.path.join(<span class="string">r'Data'</span>, <span class="string">r'a'</span>)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="string">'Data/a'</span></span><br></pre></td></tr></table></figure><h5 id="文件目录操作"><a href="#文件目录操作" class="headerlink" title="文件目录操作"></a>文件目录操作</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: os.mkdir(<span class="string">'text'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: os.system(<span class="string">'ls'</span>)</span><br><span class="line">Data  PythonClassEnv  ReadMe.md  text</span><br><span class="line">Out[<span class="number">8</span>]: <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">9</span>]: os.rename(<span class="string">'text'</span>, <span class="string">'text1'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: os.system(<span class="string">'ls'</span>)</span><br><span class="line">Data  PythonClassEnv  ReadMe.md  text1</span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>os 提供了Python和操作系统交互方式，只要是和操作系统相关，就可以尝试在os模块中找方法</p></blockquote><h4 id="shutil-高级文件操作"><a href="#shutil-高级文件操作" class="headerlink" title="shutil   高级文件操作"></a><a href="https://docs.python.org/3/library/shutil.html" target="_blank" rel="noopener">shutil</a> 高级文件操作</h4><blockquote><p>shutil 模块提供了许多关于文件和文件集合的高级操作</p></blockquote><h5 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: <span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: shutil.move(<span class="string">'text1'</span>, <span class="string">'text'</span>)</span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'text'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: os.system(<span class="string">'ls'</span>)</span><br><span class="line">Data  PythonClassEnv  ReadMe.md  text</span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="复制文件夹"><a href="#复制文件夹" class="headerlink" title="复制文件夹"></a>复制文件夹</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: <span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: shutil.move(<span class="string">'text1'</span>, <span class="string">'text'</span>)</span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'text'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: os.system(<span class="string">'ls'</span>)</span><br><span class="line">Data  PythonClassEnv  ReadMe.md  text</span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: <span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: shutil.move(<span class="string">'text1'</span>, <span class="string">'text'</span>)</span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'text'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: os.system(<span class="string">'ls'</span>)</span><br><span class="line">Data  PythonClassEnv  ReadMe.md  text</span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      python文件
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://yoursite.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python第十话之描述器和装饰器</title>
    <link href="http://yoursite.com/2018/12/19/2018-12-17-python-@/"/>
    <id>http://yoursite.com/2018/12/19/2018-12-17-python-@/</id>
    <published>2018-12-18T16:00:00.000Z</published>
    <updated>2018-12-19T14:27:57.239Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>类每次实例化的时候都会创建一个新的对象，如果要求类只能被实例化一次该怎么做呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Earth</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'earth'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = Earth()</span><br><span class="line">print(e, id(e))</span><br><span class="line">a = Earth()</span><br><span class="line">print(a, id(a))</span><br></pre></td></tr></table></figure><blockquote><p>按照我们上一节讲的，类可以多个实例化</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;__main__.Earth object at <span class="number">0x000001D54B28A978</span>&gt; <span class="number">2015600617848</span></span><br><span class="line">&lt;__main__.Earth object at <span class="number">0x000001D54B293EF0</span>&gt; <span class="number">2015600656112</span></span><br></pre></td></tr></table></figure><blockquote><p>我们可以看出，多个实例化，每个实例化的地址都不相同。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Earth</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'instance'</span>):</span><br><span class="line">            cls.instance = super().__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'earth'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = Earth()</span><br><span class="line">print(e, id(e))</span><br><span class="line">a = Earth()</span><br><span class="line">print(a, id(a))</span><br></pre></td></tr></table></figure><blockquote><p>类的实例化的时候，会在init前调用new方法。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;__main__.Earth object at <span class="number">0x0000024EF2DBA940</span>&gt; <span class="number">2538105186624</span></span><br><span class="line">&lt;__main__.Earth object at <span class="number">0x0000024EF2DBA940</span>&gt; <span class="number">2538105186624</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看出两次创建对象，结果返回的是同一个对象实例</p></blockquote><h4 id="变量共享"><a href="#变量共享" class="headerlink" title="变量共享"></a>变量共享</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Earth</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'instance'</span>):</span><br><span class="line">            cls.instance = super().__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = Earth(<span class="string">'china'</span>)</span><br><span class="line">print(e, id(e))</span><br><span class="line">a = Earth(<span class="string">'others'</span>)</span><br><span class="line">print(a, id(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(e.name)</span><br><span class="line">print(a.name)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;__main__.Earth object at <span class="number">0x000002077AA33E80</span>&gt; <span class="number">2231145545344</span></span><br><span class="line">&lt;__main__.Earth object at <span class="number">0x000002077AA33E80</span>&gt; <span class="number">2231145545344</span></span><br><span class="line">others</span><br><span class="line">others</span><br></pre></td></tr></table></figure><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a><strong>应用</strong></h4><blockquote><ul><li>Python的logger就是一个单例模式，用以日志记录</li><li>Windows的资源管理器是一个单例模式</li><li>线程池，数据库连接池等资源池一般也用单例模式</li><li>网站计数器</li></ul></blockquote><h4 id="使用情况"><a href="#使用情况" class="headerlink" title="使用情况"></a>使用情况</h4><blockquote><p>当每个实例都会占用资源，而且实例初始化会影响性能，这个时候就可以考虑使用单例模式，它给我们带来的好处是只有一个实例占用资源，并且只需初始化一次；</p><p>当有同步需要的时候，可以通过一个实例来进行同步控制，比如对某个共享文件（如日志文件）的控制，对计数器的同步控制等，这种情况下由于只有一个实例，所以不用担心同步问题。</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote><p>初始化函数之前：<strong>new</strong>方法会在初始化函数<strong>init</strong>方法之前执行。</p><p>单例模式：利用这个<strong>new</strong>方法可以很方便的实现类的单例模式。</p><p>合理利用：<strong>new</strong> 方法合理利用可以带来方便，常应用在类的单例模式。</p></blockquote><h3 id="定制属性访问"><a href="#定制属性访问" class="headerlink" title="定制属性访问"></a>定制属性访问</h3><blockquote><p>如何判断一个实例里面有某个属性呢？</p><p>怎样删除实例属性呢？</p><p>同样的怎样删除变量呢？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 传入长和宽</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, length, width)</span>:</span></span><br><span class="line">        self.length = length</span><br><span class="line">        self.width = width</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line">        area = self.width * self.length</span><br><span class="line">        <span class="keyword">return</span> area</span><br><span class="line"></span><br><span class="line">b = Rectangle(<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><blockquote><p>接下来我们来对类的属性进行定制化</p></blockquote><h4 id="增加属性"><a href="#增加属性" class="headerlink" title="增加属性"></a>增加属性</h4><h5 id="setattr"><a href="#setattr" class="headerlink" title="setattr"></a><code>setattr</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setattr(b, <span class="string">'s'</span>, <span class="number">12</span>)</span><br><span class="line">b.s</span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">12</span></span><br><span class="line">setattr(b, <span class="string">'h'</span>, <span class="number">6</span>)</span><br><span class="line">b.h</span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">6</span></span><br></pre></td></tr></table></figure><blockquote><p>往类的属性里面添加方法并赋值。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">b.__setattr__(<span class="string">'s'</span>, <span class="number">5</span>)</span><br><span class="line">b.__setattr__(<span class="string">'h'</span>, <span class="number">15</span>)</span><br><span class="line">b.s</span><br><span class="line">Out[<span class="number">12</span>]: <span class="number">5</span></span><br><span class="line">b.h</span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">15</span></span><br></pre></td></tr></table></figure><blockquote><p>等价于类的对应魔术方法</p></blockquote><h4 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h4><h5 id="delattr"><a href="#delattr" class="headerlink" title="delattr"></a><code>delattr</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delattr(b, <span class="string">'s'</span>)</span><br><span class="line">delattr(b, <span class="string">'h'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>删除属性</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b.__delattr__(<span class="string">'s'</span>)</span><br><span class="line">b.__delattr__(<span class="string">'h'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>等价于类的对应魔术方法</p></blockquote><h4 id="修改属性"><a href="#修改属性" class="headerlink" title="修改属性"></a>修改属性</h4><h5 id="setattr-1"><a href="#setattr-1" class="headerlink" title="setattr"></a><code>setattr</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">b.s</span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">5</span></span><br><span class="line">b.h</span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">15</span></span><br><span class="line">setattr(b, <span class="string">'s'</span>, <span class="number">20</span>)</span><br><span class="line">setattr(b, <span class="string">'h'</span>, <span class="number">20</span>)</span><br><span class="line">b.s</span><br><span class="line">Out[<span class="number">9</span>]: <span class="number">20</span></span><br><span class="line">b.h</span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">20</span></span><br></pre></td></tr></table></figure><blockquote><p>同样是使用setattr来修改属性</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">b.__setattr__(<span class="string">'s'</span>, <span class="number">20</span>)</span><br><span class="line">b.__setattr__(<span class="string">'h'</span>, <span class="number">20</span>)</span><br><span class="line">b.s</span><br><span class="line">Out[<span class="number">12</span>]: <span class="number">20</span></span><br><span class="line">b.h</span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">20</span></span><br></pre></td></tr></table></figure><blockquote><p>等价于类的对应魔术方法</p></blockquote><h4 id="查找属性"><a href="#查找属性" class="headerlink" title="查找属性"></a>查找属性</h4><h5 id="hasattr"><a href="#hasattr" class="headerlink" title="hasattr"></a><code>hasattr</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hasattr(b, <span class="string">'s'</span>)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="keyword">True</span></span><br><span class="line">hasattr(b, <span class="string">'h'</span>)</span><br><span class="line">Out[<span class="number">12</span>]: <span class="keyword">True</span></span><br><span class="line">hasattr(b, <span class="string">'x'</span>)</span><br><span class="line">Out[<span class="number">13</span>]: <span class="keyword">False</span></span><br></pre></td></tr></table></figure><blockquote><p>有对应属性就返回True，否则就返回Flase</p></blockquote><h5 id="getattr"><a href="#getattr" class="headerlink" title="getattr"></a><code>getattr</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getattr(b, <span class="string">'s'</span>)</span><br><span class="line">Out[<span class="number">14</span>]: <span class="number">20</span></span><br><span class="line">getattr(b, <span class="string">'h'</span>)</span><br><span class="line">Out[<span class="number">15</span>]: <span class="number">20</span></span><br><span class="line">getattr(b, <span class="string">'x'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"C:\Program Files\Python36\lib\site-packages\IPython\core\interactiveshell.py"</span>, line <span class="number">3265</span>, <span class="keyword">in</span> run_code</span><br><span class="line">    exec(code_obj, self.user_global_ns, self.user_ns)</span><br><span class="line">  File <span class="string">"&lt;ipython-input-16-ae1b4378a11a&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    getattr(b, <span class="string">'x'</span>)</span><br><span class="line">AttributeError: <span class="string">'Rectangle'</span> object has no attribute <span class="string">'x'</span></span><br></pre></td></tr></table></figure><blockquote><p>有就返回属性值，没有就报错。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">b.__getattribute__(<span class="string">'s'</span>)</span><br><span class="line">Out[<span class="number">17</span>]: <span class="number">20</span></span><br><span class="line">b.__getattribute__(<span class="string">'x'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"C:\Program Files\Python36\lib\site-packages\IPython\core\interactiveshell.py"</span>, line <span class="number">3265</span>, <span class="keyword">in</span> run_code</span><br><span class="line">    exec(code_obj, self.user_global_ns, self.user_ns)</span><br><span class="line">  File <span class="string">"&lt;ipython-input-18-f65163239ef2&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    b.__getattribute__(<span class="string">'x'</span>)</span><br><span class="line">AttributeError: <span class="string">'Rectangle'</span> object has no attribute <span class="string">'x'</span></span><br></pre></td></tr></table></figure><blockquote><p>等价于类的对应魔术方法</p></blockquote><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><blockquote><p>我们在查询属性的时候，使用getattr，如果没有属性值，又不想报错怎么办呢？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 传入长和宽</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, length, width)</span>:</span></span><br><span class="line">        self.length = length</span><br><span class="line">        self.width = width</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line">        area = self.width * self.length</span><br><span class="line">        <span class="keyword">return</span> area</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">"没有这个属性！"</span>)</span><br><span class="line"></span><br><span class="line">b = Rectangle(<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getattr(b, <span class="string">'s'</span>)</span><br><span class="line">没有这个属性！</span><br></pre></td></tr></table></figure><blockquote><p>当属性不存在时，如果定义了此方法，则调用方法</p></blockquote><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-19/104326.jpg" alt="属性访问"></p><blockquote><p>hasattr: 判断是否存在属性，如果属性存在则进行下一步操作。</p><p>getattr: 得到属性值。</p><p>setattr：设置属性。</p></blockquote><h3 id="描述符"><a href="#描述符" class="headerlink" title="描述符"></a>描述符</h3><p>如果在一个类中实例化另一个类，对这个属性进行访问的时候怎么做的？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAtrribute</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">    m = MyAtrribute()</span><br><span class="line"></span><br><span class="line">c = MyClass() </span><br><span class="line"></span><br><span class="line">c.m</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;__main__.MyAtrribute object at <span class="number">0x000001F4922CF2E8</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>返回的是对象</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAtrribute</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print(<span class="string">'get'</span>)</span><br><span class="line">        print(instance)</span><br><span class="line">        print(owner)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">    m = MyAtrribute()</span><br><span class="line"></span><br><span class="line">c = MyClass()</span><br><span class="line"></span><br><span class="line">print(c.m)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">get</span><br><span class="line">&lt;__main__.MyClass object at <span class="number">0x00000258C5703E80</span>&gt;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">MyClass</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">None</span></span></span><br></pre></td></tr></table></figure><blockquote><p>直接访问时，调用get方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAtrribute</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print(<span class="string">'get'</span>)</span><br><span class="line">        print(instance)</span><br><span class="line">        print(owner)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        print(instance)</span><br><span class="line">        print(value)</span><br><span class="line">        print(<span class="string">'set'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">        print(instance)</span><br><span class="line">        print(<span class="string">'delete'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">    m = MyAtrribute()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'__del__'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = MyClass()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 __set__</span></span><br><span class="line">c.m = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 __deletel__</span></span><br><span class="line"><span class="keyword">del</span> c.m</span><br><span class="line">delattr(c, <span class="string">'m'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;__main__.MyClass object at <span class="number">0x000002312DAEBF28</span>&gt;</span><br><span class="line"><span class="number">1</span></span><br><span class="line">set</span><br><span class="line">&lt;__main__.MyClass object at <span class="number">0x000002312DAEBF28</span>&gt;</span><br><span class="line">delete</span><br><span class="line">&lt;__main__.MyClass object at <span class="number">0x000002312DAEBF28</span>&gt;</span><br><span class="line">delete</span><br><span class="line">__del__</span><br></pre></td></tr></table></figure><blockquote><p>根据访问时带使用不同的方式，调用不用的属性。</p></blockquote><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><blockquote><p>描述符大家了解即可</p><p>魔术方法的作用其实是让开发人员能够更加灵活的控制类的表现形式</p></blockquote><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>之前我们讲了闭包，闭包中可以传入一个函数吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fx</span><span class="params">(x)</span>:</span></span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fy</span><span class="params">(y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = fx(<span class="number">1</span>)</span><br><span class="line">print(a(<span class="number">12</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><blockquote><p>这是我们前面所见过的闭包</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(y)</span>:</span></span><br><span class="line">        print(<span class="string">'f2 running'</span>)</span><br><span class="line">        <span class="keyword">return</span> func(y) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> f2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(m)</span>:</span></span><br><span class="line">    print(<span class="string">'f3 running'</span>)</span><br><span class="line">    <span class="keyword">return</span> m * m</span><br><span class="line"></span><br><span class="line">a = f1(f3)</span><br><span class="line">print(a)</span><br><span class="line">print(a(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;function f1.&lt;locals&gt;.f2 at <span class="number">0x0000026D2F4BA488</span>&gt;</span><br><span class="line">f2 running</span><br><span class="line">f3 running</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><blockquote><p>闭包传入函数</p></blockquote><h4 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(y)</span>:</span></span><br><span class="line">        print(<span class="string">'f2 running'</span>)</span><br><span class="line">        <span class="keyword">return</span> func(y) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@f1  # 语法糖</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(m)</span>:</span></span><br><span class="line">    print(<span class="string">'f3 running'</span>)</span><br><span class="line">    <span class="keyword">return</span> m * m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(f3(<span class="number">3</span>))  <span class="comment"># f3 = f1(f3)(3)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f2 running</span><br><span class="line">f3 running</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><blockquote><p>在Python中直接用语法糖，f3(3) = f1(f3)(3)</p></blockquote><h4 id="内置装饰器"><a href="#内置装饰器" class="headerlink" title="内置装饰器"></a>内置装饰器</h4><h5 id="property"><a href="#property" class="headerlink" title="@property"></a><code>@property</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 传入长和宽</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, length, width)</span>:</span></span><br><span class="line">        self.length = length</span><br><span class="line">        self.width = width</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line">        area = self.width * self.length</span><br><span class="line">        <span class="keyword">return</span> area</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area1</span><span class="params">(self)</span>:</span></span><br><span class="line">        area = self.width * self.length</span><br><span class="line">        <span class="keyword">return</span> area</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">'no attribute'</span>)</span><br><span class="line"></span><br><span class="line">b = Rectangle(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">print(b.area1())</span><br><span class="line">print(b.area)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><blockquote><p>访问函数时，就像访问属性一样</p></blockquote><h5 id="staticmethod"><a href="#staticmethod" class="headerlink" title="@staticmethod"></a><code>@staticmethod</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 传入长和宽</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, length, width)</span>:</span></span><br><span class="line">        self.length = length</span><br><span class="line">        self.width = width</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line">        area = self.width * self.length</span><br><span class="line">        <span class="keyword">return</span> area</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'func'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">'no attribute'</span>)</span><br><span class="line"></span><br><span class="line">b = Rectangle(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">Rectangle.func()</span><br><span class="line">b.func()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func</span><br><span class="line">func</span><br></pre></td></tr></table></figure><blockquote><p>静态方法</p></blockquote><h5 id="classmethod"><a href="#classmethod" class="headerlink" title="@classmethod"></a><code>@classmethod</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 传入长和宽</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, length, width)</span>:</span></span><br><span class="line">        self.length = length</span><br><span class="line">        self.width = width</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line">        area = self.width * self.length</span><br><span class="line">        <span class="keyword">return</span> area</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'func'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(cls)</span><br><span class="line">        print(<span class="string">'show'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self)</span><br><span class="line">        print(<span class="string">'fun2'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        print(<span class="string">'no attribute'</span>)</span><br><span class="line"></span><br><span class="line">b = Rectangle(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">b.show()</span><br><span class="line">b.fun2()</span><br><span class="line">Rectangle.show()</span><br><span class="line">Rectangle.fun2(b)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Rectangle</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">show</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">__main__</span>.<span class="title">Rectangle</span> <span class="title">object</span> <span class="title">at</span> 0<span class="title">x000001897E3519B0</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">fun2</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">__main__</span>.<span class="title">Rectangle</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">show</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">__main__</span>.<span class="title">Rectangle</span> <span class="title">object</span> <span class="title">at</span> 0<span class="title">x000001897E3519B0</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">fun2</span></span></span><br></pre></td></tr></table></figure><blockquote><p>类方法：cls代表类本身，如果加上self，在调用时就要把实例传入。</p></blockquote><h4 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test_Class</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'类'</span>)</span><br><span class="line">        print(self.func())</span><br><span class="line">        <span class="keyword">return</span> self.func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test_Class</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun_test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'这是个测试函数'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">类</span><br><span class="line">这是个测试函数</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line">&lt;function fun_test at <span class="number">0x000001E024B28730</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>类也可以做装饰器，但是需要定义<strong>call</strong> 方法</p></blockquote><h4 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h4><blockquote><p>查看函数运行时间的装饰器</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_time</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_fun</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        t0 = time.time()</span><br><span class="line">        print(<span class="string">'star time: %s'</span>%(time.strftime(<span class="string">'%x'</span>,time.localtime())) )</span><br><span class="line">        back = func(*args,**kwargs)</span><br><span class="line">        print(<span class="string">'end time: %s'</span>%(time.strftime(<span class="string">'%x'</span>,time.localtime())) )</span><br><span class="line">        print(<span class="string">'run time: %s'</span>%(time.time() - t0))</span><br><span class="line">        <span class="keyword">return</span> back</span><br><span class="line">    <span class="keyword">return</span> new_fun</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@run_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'1213'</span>)</span><br><span class="line"></span><br><span class="line">demo()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">star time: <span class="number">12</span>/<span class="number">19</span>/<span class="number">18</span></span><br><span class="line"><span class="number">1213</span></span><br><span class="line">end time: <span class="number">12</span>/<span class="number">19</span>/<span class="number">18</span></span><br><span class="line">run time: <span class="number">0.0</span></span><br></pre></td></tr></table></figure><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote><h5 id="装饰器本质是闭包，在不影响原函数使用的情况下，增加原函数功能。"><a href="#装饰器本质是闭包，在不影响原函数使用的情况下，增加原函数功能。" class="headerlink" title="装饰器本质是闭包，在不影响原函数使用的情况下，增加原函数功能。"></a>装饰器本质是闭包，在不影响原函数使用的情况下，增加原函数功能。</h5><p>内置装饰器：三个内置装饰器是需要掌握的，在项目中会经常使用。</p></blockquote><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      python描述器和装饰器
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://yoursite.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python第九话之多继承和魔法方法</title>
    <link href="http://yoursite.com/2018/12/14/2018-12-16-python-magic/"/>
    <id>http://yoursite.com/2018/12/14/2018-12-16-python-magic/</id>
    <published>2018-12-13T16:00:00.000Z</published>
    <updated>2018-12-19T14:27:46.733Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><h3 id="多继承和魔法方法"><a href="#多继承和魔法方法" class="headerlink" title="多继承和魔法方法"></a>多继承和魔法方法</h3><p>在上一节中，我们讲了类的定义，属性和方法，那么我们这个节课来看看<code>多继承</code>和<code>魔法方法</code>。</p><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><p>在上节我们讲到了继承，一个类可以继承一个类，继承之后可以把父类所有的方法和属性都直接继承过来，那一个类可以继承多个类呢？</p><p>如果可以继承多个类的话，那如果两个父类中有一样的方法的情况下，子类继承哪一个呢？</p><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'this is Base'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'this is A'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'this is B'</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A,B)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line">print(c.play())</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> A</span><br></pre></td></tr></table></figure><blockquote><p>首先类是可以多继承的</p><p>优先使用第一个类里面的方法。</p></blockquote><p><strong>总结</strong></p><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-13/99683112.jpg" alt="1"></p><blockquote><p>通过C类实例的方法调用来看</p><p>当继承多个父类时，如果父类中有相同的方法，那么子类会优先使用最先被继承的方法.</p></blockquote><h4 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h4><p>在上面的例子中，如果不想继承父类的方法怎么办呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'this is Base'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'this is A'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'this is B'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A, B)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'this is C'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line">print(c.play())</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> C</span><br></pre></td></tr></table></figure><blockquote><p>当子类继承父类之后，如果子类不想使用父类的方法，可以通过重写来覆盖父类的方法.</p></blockquote><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>重写父类方法之后，如果又需要使用父类的方法呢？</p><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'this is Base'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'this is A'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'this is B'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A, B)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        A.play(self)</span><br><span class="line">        print(<span class="string">'这是C'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demo = C()</span><br><span class="line">demo.play()</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> A</span><br><span class="line">这是C</span><br></pre></td></tr></table></figure><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'this is Base'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'this is A'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'this is B'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A, B)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().play()</span><br><span class="line">        print(<span class="string">'这是C'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demo = C()</span><br><span class="line">demo.play()</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> A</span><br><span class="line">这是C</span><br></pre></td></tr></table></figure><h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><blockquote><p>super函数可以调用父类的方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'this is Base'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().play()</span><br><span class="line">        print(<span class="string">'this is A'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().play()</span><br><span class="line">        print(<span class="string">'this is B'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A, B)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().play()</span><br><span class="line">        print(<span class="string">'这是C'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demo = C()</span><br><span class="line">demo.play()</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this <span class="keyword">is</span> Base</span><br><span class="line">this <span class="keyword">is</span> B</span><br><span class="line">this <span class="keyword">is</span> A</span><br><span class="line">这是C</span><br></pre></td></tr></table></figure><p>那为什么是这个顺序输出呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(C.mro())</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.Base'&gt;, &lt;class 'object'&gt;]</span><br></pre></td></tr></table></figure><h4 id="继承顺序："><a href="#继承顺序：" class="headerlink" title="继承顺序："></a>继承顺序：</h4><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-13/86231356.jpg" alt="2"></p><blockquote><p>在python3中，类被创建时会自动创建方法解析顺序mro</p><p>object是所有类的父类</p></blockquote><h4 id="Mixin开发模式"><a href="#Mixin开发模式" class="headerlink" title="Mixin开发模式"></a>Mixin开发模式</h4><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-13/85222178.jpg" alt="3"></p><blockquote><p>Mixin是一种开发模式，一般规范上，Mixin类是继承的终点，即不再被继承</p><p>Mixin的优点就是不需要过多考虑继承关系，不会出现各父类之间有相同方法的情况</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>mro: 类在生成时会自动生成方法解析顺序，可以通过 类名.mro()来查看</p><p>super: super函数可以来调用父类的方法，使用super的好处在于即使父类改变了，那么也不需要更改类中的代码</p><p>Mixin: Mixin是一种开发模式，给大家在今后的开发中提供一种思路.</p></blockquote><h3 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h3><p>在讲字符串拼接的时候，字符串可以直接相加，那我们自定义的类可以实现吗？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 传入长和宽</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, length, width)</span>:</span></span><br><span class="line">        self.length = length</span><br><span class="line">        self.width = width</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line">        area = self.width * self.length</span><br><span class="line">        <span class="keyword">return</span> area</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        add_length = self.length + other.length</span><br><span class="line">        add_width = self.width + other.width</span><br><span class="line">        <span class="keyword">return</span> add_length,add_width</span><br><span class="line"></span><br><span class="line">a = Rectangle(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">b = Rectangle(<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">print(a+b)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><blockquote><p>(8, 10)</p></blockquote><h4 id="运算方法"><a href="#运算方法" class="headerlink" title="运算方法"></a>运算方法</h4><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-13/78302936.jpg" alt="4"></p><blockquote><p>运算方法大家了解下就行，在实际运用中用不并不多。</p></blockquote><h5 id="add和radd原理"><a href="#add和radd原理" class="headerlink" title="add和radd原理"></a>add和radd原理</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(<span class="string">'__add__'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__radd__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(<span class="string">'__radd__'</span>)</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = B()</span><br><span class="line">a+b</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__radd__</span><br></pre></td></tr></table></figure><blockquote><p>优先在两类里找add方法，没有就自动调用radd方法。</p></blockquote><p><strong>演示</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name =  name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,age)</span>:</span></span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        print(<span class="string">'__add__'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__radd__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> other.age + self.age</span><br><span class="line"></span><br><span class="line">a = A(<span class="string">'age'</span>,<span class="number">123</span>)</span><br><span class="line">b = B(<span class="number">123</span>)</span><br><span class="line">print(a+b)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">246</span></span><br></pre></td></tr></table></figure><h4 id="str和repr原理"><a href="#str和repr原理" class="headerlink" title="str和repr原理"></a>str和repr原理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 传入长和宽</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, length, width)</span>:</span></span><br><span class="line">        self.length = length</span><br><span class="line">        self.width = width</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line">        area = self.width * self.length</span><br><span class="line">        <span class="keyword">return</span> area</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        add_length = self.length + other.length</span><br><span class="line">        add_width = self.width + other.width</span><br><span class="line">        <span class="keyword">return</span> add_length, add_width</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__radd__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Rectangle radd"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'length is %s, width is %s '</span> % (self.length, self.width)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'area  is %s'</span> % self.area()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Rectangle(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">b = Rectangle(<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">print(a+b)</span><br><span class="line">print(a.__add__(b))</span><br><span class="line"></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有str</span></span><br><span class="line">(<span class="number">8</span>, <span class="number">10</span>)</span><br><span class="line">(<span class="number">8</span>, <span class="number">10</span>)</span><br><span class="line">length <span class="keyword">is</span> <span class="number">3</span>, width <span class="keyword">is</span> <span class="number">4</span> </span><br><span class="line"><span class="comment"># 无str</span></span><br><span class="line">(<span class="number">8</span>, <span class="number">10</span>)</span><br><span class="line">(<span class="number">8</span>, <span class="number">10</span>)</span><br><span class="line">area  <span class="keyword">is</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><blockquote><p>优先在两类里找str方法，没有就自动调用repr方法。</p><p>在python中，str和repr方法在处理对象的时候，分别调用的是对象的<strong>str</strong>和<strong>repr</strong>方法</p><p>print也是如此，调用str函数来处理输出的对象，如果对象没有定义<strong>str</strong>方法，则调用repr处理</p></blockquote><h4 id="call方法"><a href="#call方法" class="headerlink" title="call方法"></a>call方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 传入长和宽</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, length, width)</span>:</span></span><br><span class="line">        self.length = length</span><br><span class="line">        self.width = width</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line">        area = self.width * self.length</span><br><span class="line">        <span class="keyword">return</span> area</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        add_length = self.length + other.length</span><br><span class="line">        add_width = self.width + other.width</span><br><span class="line">        <span class="keyword">return</span> add_length, add_width</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__radd__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Rectangle radd"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'length is %s, width is %s '</span> % (self.length, self.width)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'area  is %s'</span> % self.area()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Rectangle called'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Rectangle(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">b = Rectangle(<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">print(a())</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rectangle called</span><br></pre></td></tr></table></figure><blockquote><p>正常情况下，实例是不能像函数一样被调用的，要想实例能够被调用，就需要定义 <strong>call</strong> 方法</p></blockquote><h4 id="其他魔法方法"><a href="#其他魔法方法" class="headerlink" title="其他魔法方法"></a>其他魔法方法</h4><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-13/42006401.jpg" alt="5"></p><p><strong>演示</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 传入长和宽</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, length, width)</span>:</span></span><br><span class="line">        self.length = length</span><br><span class="line">        self.width = width</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line">        area = self.width * self.length</span><br><span class="line">        <span class="keyword">return</span> area</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        add_length = self.length + other.length</span><br><span class="line">        add_width = self.width + other.width</span><br><span class="line">        <span class="keyword">return</span> add_length, add_width</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__radd__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Rectangle radd"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'length is %s, width is %s '</span> % (self.length, self.width)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'area  is %s'</span> % self.area()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Rectangle called'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Rectangle(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">print(a.__class__)</span><br><span class="line">print(a.__class__.__base__)</span><br><span class="line">print(a.__class__.__bases__)</span><br><span class="line">print(a.__dict__)   <span class="comment"># 所有属性，键值对返回</span></span><br><span class="line">print(a.__doc__)</span><br><span class="line">print(a.__dir__())</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Rectangle</span>'&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">object</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">(&lt;class <span class="string">'object'</span>&gt;,)</span></span></span><br><span class="line">&#123;'length': 3, 'width': 4&#125;</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line">[<span class="string">'length'</span>, <span class="string">'width'</span>, <span class="string">'__module__'</span>, <span class="string">'__init__'</span>, <span class="string">'area'</span>, <span class="string">'__add__'</span>, <span class="string">'__radd__'</span>, <span class="string">'__str__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__call__'</span>, <span class="string">'__dict__'</span>, <span class="string">'__weakref__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__le__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__format__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__class__'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>简单了解。</p></blockquote><h4 id="魔法方法应用场景"><a href="#魔法方法应用场景" class="headerlink" title="魔法方法应用场景"></a><strong>魔法方法应用场景</strong></h4><blockquote><p><strong>str</strong>和<strong>repr</strong>: str和repr都是分别调用这两个魔术方法来实现的</p><p>原理：在类中，很多事情其实调用的魔术方法来实现的</p><p>作用：通过合理的利用魔术方法，可以让我们更加方便的展示我们的数据</p></blockquote><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      python多继承和魔法方法
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://yoursite.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python第八话之类定义、属性和继承</title>
    <link href="http://yoursite.com/2018/12/14/2018-12-15-python-class/"/>
    <id>http://yoursite.com/2018/12/14/2018-12-15-python-class/</id>
    <published>2018-12-13T16:00:00.000Z</published>
    <updated>2018-12-19T14:27:37.329Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><h3 id="类定义、属性和继承"><a href="#类定义、属性和继承" class="headerlink" title="类定义、属性和继承"></a>类定义、属性和继承</h3><p>面向对象是一种编程思想，所以这一章内容会比较抽象，大家可以先学会怎么去写，后面用的多了写的多了自然就理解了。在第一章中大概阐述了python中的类与类型，前面学过的基本数据类型就是类，这里就来自定义类。</p><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><p>之前我们在数据类型里面学习到了列表的方法，那是怎么做的可以让列表里面放下这么多方法呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abc</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'this is fun1'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'this is fun2'</span>)</span><br><span class="line"></span><br><span class="line">a=Abc()</span><br><span class="line">print(a)</span><br><span class="line">print(a.fun1())</span><br><span class="line">print(a.fun2())</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;__main__.Abc object at <span class="number">0x0000024ED872A908</span>&gt;</span><br><span class="line">this <span class="keyword">is</span> fun1</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line">this <span class="keyword">is</span> fun2</span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure><blockquote><p>cla = ClassName()</p><p>cla.fun1()</p><p>cla.fun2()</p><p>实例化之后，可以实现类似于列表中方法的定义形式</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>定义：累得定义使用关键字 class</p><p>封装：类可以把各种对象组织在一起，通过.(点)运算符来调用类中封装好的对象。</p><p>概念：类就像是我们平时说的名词，一个称呼，但是却不是一个具体的实例，比如说：我们都是人，但是人这个名词，不能具体指代你我，我们会用一个人的名字去指代一个具体的人，这个过程就类似于实例化。</p></blockquote><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>1.类数据属性。类属性是可以直接通过“类名.属性名”来访问和修改。类属性是这个类的所有实例对象所共有的属性，任意一个实例对象都可以访问并修改这个属性（私有隐藏除外）。</p><p>2.实例数据属性。在属性前面加了self标识的属性为实例的属性，在定义的时候用的self加属性名字的形式，在查看实例的属性时就是通过实例的名称+‘.’+属性名来访问实例属性。</p><p>3.方法属性。定义属性方法的内容是函数，函数的第一个参数是self，代表实例本身。</p><h4 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a><strong>举个栗子</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    eye = <span class="number">2</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, food)</span>:</span></span><br><span class="line">        self.name = name  <span class="comment"># 实例属性</span></span><br><span class="line">        self.food = food</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'hahaha'</span>)</span><br></pre></td></tr></table></figure><h4 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat = Animal(<span class="string">'cat'</span>,<span class="string">'fish'</span>) <span class="comment">#先不传值</span></span><br><span class="line">cat.play()</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hahaha</span><br></pre></td></tr></table></figure><blockquote><p>类的实例化，实例化后会自动执行<strong>init</strong>这个初始化函数。</p></blockquote><h4 id="实例属性访问"><a href="#实例属性访问" class="headerlink" title="实例属性访问"></a>实例属性访问</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(cat.name)</span><br><span class="line">print(cat.food)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hahaha</span><br><span class="line">cat</span><br><span class="line">fish</span><br></pre></td></tr></table></figure><blockquote><p>实例的属性，实例自己可以访问，定义时有加self，不可以 ClassName. attribute（类名.属性）</p></blockquote><h4 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(Animal.eye)</span><br><span class="line">print(cat.eye)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote><p>直接定义在类中，类和实例都可以访问，没有加self</p><p>​ 可以 ClassName. attribute（类名.属性）</p></blockquote><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(Animal.name)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: type object <span class="string">'Animal'</span> has no attribute <span class="string">'name'</span></span><br></pre></td></tr></table></figure><blockquote><p>类只能访问类属性，不能访问实例属性。</p></blockquote><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><blockquote><p>类属性：类的属性，类名和实例都可以调用，相当于类和实例公用的变量</p><p>实例属性：实例自己的属性，类不能访问，其他的实例也不能访问</p><p>属性调用： 通过属性调用可以直接得到属性的属性值</p></blockquote><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>类中的方法，就是函数，但是被称之为方法，在类中的方法，在被实例调用的时候会自动传入实例本身，因此，在一般情况下，需要在参数中加入self。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    eye = <span class="number">2</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, food)</span>:</span></span><br><span class="line">        self.name = name  <span class="comment"># 实例属性</span></span><br><span class="line">        self.food = food</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'hahaha'</span>)</span><br></pre></td></tr></table></figure><h4 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat = Animal(<span class="string">'cat'</span>,<span class="string">'fish'</span>) </span><br><span class="line">cat.play()</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hahaha</span><br></pre></td></tr></table></figure><blockquote><p>类中的self指代的就是实例本身</p></blockquote><h4 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat = Animal(<span class="string">'cat'</span>,<span class="string">'fish'</span>) </span><br><span class="line">Animal.play(cat)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hahaha</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>如果在B类中定义一个方法，但是这个方法已经在A类中被定义过了，那怎样在B类中使用A类中的方法呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    eye = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, food)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.food = food</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'hahaha'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">wangwang</span><span class="params">(self)</span>:</span></span><br><span class="line">         print(<span class="string">'汪汪汪！！%s'</span> %self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demo = Dog(<span class="string">'旺财'</span>, <span class="string">'骨头'</span>)</span><br><span class="line">print(demo.name)</span><br><span class="line">print(demo.food)</span><br><span class="line">print(demo.wangwang())</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">旺财</span><br><span class="line">骨头</span><br><span class="line">汪汪汪！！旺财</span><br></pre></td></tr></table></figure><h4 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h4><blockquote><p>class A:</p><p>def play(slef):</p><p>print(‘hahaha ‘)</p><p>class B(A):</p><p>pass</p></blockquote><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><blockquote><p>​ 类的继承可以让子类将父类的全部方法和属性继承过来.</p><p>​ 在python3中，默认继承object类</p></blockquote><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      python类定义、属性和继承
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://yoursite.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python第七话之函数作用域和匿名函数</title>
    <link href="http://yoursite.com/2018/12/14/2018-12-14-python-function/"/>
    <id>http://yoursite.com/2018/12/14/2018-12-14-python-function/</id>
    <published>2018-12-13T16:00:00.000Z</published>
    <updated>2018-12-19T14:27:24.313Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><h3 id="函数作用域和匿名函数"><a href="#函数作用域和匿名函数" class="headerlink" title="函数作用域和匿名函数"></a>函数作用域和匿名函数</h3><p>本节知识点：<code>匿名函数</code>、<code>闭包</code>、<code>函数作用域</code>、<code>递归函数</code>。</p><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>上节我们讲过的filter函数，可以过滤出列表中大于10的数据，但是使用都需要提前定义一个函数，有没有更加简便的方式呢？</p><p>我们先来复习下<code>filter</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: s = [<span class="number">3</span>, <span class="number">20</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: s</span><br><span class="line">Out[<span class="number">2</span>]: [<span class="number">3</span>, <span class="number">20</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">(x)</span>:</span></span><br><span class="line">   ...:     <span class="keyword">return</span> x&gt;<span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: filter(fun1, s)</span><br><span class="line">Out[<span class="number">4</span>]: &lt;filter at <span class="number">0x7f4a2038f080</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: list(filter(fun1, s))</span><br><span class="line">Out[<span class="number">5</span>]: [<span class="number">20</span>, <span class="number">6</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><blockquote><p>那如果有大量的操作是不是很麻烦，那有没有更简单的方法呢？</p></blockquote><h4 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: s</span><br><span class="line">Out[<span class="number">6</span>]: [<span class="number">3</span>, <span class="number">20</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: list(filter(<span class="keyword">lambda</span> x: x&gt;<span class="number">5</span>, s))</span><br><span class="line">Out[<span class="number">7</span>]: [<span class="number">20</span>, <span class="number">6</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><blockquote><p>Python中，lambda函数也叫匿名函数，及即没有具体名称的函数，它允许快速定义单行函数，类似于C语言的宏，可以用在任何需要函数的地方。这区别于def定义的函数。</p></blockquote><h4 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h4><blockquote><p>lambda 参数： 表达式</p></blockquote><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote><p>简单函数： 简单的函数，可以不用使用def定义一个函数，使用匿名函数。</p><p>函数调用：类似于<code>filter</code>、<code>map</code>等函数里面，可以使用匿名函数来处理</p><p>提高开发效率：匿名函数的合理使用能够代码更加简洁。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">98</span>, <span class="string">'a'</span>, <span class="number">5.2</span>]</span><br><span class="line">print(sorted(li, key=<span class="keyword">lambda</span> x: x <span class="keyword">if</span> isinstance(x, (int, float)) <span class="keyword">else</span> ord(str(x))))</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5.2</span>, <span class="number">6</span>, <span class="string">'a'</span>, <span class="number">98</span>]</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>lambda与def的区别：<br>1）def创建的方法是有名称的，而lambda没有。<br>2）lambda会返回一个函数对象，但这个对象不会赋给一个标识符，而def则会把函数对象赋值给一个变量（函数名）。<br>3）lambda只是一个表达式，而def则是一个语句。<br>4）lambda表达式” : “后面，只能有一个表达式，def则可以有多个。<br>5）像if（三元运算符可以）或for（列表推导式可以）或print等语句不能用于lambda中，def可以。<br>6）lambda一般用来定义简单的函数，而def可以定义复杂的函数。<br>6）lambda函数不能共享给别的程序调用，def可以。</p></blockquote><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>在函数里面也有可以定义变量，那函数里面的变量名如果和函数外面的变量名重名，会相互影响吗？</p><h4 id="外部不能访问函数内部变量"><a href="#外部不能访问函数内部变量" class="headerlink" title="外部不能访问函数内部变量"></a>外部不能访问函数内部变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">()</span>:</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">print(x) <span class="comment">#不能访问函数里面</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NameError: name <span class="string">'x'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><h4 id="函数内部能够访问函数外部变量"><a href="#函数内部能够访问函数外部变量" class="headerlink" title="函数内部能够访问函数外部变量"></a>函数内部能够访问函数外部变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">123</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">()</span>:</span></span><br><span class="line">print(x)</span><br><span class="line"><span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line">print(fun2())    <span class="comment">#函数里面可以使用全局变量</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">124</span></span><br></pre></td></tr></table></figure><h4 id="函数里面不能修改函数外部变量"><a href="#函数里面不能修改函数外部变量" class="headerlink" title="函数里面不能修改函数外部变量"></a>函数里面不能修改函数外部变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">123</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun3</span><span class="params">()</span>:</span></span><br><span class="line">x = x + <span class="number">1</span>   <span class="comment">#直接报错，可以访问但是不能修改 </span></span><br><span class="line">print(x)</span><br><span class="line"><span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line">print(fun3())</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnboundLocalError: local variable <span class="string">'x'</span> referenced before assignment</span><br></pre></td></tr></table></figure><h4 id="函数里面和函数外部变量名相同"><a href="#函数里面和函数外部变量名相同" class="headerlink" title="函数里面和函数外部变量名相同"></a>函数里面和函数外部变量名相同</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">123</span></span><br><span class="line">print(x, id(x))</span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">fun4</span><span class="params">()</span>:</span></span><br><span class="line">x = <span class="number">456</span></span><br><span class="line">print(x, id(x))</span><br><span class="line">x += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">print(fun4())</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span> <span class="number">1722514256</span></span><br><span class="line"><span class="number">456</span> <span class="number">1982594811888</span></span><br><span class="line"><span class="number">457</span></span><br></pre></td></tr></table></figure><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="global"><a href="#global" class="headerlink" title="global"></a><code>global</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">123</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun5</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">global</span> x   <span class="comment">#如果非要改变全局的变量</span></span><br><span class="line">x += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">print(fun5())</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">124</span></span><br></pre></td></tr></table></figure><blockquote><p>函数内部如果需要修改全局变量，就需要使用global修饰变量。</p></blockquote><h5 id="nonlocal"><a href="#nonlocal" class="headerlink" title="nonlocal"></a><code>nonlocal</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">fun6</span><span class="params">()</span>:</span></span><br><span class="line">x = <span class="number">123</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun7</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">nonlocal</span> x  <span class="comment">#python2没有，python3独有的</span></span><br><span class="line">x += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span>  x</span><br><span class="line"><span class="keyword">return</span> fun7()</span><br><span class="line"></span><br><span class="line">print(fun6())</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">124</span></span><br></pre></td></tr></table></figure><blockquote><p>在函数嵌套的情况下，同样也有函数作用域的问题，但是在Python3中提供了方便，只需要使用nonlocal就可以在里层函数内部修改外部函数的变量。</p></blockquote><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-13/95671711.jpg" alt="1"></p><blockquote><p>函数内部： 函数内部的变量，作业域只在函数内部，函数内部不可以直接更改函数外部的变量。</p><p>global：函数内部如果需要修改全局变量，就需要使用global修饰变量。</p><p>nonlocal: 在函数嵌套的情况下，同样也有函数作用域的问题，但是在Python3中提供了方便，只需要使用nonlocal就可以在里层函数内部修改外部函数的变量。</p></blockquote><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>函数里面可以再定义函数，那函数里面定义的函数可以在外面调用吗？</p><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">g = <span class="keyword">lambda</span> x: x&gt;<span class="number">10</span></span><br><span class="line">g</span><br><span class="line">Out[<span class="number">3</span>]: &lt;function __main__.&lt;<span class="keyword">lambda</span>&gt;(x)&gt;</span><br><span class="line">g(<span class="number">100</span>)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="keyword">True</span></span><br><span class="line">h = g</span><br><span class="line">h</span><br><span class="line">Out[<span class="number">6</span>]: &lt;function __main__.&lt;<span class="keyword">lambda</span>&gt;(x)&gt;</span><br><span class="line">h(<span class="number">111</span>)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p>在进行函数调用的时候需要加上<code>()</code>，才能进行使用。</p></blockquote><h4 id="内嵌函数"><a href="#内嵌函数" class="headerlink" title="内嵌函数"></a>内嵌函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun6</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">123</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun7</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> x</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span>  x</span><br><span class="line">    <span class="keyword">return</span> fun7</span><br><span class="line"></span><br><span class="line">f7=fun6()</span><br><span class="line">print(f7())</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">124</span></span><br></pre></td></tr></table></figure><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><blockquote><p>闭包是函数里面嵌套函数，外层函数返回里层函数，这种情况称之为闭包。</p><p>闭包是概念，不是某种函数类型，和递归的概念类似，就是种特殊的函数调用。</p><p>闭包可以得到外层函数的局部变量，是函数内部和函数外部沟通的桥梁。</p></blockquote><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>函数里面可以自身调用自身吗</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun8</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fun8(n - <span class="number">1</span>)* n</span><br><span class="line">print(fun8(<span class="number">8</span>))</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">40320</span></span><br></pre></td></tr></table></figure><blockquote><p>递归中可以函数自身调用自身，但是使用时类似于条件循环一样，要有递归的终止条件</p></blockquote><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><blockquote><p>使用递归时，常常可以让代码更加简洁</p><p>递归会占用比较多的内存，当递归次数比较多时，性能就会降低，因此不建议多使用递归</p></blockquote><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      python函数作用域和匿名函数
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://yoursite.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>HTML第十话内嵌框架</title>
    <link href="http://yoursite.com/2018/12/13/2018-09-25-html-iframe/"/>
    <id>http://yoursite.com/2018/12/13/2018-09-25-html-iframe/</id>
    <published>2018-12-12T16:00:00.000Z</published>
    <updated>2018-12-19T14:30:42.924Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><h3 id="html内嵌框架"><a href="#html内嵌框架" class="headerlink" title="html内嵌框架"></a>html内嵌框架</h3><p>\&lt;iframe>标签会创建包含另外一个html文件的内联框架（即行内框架），src属性来定义另一个html文件的引用地址，frameborder属性定义边框，scrolling属性定义是否有滚动条，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;http://www...&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h3 id="内嵌框架与a标签配合使用"><a href="#内嵌框架与a标签配合使用" class="headerlink" title="内嵌框架与a标签配合使用"></a>内嵌框架与a标签配合使用</h3><p>a标签的target属性可以将链接到的页面直接显示在当前页面的iframe中，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;01.html&quot; target=&quot;myframe&quot;&gt;页面一&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;02.html&quot; target=&quot;myframe&quot;&gt;页面二&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;03.html&quot; target=&quot;myframe&quot;&gt;页面三&lt;/a&gt;</span><br><span class="line">&lt;iframe src=&quot;01.html&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; name=&quot;myframe&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      html内嵌框架
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
      <category term="HTML基础" scheme="http://yoursite.com/tags/HTML%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>HTML第九话表单</title>
    <link href="http://yoursite.com/2018/12/13/2018-09-24-html-form/"/>
    <id>http://yoursite.com/2018/12/13/2018-09-24-html-form/</id>
    <published>2018-12-12T16:00:00.000Z</published>
    <updated>2018-12-19T14:30:35.473Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><h3 id="html表单"><a href="#html表单" class="headerlink" title="html表单"></a>html表单</h3><p>表单用于搜集不同类型的用户输入，表单由不同类型的标签组成，实现一个特定功能的表单区域（比如：注册），首先应该用</p><form>标签来定义表单区域整体，在此标签中再使用不同的表单控件来实现不同类型的信息输入，具体实现及注释可参照以下伪代码：</form><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- form定义一个表单区域,action属性定义表单数据提交的地址，</span><br><span class="line">method属性定义提交的方式。   --&gt;</span><br><span class="line">&lt;form action=&quot;http://www...&quot; method=&quot;get&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- label标签定义表单控件的文字标注，input类型为text定义了</span><br><span class="line">一个单行文本输入框  --&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;label&gt;姓名：&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- input类型为password定义了一个密码输入框  --&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;label&gt;密码：&lt;/label&gt;&lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- input类型为radio定义了单选框  --&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;label&gt;性别：&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;0&quot; /&gt; 男</span><br><span class="line">&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;1&quot; /&gt; 女</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- input类型为checkbox定义了单选框  --&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;label&gt;爱好：&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;like&quot; value=&quot;sing&quot; /&gt; 唱歌</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;like&quot; value=&quot;run&quot; /&gt; 跑步</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;like&quot; value=&quot;swiming&quot; /&gt; 游泳</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- input类型为file定义上传照片或文件等资源  --&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;label&gt;照片：&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;person_pic&quot;&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- textarea定义多行文本输入  --&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;label&gt;个人描述：&lt;/label&gt;</span><br><span class="line">&lt;textarea name=&quot;about&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- select定义下拉列表选择  --&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;label&gt;籍贯：&lt;/label&gt;</span><br><span class="line">&lt;select name=&quot;site&quot;&gt;</span><br><span class="line">    &lt;option value=&quot;0&quot;&gt;北京&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;1&quot;&gt;上海&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;2&quot;&gt;广州&lt;/option&gt;</span><br><span class="line">    &lt;option value=&quot;3&quot;&gt;深圳&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- input类型为submit定义提交按钮  </span><br><span class="line">     还可以用图片控件代替submit按钮提交，一般会导致提交两次，不建议使用。如：</span><br><span class="line">     &lt;input type=&quot;image&quot; src=&quot;xxx.gif&quot;&gt;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; name=&quot;&quot; value=&quot;提交&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- input类型为reset定义重置按钮  --&gt;</span><br><span class="line">&lt;input type=&quot;reset&quot; name=&quot;&quot; value=&quot;重置&quot;&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      html表单
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
      <category term="HTML基础" scheme="http://yoursite.com/tags/HTML%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>HTML第八话表格</title>
    <link href="http://yoursite.com/2018/12/13/2018-09-23-html-table/"/>
    <id>http://yoursite.com/2018/12/13/2018-09-23-html-table/</id>
    <published>2018-12-12T16:00:00.000Z</published>
    <updated>2018-12-19T14:30:27.465Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><h3 id="table常用标签"><a href="#table常用标签" class="headerlink" title="table常用标签"></a>table常用标签</h3><p>1、table标签：声明一个表格</p><p>2、tr标签：定义表格中的一行</p><p>3、td和th标签：定义一行中的一个单元格，td代表普通单元格，th表示表头单元格</p><h3 id="table常用属性："><a href="#table常用属性：" class="headerlink" title="table常用属性："></a>table常用属性：</h3><p>1、border 定义表格的边框</p><p>2、cellpadding 定义单元格内内容与边框的距离</p><p>3、cellspacing 定义单元格与单元格之间的距离</p><p>4、align 设置单元格中内容的水平对齐方式,设置值有：left | center | right</p><p>5、valign 设置单元格中内容的垂直对齐方式 top | middle | bottom</p><p>6、colspan 设置单元格水平合并</p><p>7、rowspan 设置单元格垂直合并</p><h3 id="传统布局："><a href="#传统布局：" class="headerlink" title="传统布局："></a>传统布局：</h3><p>传统的布局方式就是使用table来做整体页面的布局，布局的技巧归纳为如下几点：</p><p>1、定义表格宽高，将border、cellpadding、cellspacing全部设置为0</p><p>2、单元格里面嵌套表格</p><p>3、单元格中的元素和嵌套的表格用align和valign设置对齐方式</p><p>4、通过属性或者css样式设置单元格中元素的样式</p><h3 id="传统布局目前应用："><a href="#传统布局目前应用：" class="headerlink" title="传统布局目前应用："></a>传统布局目前应用：</h3><p>1、快速制作用于演示的html页面</p><p>2、商业推广EDM制作(广告邮件)</p><h3 id="表格常用样式属性"><a href="#表格常用样式属性" class="headerlink" title="表格常用样式属性"></a>表格常用样式属性</h3><p>border-collapse:collapse 设置边框合并，制作一像素宽的边线的表格</p><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      html表格
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
      <category term="HTML基础" scheme="http://yoursite.com/tags/HTML%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>HTML第七话列表</title>
    <link href="http://yoursite.com/2018/12/13/2018-09-22-html-list/"/>
    <id>http://yoursite.com/2018/12/13/2018-09-22-html-list/</id>
    <published>2018-12-12T16:00:00.000Z</published>
    <updated>2018-12-19T14:30:20.990Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>在网页上定义一个有编号的内容列表可以用<ol>、<li>配合使用来实现，代码如下：</li></ol></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表文字一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表文字二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表文字三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在网页上生成的列表，每条项目上会按1、2、3编号，有序列表在实际开发中较少使用。</p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>在网页上定义一个无编号的内容列表可以用<ul>、<li>配合使用来实现，代码如下：</li></ul></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表文字一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表文字二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表文字三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在网页上生成的列表，每条项目上会有一个小图标，这个小图标在不同浏览器上显示效果不同，所以一般会用样式去掉默认的小图标，如果需要图标，可以用样式自定义图标，从而达到在不同浏览器上显示的效果相同,实际开发中一般用这种列表。</p><h3 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h3><p>定义列表通常用于术语的定义。</p><dl>标签表示列表的整体。<dt>标签定义术语的题目。<dd>标签是术语的解释。一个<dl>中可以有多个题目和解释，代码如下：</dl></dd></dt></dl><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;前端三大块&lt;/h3&gt;</span><br><span class="line">&lt;dl&gt;</span><br><span class="line">    &lt;dt&gt;html&lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;负责页面的结构&lt;/dd&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dt&gt;css&lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;负责页面的表现&lt;/dd&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dt&gt;javascript&lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;负责页面的行为&lt;/dd&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      html列表
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
      <category term="HTML基础" scheme="http://yoursite.com/tags/HTML%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>HTML第六话链接</title>
    <link href="http://yoursite.com/2018/12/13/2018-09-21-html-URL/"/>
    <id>http://yoursite.com/2018/12/13/2018-09-21-html-URL/</id>
    <published>2018-12-12T16:00:00.000Z</published>
    <updated>2018-12-19T14:30:14.672Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><h3 id="html链接"><a href="#html链接" class="headerlink" title="html链接"></a>html链接</h3><p>\&lt;a>标签可以在网页上定义一个链接地址，通过src属性定义跳转的地址，通过title属性定义鼠标悬停时弹出的提示文字框。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;#&quot;&gt;&lt;/a&gt; &lt;!--  # 表示链接到页面顶部   --&gt;</span><br><span class="line">&lt;a href=&quot;http://www.sevenold.github.io/&quot; title=&quot;跳转的SEVEN网站&quot;&gt;seven&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;2.html&quot;&gt;测试页面2&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="定义页面内滚动跳转"><a href="#定义页面内滚动跳转" class="headerlink" title="定义页面内滚动跳转"></a>定义页面内滚动跳转</h3><p>页面内定义了“id”或者“name”的元素，可以通过a标签链接到它的页面滚动位置，前提是页面要足够高，有滚动条，且元素不能在页面顶部，否则页面不会滚动。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#mao1"</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"mao1"</span>&gt;</span>跳转到的标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      html链接
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
      <category term="HTML基础" scheme="http://yoursite.com/tags/HTML%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>HTML第五话图像、绝对路径和相对路径</title>
    <link href="http://yoursite.com/2018/12/13/2018-09-20-html-img/"/>
    <id>http://yoursite.com/2018/12/13/2018-09-20-html-img/</id>
    <published>2018-12-12T16:00:00.000Z</published>
    <updated>2018-12-19T14:30:08.265Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><h3 id="html图像"><a href="#html图像" class="headerlink" title="html图像"></a>html图像</h3><p><img>标签可以在网页上插入一张图片，它是独立使用的标签，通过“src”属性定义图片的地址，通过“alt”属性定义图片加载失败时显示的文字，以及对搜索引擎和盲人读屏软件的支持。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;images/pic.jpg&quot; alt=&quot;产品图片&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h3><p>像网页上插入图片这种外部文件，需要定义文件的引用地址，引用外部文件还包括引用外部样式表，javascript等等，引用地址分为绝对地址和相对地址。</p><ul><li>绝对地址：相对于磁盘的位置去定位文件的地址</li><li>相对地址：相对于引用文件本身去定位被引用的文件地址</li></ul><p>绝对地址在整体文件迁移时会因为磁盘和顶层目录的改变而找不到文件，相对路径就没有这个问题。相对路径的定义技巧：</p><ul><li>“ ./ ” 表示当前文件所在目录下，比如：“./pic.jpg” 表示当前目录下的pic.jpg的图片，这个使用时可以省略。</li><li>“ ../ ” 表示当前文件所在目录下的上一级目录，比如：“../images/pic.jpg” 表示当前目录下的上一级目录下的images文件夹中的pic.jpg的图片。</li></ul><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      html图像、绝对路径和相对路径
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
      <category term="HTML基础" scheme="http://yoursite.com/tags/HTML%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>HTML第四话块、含样式的标签</title>
    <link href="http://yoursite.com/2018/12/13/2018-09-19-html-div/"/>
    <id>http://yoursite.com/2018/12/13/2018-09-19-html-div/</id>
    <published>2018-12-12T16:00:00.000Z</published>
    <updated>2018-12-19T14:30:01.384Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><h3 id="html块"><a href="#html块" class="headerlink" title="html块"></a>html块</h3><p>1、div标签 块元素，表示一块内容，没有具体的语义。<br>2、span标签 行内元素，表示一行中的一小段内容，没有具体的语义。</p><h3 id="含样式和语义的标签"><a href="#含样式和语义的标签" class="headerlink" title="含样式和语义的标签"></a>含样式和语义的标签</h3><p>1、em标签 行内元素，表示语气中的强调词<br>2、i标签 行内元素，原本没有语义，w3c强加了语义，表示专业词汇<br>3、b标签 行内元素，原本没有语义，w3c强加了语义，表示文档中的关键字或者产品名<br>4、strong标签 行内元素，表示非常重要的内容</p><h3 id="语义化的标签"><a href="#语义化的标签" class="headerlink" title="语义化的标签"></a>语义化的标签</h3><p>语义化的标签，就是在布局的时候多使用语义化的标签，搜索引擎在爬网的时候能认识这些标签，理解文档的结构，方便网站的收录。比如：h1标签是表示标题，p标签是表示段落，ul、li标签是表示列表，a标签表示链接，dl、dt、dd表示定义列表等，语义化的标签不多。</p><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      html块、含样式的标签
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
      <category term="HTML基础" scheme="http://yoursite.com/tags/HTML%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>HTML第三话段落、换行与字符实体</title>
    <link href="http://yoursite.com/2018/12/13/2018-09-18-html-br/"/>
    <id>http://yoursite.com/2018/12/13/2018-09-18-html-br/</id>
    <published>2018-12-12T16:00:00.000Z</published>
    <updated>2018-12-19T14:29:53.530Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><h3 id="html段落"><a href="#html段落" class="headerlink" title="html段落"></a>html段落</h3><p>\&lt;p>标签定义一个文本段落，一个段落含有默认的上下间距，段落之间会用这种默认间距隔开，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML是 HyperText Mark-up Language 的首字母简写，意思是超文本标记语言，超</span><br><span class="line">    文本指的是超链接，标记指的是标签，是一种用来制作网页的语言，这种语言由一个个的</span><br><span class="line">    标签组成，用这种语言制作的文件保存的是一个文本文件，文件的扩展名为html或者htm。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用文本的方</span><br><span class="line">    式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件渲染成网页，显示的网</span><br><span class="line">    页可以从一个网页链接跳转到另外一个网页。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="html换行"><a href="#html换行" class="headerlink" title="html换行"></a>html换行</h3><p>代码中成段的文字，直接在代码中回车换行，在渲染成网页时候不认这种换行，如果真想换行，可以在代码的段落中插入<br>来强制换行，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="html字符实体"><a href="#html字符实体" class="headerlink" title="html字符实体"></a>html字符实体</h3><p>代码中成段的文字，如果文字间想空多个空格，在代码中空多个空格，在渲染成网页时只会显示一个空格，如果想显示多个空格，可以使用空格的字符实体,代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  在段落前想缩进两个文字的空格，使用空格的字符实体：&amp;nbsp;   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">&amp;nbsp;&amp;nbsp;一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在网页上显示 “&lt;” 和 “&gt;” 会误认为是标签，想在网页上显示“&lt;”和“&gt;”可以使用它们的字符实体，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- “&lt;” 和 “&gt;” 的字符实体为 &amp;lt; 和 &amp;gt;  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    3 &amp;lt; 5 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    10 &amp;gt; 5</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      html段落、换行与字符实体
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
      <category term="HTML基础" scheme="http://yoursite.com/tags/HTML%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>HTML第一话概述和基本框架</title>
    <link href="http://yoursite.com/2018/12/13/2018-09-16-html-readme/"/>
    <id>http://yoursite.com/2018/12/13/2018-09-16-html-readme/</id>
    <published>2018-12-12T16:00:00.000Z</published>
    <updated>2018-12-19T14:29:38.868Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><h3 id="html概述"><a href="#html概述" class="headerlink" title="html概述"></a>html概述</h3><p>HTML是 HyperText Mark-up Language 的首字母简写，意思是超文本标记语言，超文本指的是超链接，标记指的是标签，是一种用来制作网页的语言，这种语言由一个个的标签组成，用这种语言制作的文件保存的是一个文本文件，文件的扩展名为html或者htm，一个html文件就是一个网页，html文件用编辑器打开显示的是文本，可以用文本的方式编辑它，如果用浏览器打开，浏览器会按照标签描述内容将文件渲染成网页，显示的网页可以从一个网页链接跳转到另外一个网页。</p><h3 id="html基本结构"><a href="#html基本结构" class="headerlink" title="html基本结构"></a>html基本结构</h3><p>一个html的基本结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;            </span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;网页标题&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">          网页显示内容</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>第一行是文档声明，第二行“</p><html>”标签和最后一行“</html>”定义html文档的整体，“<html>”标签中的‘lang=“en”’定义网页的语言为英文，定义成中文是’lang=”zh-CN”‘,不定义也没什么影响，它一般作为分析统计用。 “<head><meta name="generator" content="Hexo 3.8.0">”标签和“</head><body>”标签是它的第一层子元素，“<head><meta name="generator" content="Hexo 3.8.0">”标签里面负责对网页进行一些设置以及定义标题，设置包括定义网页的编码格式，外链css样式文件和javascript文件等，设置的内容不会显示在网页上，标题的内容会显示在标题栏，“</head><body>”内编写网页上显示的内容。</body></body></html><p></p><h3 id="HTML文档类型"><a href="#HTML文档类型" class="headerlink" title="HTML文档类型"></a>HTML文档类型</h3><p>目前常用的两种文档类型是xhtml 1.0和html5</p><h5 id="xhtml-1-0"><a href="#xhtml-1-0" class="headerlink" title="xhtml 1.0"></a>xhtml 1.0</h5><p>xhtml 1.0 是html5之前的一个常用的版本，目前许多网站仍然使用此版本。<br>此版本文档用sublime text创建方法： html:xt + tab<br>文档示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xml:lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> xhtml 1.0 文档类型 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="html5"><a href="#html5" class="headerlink" title="html5"></a>html5</h5><p>pc端可以使用xhtml 1.0，也可以使用html5，html5是向下兼容的<br>此版本文档用sublime text创建方法： html:5 + tab 或者 ! + tab<br>文档示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt; html5文档类型 &lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="两种文档的区别"><a href="#两种文档的区别" class="headerlink" title="两种文档的区别"></a>两种文档的区别</h3><p>1、文档声明和编码声明</p><p>2、html5新增了标签元素以及元素属性</p><h3 id="html文档规范"><a href="#html文档规范" class="headerlink" title="html文档规范"></a>html文档规范</h3><p>xhtml制定了文档的编写规范，html5可部分遵守，也可全部遵守，看开发要求。</p><p>1、所有的标签必须小写</p><p>2、所有的属性必须用双引号括起来</p><p>3、所有标签必须闭合</p><p>4、img必须要加alt属性(对图片的描述)</p><h3 id="html注释："><a href="#html注释：" class="headerlink" title="html注释："></a>html注释：</h3><p>html文档代码中可以插入注释，注释是对代码的说明和解释，注释的内容不会显示在页面上，html代码中插入注释的方法是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是一段注释  --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="html标签特点："><a href="#html标签特点：" class="headerlink" title="html标签特点："></a>html标签特点：</h3><p>html的标签大部分是成对出现的,少量是单个出现的，特定标签之间可以相互嵌套，嵌套就是指一个标签里面可以包含一个或多个其他的标签，包含的标签和父标签可以是同类型的，也可以是不同类型的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 成对出现的标签  --&gt;</span><br><span class="line">&lt;body&gt;......&lt;/body&gt;</span><br><span class="line">&lt;p&gt;......&lt;/p&gt;</span><br><span class="line">&lt;div&gt;......&lt;/div&gt;</span><br><span class="line">&lt;b&gt;......&lt;/b&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 单个出现的标签  --&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;img src=&quot;...&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;...&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 标签之间的嵌套  --&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;span&gt;...&lt;/span&gt;</span><br><span class="line">    &lt;a href=&quot;...&quot;&gt;...&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">      &lt;h3&gt;...&lt;/h3&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">              &lt;span&gt;...&lt;/span&gt;</span><br><span class="line">              &lt;p&gt;...&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      html概述和基本结构
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
      <category term="HTML基础" scheme="http://yoursite.com/tags/HTML%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>HTML第二话标题</title>
    <link href="http://yoursite.com/2018/12/13/2018-09-17-html-title/"/>
    <id>http://yoursite.com/2018/12/13/2018-09-17-html-title/</id>
    <published>2018-12-12T16:00:00.000Z</published>
    <updated>2018-12-19T14:29:45.832Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><h3 id="html标题"><a href="#html标题" class="headerlink" title="html标题"></a>html标题</h3><p>通过</p><h1>、<h2>、<h3>、<h4>、<h5>、<h6>,标签可以在网页上定义6种级别的标题。6种级别的标题表示文档的6级目录层级关系，比如说：<h1>用作主标题（最重要的），其后是<h2>（次重要的），再其次是<h3>，以此类推。搜索引擎会使用标题将网页的结构和内容编制索引，所以网页上使用标题是很重要的。<p></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p></h3></h2></h1></h6></h5></h4></h3></h2></h1><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      html标题
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
      <category term="HTML基础" scheme="http://yoursite.com/tags/HTML%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python第六话之函数基础和函数参数</title>
    <link href="http://yoursite.com/2018/12/12/2018-12-13-python-main/"/>
    <id>http://yoursite.com/2018/12/12/2018-12-13-python-main/</id>
    <published>2018-12-11T16:00:00.000Z</published>
    <updated>2018-12-12T08:56:20.674Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><p>[TOC]</p><h3 id="函数基础和函数参数"><a href="#函数基础和函数参数" class="headerlink" title="函数基础和函数参数"></a>函数基础和函数参数</h3><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。</p><p>函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如print()。但你也可以自己创建函数，这被叫做用户自定义函数。</p><h3 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h3><h4 id="定义一个函数"><a href="#定义一个函数" class="headerlink" title="定义一个函数"></a>定义一个函数</h4><blockquote><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p><ul><li>函数代码块以 <strong>def</strong> 关键词开头，后接函数标识符名称和圆括号 <strong>()</strong>。</li><li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号起始，并且缩进。</li><li><strong>return [表达式]</strong> 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li></ul></blockquote><p><strong>演示</strong>：</p><blockquote><p>我们上节课实现了打印列表，如果我们打印几个列表呢？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'---------'</span>)</span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>, <span class="string">'A'</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'---------'</span>)</span><br><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="string">'s'</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">---------</span><br><span class="line"><span class="number">1</span></span><br><span class="line">A</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">---------</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">s</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><blockquote><p>以我们上节所讲的知识点，如果要打印三个列表的话，就是上述这种方法，那还有没有更简单的呢？</p></blockquote><p><strong>演示</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">l1 = [1, 0, 5, 7, 9]</span><br><span class="line">l2 = [1, &apos;A&apos;, 5, 7, 9]</span><br><span class="line">l3 = [1, 0, &apos;S&apos;, 7, 9]</span><br><span class="line"></span><br><span class="line">def demo(li):</span><br><span class="line">for i in li:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line">demo(l1)</span><br><span class="line">print(&apos;---------&apos;)</span><br><span class="line">demo(l2)</span><br><span class="line">print(&apos;---------&apos;)</span><br><span class="line">demo(l3)</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">---------</span><br><span class="line"><span class="number">1</span></span><br><span class="line">A</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">---------</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">S</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><blockquote><p>上述就是使用函数的形式来实现多个列表的打印，是不是比前面的更简单。</p></blockquote><h4 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h4><blockquote><p>def 函数名(参数)：</p><p>​ pass</p><p>​ return 表达式</p><p>函数名命名规则： 字母、数字和下划线组成，和变量命名规则一致</p><p>return 后面可以返回任意表达式，但不能是赋值语句</p><p>注意：函数名定义和变量名的定义是一样的，只能使用字母、数字和下划线定义，不能以数字开头。</p></blockquote><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><blockquote><p>关键字是不能拿来做变量定义的。</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: a</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-3</span><span class="number">-3</span>f786850e387&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 a</span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">'a'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="function"><span class="keyword">def</span></span></span><br><span class="line">  File "&lt;ipython-input-4-7b18d017f89f&gt;", line 1</span><br><span class="line">    <span class="function"><span class="keyword">def</span></span></span><br><span class="line"><span class="function">       ^</span></span><br><span class="line"><span class="function"><span class="title">SyntaxError</span>:</span> invalid syntax</span><br></pre></td></tr></table></figure><blockquote><p>如果把关键字拿来定义，是会报语法错误的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> keyword</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: print(keyword.kwlist)</span><br><span class="line">[<span class="string">'False'</span>, <span class="string">'None'</span>, <span class="string">'True'</span>, <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'nonlocal'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>上述就是整个Python编程语言的全部关键字，在基础阶段都会提到的。</p></blockquote><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">0</span>, <span class="string">'S'</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(li)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">        print(i)</span><br><span class="line"></span><br><span class="line">demo(l1)</span><br></pre></td></tr></table></figure><blockquote><p>调用方式：函数名（参数）</p></blockquote><h4 id="函数返回"><a href="#函数返回" class="headerlink" title="函数返回"></a>函数返回</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">0</span>, <span class="string">'S'</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(li)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">        print(i)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></span><br><span class="line"></span><br><span class="line">print(demo(l1))</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">S</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">ok</span><br></pre></td></tr></table></figure><blockquote><p>return：</p><p>注意 return 和 print 的区别，return是函数的返回值，返回值可以赋值给变量，而print只是打印出来</p></blockquote><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><blockquote><p>刚才讲到了函数的定义，那函数里面可以传入哪些对象呢？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">demo(<span class="string">'demo'</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">demo</span><br></pre></td></tr></table></figure><blockquote><p>如果我们不传值呢？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">demo()</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: demo() missing <span class="number">1</span> required positional argument: <span class="string">'x'</span></span><br></pre></td></tr></table></figure><blockquote><p>TypeError：demo()缺少一个必需的位置参数：’x’。</p></blockquote><blockquote><p>传入几个参数呢？</p></blockquote><h4 id="必备参数"><a href="#必备参数" class="headerlink" title="必备参数"></a>必备参数</h4><blockquote><p>def func(x):</p><p>pass</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: demo() takes <span class="number">1</span> positional argument but <span class="number">2</span> were given</span><br></pre></td></tr></table></figure><blockquote><p>一个参数对应一个数值</p></blockquote><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><blockquote><p>def func(x, y=None):</p><p>pass</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(x, y=<span class="number">1</span>)</span>:</span></span><br><span class="line">    print(x, y)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">demo(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>y=1.就是默认参数，没有传入新参数的时候，就使用默认参数。</p></blockquote><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(x, y=<span class="number">1</span>)</span>:</span></span><br><span class="line">    print(x, y)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">demo(y=<span class="string">"q"</span>, x=<span class="string">'s'</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">s q</span><br></pre></td></tr></table></figure><blockquote><p>关键字参数，调用的时候带上参数名。</p></blockquote><h4 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h4><blockquote><p>def func(*args, **kwargs):</p><p>pass</p><p>注意：*+参数名</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(args)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">demo(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">1</span>,)</span><br></pre></td></tr></table></figure><blockquote><p>参数名前面加<code>*号</code>是不定长参数，输出是一个元组。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(*a)</span>:</span></span><br><span class="line">    print(*a)  <span class="comment"># 加*：去除括号</span></span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">print(<span class="string">'-------'</span>)</span><br><span class="line">demo((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">print(<span class="string">'-------'</span>)</span><br><span class="line">demo(*(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">-------</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>),)</span><br><span class="line">-------</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><blockquote><p>加*：去除括号</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(**a)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">demo(x=<span class="number">1</span>, y=<span class="number">2</span>, s=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'s'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参数名前面加<code>**号</code>是不定长参数，输出是一个字典。</p><p>注意：传入的参数是键值对。</p></blockquote><h4 id="演示："><a href="#演示：" class="headerlink" title="演示："></a><strong>演示：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, x=<span class="number">1</span>, y=<span class="number">2</span>, s=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'s'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>传入的键值对，只能放在最后。</p></blockquote><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><blockquote><p>必备参数：在函数调用的时候，必备参数必须要传入</p><p>默认参数： 在函数调用的时候，默认参数可以不传入值，不传入值时，会使用默认参数</p><p>不定长参数：在函数调用的时候，不定长参数可以不传入，也可以传入任意长度。其中定义时，元组形式可以放到参数最前面，字典形式只能放到最后面</p></blockquote><h3 id="常见的内置函数"><a href="#常见的内置函数" class="headerlink" title="常见的内置函数"></a>常见的内置函数</h3><p>常见内置函数提供了一些处理的数据的方法，可以帮助我们提高开发速度</p><h4 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h4><h5 id="len"><a href="#len" class="headerlink" title="len"></a><code>len</code></h5><blockquote><p>求长度</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>]</span><br><span class="line">In [<span class="number">6</span>]: len(li)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure><h5 id="min"><a href="#min" class="headerlink" title="min"></a><code>min</code></h5><blockquote><p>求最小值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>]</span><br><span class="line">In [<span class="number">6</span>]: len(li)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure><h5 id="max"><a href="#max" class="headerlink" title="max"></a><code>max</code></h5><blockquote><p>求最大值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>]</span><br><span class="line">In [<span class="number">8</span>]: max(li)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="number">8</span></span><br></pre></td></tr></table></figure><h5 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a><code>sorted</code></h5><blockquote><p>排序</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>]</span><br><span class="line">In [<span class="number">9</span>]: sorted(li)</span><br><span class="line">Out[<span class="number">9</span>]: [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><h5 id="reversed"><a href="#reversed" class="headerlink" title="reversed"></a><code>reversed</code></h5><blockquote><p>反向</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>]</span><br><span class="line">In [<span class="number">10</span>]: reversed(li)</span><br><span class="line">Out[<span class="number">10</span>]: &lt;list_reverseiterator at <span class="number">0x7f68aa81af98</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: list(reversed(li))</span><br><span class="line">Out[<span class="number">11</span>]: [<span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><h5 id="sum"><a href="#sum" class="headerlink" title="sum"></a><code>sum</code></h5><blockquote><p>求和</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>]</span><br><span class="line">In [<span class="number">12</span>]: sum(li)</span><br><span class="line">Out[<span class="number">12</span>]: <span class="number">15</span></span><br></pre></td></tr></table></figure><h4 id="进制转换函数"><a href="#进制转换函数" class="headerlink" title="进制转换函数"></a>进制转换函数</h4><h5 id="bin"><a href="#bin" class="headerlink" title="bin"></a><code>bin</code></h5><blockquote><p>二进制</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">13</span>]: bin(<span class="number">12</span>)</span><br><span class="line">Out[<span class="number">13</span>]: <span class="string">'0b1100'</span></span><br></pre></td></tr></table></figure><h5 id="oct"><a href="#oct" class="headerlink" title="oct"></a><code>oct</code></h5><blockquote><p>八进制</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: oct(<span class="number">18</span>)</span><br><span class="line">Out[<span class="number">16</span>]: <span class="string">'0o22</span></span><br></pre></td></tr></table></figure><h5 id="hex"><a href="#hex" class="headerlink" title="hex"></a><code>hex</code></h5><blockquote><p>十六进制</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">17</span>]: hex(<span class="number">12</span>)</span><br><span class="line">Out[<span class="number">17</span>]: <span class="string">'0xc'</span></span><br></pre></td></tr></table></figure><h5 id="ord"><a href="#ord" class="headerlink" title="ord"></a><code>ord</code></h5><blockquote><p>字符转ASCII码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">19</span>]: ord(<span class="string">'a'</span>)</span><br><span class="line">Out[<span class="number">19</span>]: <span class="number">97</span></span><br></pre></td></tr></table></figure><h5 id="chr"><a href="#chr" class="headerlink" title="chr"></a><code>chr</code></h5><blockquote><p>ASCII码转字符</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: chr(<span class="number">97</span>)</span><br><span class="line">Out[<span class="number">20</span>]: <span class="string">'a'</span></span><br></pre></td></tr></table></figure><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a><code>enumerate</code></h5><blockquote><p>返回一个可以枚举的对象</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">21</span>]: li = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: enumerate(li)</span><br><span class="line">Out[<span class="number">22</span>]: &lt;enumerate at <span class="number">0x7f68aa877d80</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: list(enumerate(li))</span><br><span class="line">Out[<span class="number">23</span>]: [(<span class="number">0</span>, <span class="string">'a'</span>), (<span class="number">1</span>, <span class="string">'b'</span>), (<span class="number">2</span>, <span class="string">'c'</span>), (<span class="number">3</span>, <span class="string">'d'</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: dict(enumerate(li))</span><br><span class="line">Out[<span class="number">24</span>]: &#123;<span class="number">0</span>: <span class="string">'a'</span>, <span class="number">1</span>: <span class="string">'b'</span>, <span class="number">2</span>: <span class="string">'c'</span>, <span class="number">3</span>: <span class="string">'d'</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="eval"><a href="#eval" class="headerlink" title="eval"></a><code>eval</code></h5><blockquote><p>取出字符串中内容</p><p>将字符串str当成有效的表达式来求值并返回计算结果</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">25</span>]: a = <span class="string">"&#123;'a':1&#125;"</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: eval(a)</span><br><span class="line">Out[<span class="number">26</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: b = <span class="string">'1 + 2 + 3'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: eval(b)</span><br><span class="line">Out[<span class="number">28</span>]: <span class="number">6</span></span><br></pre></td></tr></table></figure><h5 id="exec"><a href="#exec" class="headerlink" title="exec"></a><code>exec</code></h5><blockquote><p>执行字符串或complie方法编译过的字符串，没有返回值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: s = <span class="string">'''</span></span><br><span class="line"><span class="string">    ...: z = 10</span></span><br><span class="line"><span class="string">    ...: su = x + y + z</span></span><br><span class="line"><span class="string">    ...: print(su)</span></span><br><span class="line"><span class="string">    ...: print('OK')</span></span><br><span class="line"><span class="string">    ...: '''</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: exec(s)</span><br><span class="line"><span class="number">13</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: exec(s,&#123;<span class="string">'x'</span>:<span class="number">0</span>,<span class="string">'y'</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="number">10</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: exec(s,&#123;<span class="string">'x'</span>:<span class="number">0</span>,<span class="string">'y'</span>:<span class="number">0</span>&#125;,&#123;<span class="string">'y'</span>:<span class="number">10</span>,<span class="string">'z'</span>:<span class="number">0</span>&#125;)  <span class="comment">#以字符串为主,以最后的为主</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><blockquote><p>注意：eval 和 exec 是炸弹 能不能就不用，就好像你从不知道这东西一样，除非你足够的熟悉</p></blockquote><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a><code>filter</code></h5><blockquote><p>过滤器</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">38</span>]: <span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(x)</span>:</span></span><br><span class="line">    ...:     <span class="keyword">return</span> x&gt;<span class="number">10</span></span><br><span class="line">    ...: l1 = [<span class="number">10</span>,<span class="number">2</span>,<span class="number">20</span>,<span class="number">13</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: filter(test1, l1)</span><br><span class="line">Out[<span class="number">39</span>]: &lt;filter at <span class="number">0x7f68aa7ecb70</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: list(filter(test1, l1))</span><br><span class="line">Out[<span class="number">40</span>]: [<span class="number">20</span>, <span class="number">13</span>]</span><br></pre></td></tr></table></figure><h5 id="map"><a href="#map" class="headerlink" title="map"></a><code>map</code></h5><blockquote><p>对于参数iterable中的每个元素都应用fuction函数，并将结果作为列表返回</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">41</span>]: l2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">42</span>]: map(str,l2)</span><br><span class="line">Out[<span class="number">42</span>]: &lt;map at <span class="number">0x7f68aa7ecba8</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: list(map(str,l2))</span><br><span class="line">Out[<span class="number">43</span>]: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br></pre></td></tr></table></figure><h5 id="zip"><a href="#zip" class="headerlink" title="zip"></a><code>zip</code></h5><blockquote><p>将对象逐一配对</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">44</span>]: l3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: t1 = (<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: zip(t1,l3)</span><br><span class="line">Out[<span class="number">46</span>]: &lt;zip at <span class="number">0x7f68abb3ec48</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: list(zip(t1,l3))</span><br><span class="line">Out[<span class="number">47</span>]: [(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'c'</span>, <span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: dict(zip(t1,l3))</span><br><span class="line">Out[<span class="number">48</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      python函数基础和函数参数
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://yoursite.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python第五话之控制流程</title>
    <link href="http://yoursite.com/2018/12/12/2018-12-12-python-if-while/"/>
    <id>http://yoursite.com/2018/12/12/2018-12-12-python-if-while/</id>
    <published>2018-12-11T16:00:00.000Z</published>
    <updated>2018-12-11T14:26:20.937Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><p>[TOC]</p><h3 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h3><p>逻辑值包含了两个值：<br><code>True</code>：表示非空的量(比如：string,tuple.list.set,dictonary等) ，所有非零数 。<br><code>False</code>：表示0,None,空的量等<br><code>作用</code>：主要用于判断语句中，用来判断</p><ul><li>一个字符串是否为空</li><li>一个运算结果是否为零</li><li>一个表达式是否可用</li></ul><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p>条件语句是根据条件来设置程序接下来的走向。</p><p>条件语句的关键字有<code>if，elif，else</code>。</p><h4 id="基本形式："><a href="#基本形式：" class="headerlink" title="基本形式："></a>基本形式：</h4><blockquote><p>if 判断条件:</p><p>执行语句</p><p>else:</p><p>执行语句</p></blockquote><p>判断条件后面和else这个关键字后面都必须加冒号，冒号后面缩进的语句是子语句，多个子语句组成了语句块，如果是单个语句可以与条件写在同一行直接跟在冒号的后面，如果是语句块则一行一条语句，每一行都必须缩进。注意冒号和缩进都是语法的一部分，缩进一般为四个空格。</p><h4 id="单个条件"><a href="#单个条件" class="headerlink" title="单个条件"></a>单个条件</h4><p>这个是针对只有一个判断条件时的，条件满足时就执行缩进的子语句，else就是表示其余的情况，只要条件不满足则执行else后面子语句。判断语句一般是返回值为bool类型的表达式，值为True则是条件满足，值为False则是条件不满足。</p><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a><strong>演示</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'天晴'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> a==<span class="string">'天晴'</span>:</span><br><span class="line">print(<span class="string">'天气好，出去玩吧！'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'天气不好，呆在家吧。。'</span>)</span><br><span class="line"></span><br><span class="line">天气好，出去玩吧！</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'下雨'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> a==<span class="string">'天晴'</span>:</span><br><span class="line">print(<span class="string">'天气好，出去玩吧！'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'天气不好，呆在家吧。。'</span>)</span><br><span class="line"></span><br><span class="line">天气不好，呆在家吧。。</span><br></pre></td></tr></table></figure><h4 id="多个条件"><a href="#多个条件" class="headerlink" title="多个条件"></a>多个条件</h4><p>如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and （与）时，表示只有两个条件同时成立的情况下，判断条件才成功。</p><h4 id="演示："><a href="#演示：" class="headerlink" title="演示："></a>演示：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"天晴"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="string">"有空"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> a==<span class="string">"天晴"</span> <span class="keyword">and</span> t==<span class="string">"有空"</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"天气真好，咱们出去玩！！"</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"天气不好，呆在家吧！！"</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">天气真好，咱们出去玩！！</span><br></pre></td></tr></table></figure><p>对于多条件分支的判断使用elif关键字来用来条件分支的.</p><h4 id="基本形式"><a href="#基本形式" class="headerlink" title="基本形式"></a>基本形式</h4><blockquote><p>if 判断条件1:</p><p>执行语句1</p><p>elif 判断条件2:</p><p>执行语句2</p><p>elif 判断条件n:</p><p>执行语句n</p><p>else:</p><p>执行语句x</p></blockquote><p>写多条件分支时，同一个条件中只能有一个if一个else，对elif的个数没有限制但必须是写在if后面，else放在最后表示以上条件都不满足的情况。满足哪个判断条件就执行这个判断条件对应的执行语句，如果列出的条件都不满足则执行else的子语句，语句的执行顺序是从上到下，遇到满足的条件则直接进入它的子语句块，其他剩余判断条件和子语句将不再进行判断和执行。</p><h4 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'分数等级测试'</span>)</span><br><span class="line">score = input(<span class="string">'请输入你的分数'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">90</span>&lt;=int(score)&lt;=<span class="number">100</span>:</span><br><span class="line">    print(<span class="string">'你的等级是A'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">75</span>&lt;=int(score)&lt;<span class="number">90</span>:</span><br><span class="line">    print(<span class="string">'你的等级是B'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">60</span>&lt;=int(score)&lt;<span class="number">75</span>:</span><br><span class="line">    print(<span class="string">'你的等级是C'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">0</span>&lt;=int(score)&lt;<span class="number">60</span>:</span><br><span class="line">    print(<span class="string">'你的等级是D'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'输入有误!'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">运行结果（python shell中显示）：</span><br><span class="line">分数等级测试</span><br><span class="line">请输入你的分数<span class="number">98</span></span><br><span class="line">你的等级是A</span><br></pre></td></tr></table></figure><p>这里使用了内置的函数input()获取键盘的输入，这里会把键盘的输入以字符串的形式赋值给score这个名字，同类型的才可以进行比较，所以后面在进行条件判断时要把score转换成int类型再进行比较。</p><h3 id="三目运算"><a href="#三目运算" class="headerlink" title="三目运算"></a>三目运算</h3><h4 id="演示：-1"><a href="#演示：-1" class="headerlink" title="演示："></a>演示：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">3</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> a&gt;<span class="number">5</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>更简单的写法呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="keyword">True</span>) <span class="keyword">if</span> a&gt;<span class="number">5</span> <span class="keyword">else</span> print(<span class="keyword">False</span>) </span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>####</p><h3 id="条件循环"><a href="#条件循环" class="headerlink" title="条件循环"></a>条件循环</h3><h4 id="while"><a href="#while" class="headerlink" title="while"></a><code>while</code></h4><blockquote><p>语法规则：</p><p>while 判断语句：</p><p>​ 循环体</p><p>注意：注意缩进</p></blockquote><h4 id="演示：-2"><a href="#演示：-2" class="headerlink" title="演示："></a>演示：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> i &lt; len(li):</span><br><span class="line"><span class="meta">... </span>    print(<span class="keyword">True</span>) <span class="keyword">if</span> li[i]&gt;<span class="number">5</span> <span class="keyword">else</span> print(<span class="keyword">False</span>) </span><br><span class="line"><span class="meta">... </span>    i += <span class="number">1</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>对于刚才值大于5的三目运算，如果是判断一个列表中数字该怎么做呢？</p><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><blockquote><p>跳出循环</p></blockquote><p><strong>演示</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(li):</span><br><span class="line"><span class="keyword">if</span> li[i] &gt; <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">print(li[i])</span><br><span class="line">i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><blockquote><p>跳过此次循环</p></blockquote><p><strong>演示</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(li):</span><br><span class="line">    print(li[i])</span><br><span class="line"><span class="keyword">if</span> li[i] == <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>大家猜测下执行结果。。。。。</p><p>解决上面的问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">i = <span class="number">-1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(li)<span class="number">-1</span>:</span><br><span class="line">    print(li[i])</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> li[i] == <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h4 id="else"><a href="#else" class="headerlink" title="else"></a>else</h4><blockquote><p>当while的条件不满足时，运行。</p><p>注意：break时，不运行</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">i = <span class="number">-1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(li)<span class="number">-1</span>:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> li[i] == <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">print(li[i])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">ok</span><br></pre></td></tr></table></figure><p><strong>演示</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">i = <span class="number">-1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(li)<span class="number">-1</span>:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> li[i] == <span class="number">5</span>:</span><br><span class="line">        <span class="comment"># continue</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">print(li[i])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote><p>循环可以被终止：</p><ul><li>判断语句可以返回 False</li><li>通过break终止循环</li></ul><p>else的执行条件：</p><p>只有在循环不是被break终止的情况下才会执行else中的内容</p></blockquote><h3 id="迭代循环"><a href="#迭代循环" class="headerlink" title="迭代循环"></a>迭代循环</h3><h4 id="for"><a href="#for" class="headerlink" title="for"></a><strong>for</strong></h4><blockquote><p>只要是可迭代对象，都可以使用for循环遍历。</p></blockquote><h4 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h4><blockquote><p>for i in obj：</p><p>​ 循环体</p><p>注意：注意缩进</p></blockquote><p><strong>演示</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h4 id="range"><a href="#range" class="headerlink" title="range"></a><strong>range</strong></h4><p><strong>演示</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure><blockquote><p>内置函数，表示一个范围，不包含结尾值。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: list(range(<span class="number">21</span>))</span><br><span class="line">Out[<span class="number">3</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>]</span><br><span class="line">    </span><br><span class="line">In [<span class="number">4</span>]: list(range(<span class="number">2</span>, <span class="number">21</span>))</span><br><span class="line">Out[<span class="number">4</span>]: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: list(range(<span class="number">1</span>, <span class="number">21</span>, <span class="number">2</span>))</span><br><span class="line">Out[<span class="number">5</span>]: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure><h4 id="continue-1"><a href="#continue-1" class="headerlink" title="continue"></a><strong>continue</strong></h4><blockquote><p>跳出当前循环</p></blockquote><p><strong>演示</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure><h4 id="break-1"><a href="#break-1" class="headerlink" title="break"></a>break</h4><blockquote><p>跳出循环</p></blockquote><p><strong>演示</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="else-1"><a href="#else-1" class="headerlink" title="else"></a><strong>else</strong></h4><blockquote><p>当for循环结束时，运行。</p><p>注意：break时，不运行</p></blockquote><p><strong>演示</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">print(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'end...'</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line">end...</span><br></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote><p>for 后面需要接上可迭代对象</p><p>for会依次取出可迭代对象中的元素</p><p>continue的用法：</p><p>continue和break类似，但是continue不会终止循环，而是结束本次循环，跳到下次循环</p></blockquote><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      python控制流程，循环，条件
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://yoursite.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python第四话之散列类型、运算优先级和逻辑运算</title>
    <link href="http://yoursite.com/2018/12/11/2018-12-11-python-dict-set/"/>
    <id>http://yoursite.com/2018/12/11/2018-12-11-python-dict-set/</id>
    <published>2018-12-10T16:00:00.000Z</published>
    <updated>2018-12-11T14:26:08.255Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><p>[TOC]</p><h3 id="散列类型、运算优先级和逻辑运算"><a href="#散列类型、运算优先级和逻辑运算" class="headerlink" title="散列类型、运算优先级和逻辑运算"></a>散列类型、运算优先级和逻辑运算</h3><p><code>散列类型</code>也就是我们所熟知的<code>字典</code>和<code>集合</code>，我们今天来看看散列类型的相关逻辑运算。</p><h3 id="集合（set）"><a href="#集合（set）" class="headerlink" title="集合（set）"></a>集合（set）</h3><h4 id="集合的特点："><a href="#集合的特点：" class="headerlink" title="集合的特点："></a>集合的特点：</h4><p>无序、元素是唯一的。</p><h4 id="集合的创建："><a href="#集合的创建：" class="headerlink" title="集合的创建："></a>集合的创建：</h4><p>用大括号“{}”，各元素之间用逗号隔开；也可以通过类型转换的方式使用set()内置函数将列表或元祖转换为集合类型。在创建的过程中会自动过滤掉重复的元素，保证元素的唯一性。</p><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>]                                              </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: s                                                              </span><br><span class="line">Out[<span class="number">2</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: se = set(s)                                                    </span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: se                                                             </span><br><span class="line">Out[<span class="number">4</span>]: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: type(se)                                                       </span><br><span class="line">Out[<span class="number">5</span>]: set</span><br><span class="line">    </span><br><span class="line">In [<span class="number">6</span>]: &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;                                                  </span><br><span class="line">Out[<span class="number">6</span>]: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：列表是允许元素重复的，但是当我们把列表转成集合后，里面重复的元素就去掉了。</p></blockquote><h4 id="集合的运算"><a href="#集合的运算" class="headerlink" title="集合的运算"></a>集合的运算</h4><p>交集：&amp;</p><p>并集：|</p><p>差集：-</p><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-11/79094336.jpg" alt=""></p><h5 id="交集"><a href="#交集" class="headerlink" title="交集"></a><code>交集</code></h5><p>两个集合(s 和t)的差补或相对补集是指一个集合C，该集合中的元素，只属于集合s，而不属于集合t。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;                                    </span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: s2 = &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;                                           </span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: s1 &amp; s2                                                        </span><br><span class="line">Out[<span class="number">9</span>]: &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="string">'b'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>两个集合取交集，最后输出的元素是属于两个集合所共有的元素。</p></blockquote><h5 id="并集"><a href="#并集" class="headerlink" title="并集"></a><code>并集</code></h5><p>联合(union)操作和集合的OR(又称可兼析取(inclusive disjunction))其实是等价的，两个集合的联合是一个新集合，该集合中的每个元素都至少是其中一个集合的成员，即：属于两个集合其中之一的成员。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: s2 = &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;                                          </span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: s1 | s2                                                       </span><br><span class="line">Out[<span class="number">12</span>]: &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>并集指的是两个集合的元素进行一个整合，最后生成的元素都是属于原来两个集合之中的某一个。</p></blockquote><h5 id="差集"><a href="#差集" class="headerlink" title="差集"></a><code>差集</code></h5><p>和其他的布尔集合操作相似，对称差分是集合的XOR(又称”异 或” (exclusive disjunction)).两个集合(s 和t)的对称差分是指另外一个集合C,该集合中的元素，只能是属于集合s 或者集合t的成员，不能同时属于两个集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">13</span>]: s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: s2 = &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;                                          </span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: s1 - s2                                                       </span><br><span class="line">Out[<span class="number">15</span>]: &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="string">'a'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>差集也叫被减集合的补集。</p></blockquote><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a><code>扩展</code></h5><p><strong>add</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: s1.add(<span class="number">8</span>)                                                     </span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: s1                                                            </span><br><span class="line">Out[<span class="number">18</span>]: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: s1.add(<span class="string">'w'</span>)                                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: s1                                                            </span><br><span class="line">Out[<span class="number">20</span>]: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'w'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>往集合里添加元素。</p></blockquote><p><strong>pop</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">23</span>]: s1                                                            </span><br><span class="line">Out[<span class="number">23</span>]: &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'w'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: s1.pop()                                                      </span><br><span class="line">Out[<span class="number">24</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: s1.pop()                                                      </span><br><span class="line">Out[<span class="number">25</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: s1.pop()                                                      </span><br><span class="line">Out[<span class="number">26</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: s1.pop()                                                      </span><br><span class="line">Out[<span class="number">27</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: s1.pop()                                                      </span><br><span class="line">Out[<span class="number">28</span>]: <span class="number">4</span></span><br></pre></td></tr></table></figure><blockquote><p>pop方法是没有参数的，因为集合是无序的，所以在移除的时候是随机移除的。</p></blockquote><p><strong>remove</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">30</span>]: s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: s1.remove(<span class="number">1</span>)                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: s1                                                            </span><br><span class="line">Out[<span class="number">32</span>]: &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: s1.remove(<span class="string">'a'</span>)                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: s1                                                            </span><br><span class="line">Out[<span class="number">34</span>]: &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'b'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>remove方法是指定元素进行删除。</p></blockquote><p><strong>update</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">35</span>]: s1                                                            </span><br><span class="line">Out[<span class="number">35</span>]: &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'b'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: s1.update(&#123;<span class="string">'w'</span>, <span class="string">'c'</span>&#125;)                                         </span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: s1                                                            </span><br><span class="line">Out[<span class="number">37</span>]: &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'w'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>update方法是往集合里面添加集合。</p></blockquote><p><strong>isdisjoint</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">38</span>]: s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: s2 = &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;                                          </span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: s1.isdisjoint(s2)                                             </span><br><span class="line">Out[<span class="number">40</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: s1.isdisjoint(&#123;<span class="number">6</span>, <span class="number">8</span>, <span class="number">7</span>&#125;)                                      </span><br><span class="line">Out[<span class="number">41</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p>isdisjoint方法是判断两个集合有没有交集，有返回False，没有则返回True</p></blockquote><p><strong>issubset</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">42</span>]: s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: s2 = &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;                                          </span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: s1.issubset(s2)                                               </span><br><span class="line">Out[<span class="number">44</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: s2.issubset(s1)                                               </span><br><span class="line">Out[<span class="number">45</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: s1.issubset(s1)                                               </span><br><span class="line">Out[<span class="number">46</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: &#123;<span class="number">1</span>, <span class="number">2</span>&#125;.issubset(s1)                                           </span><br><span class="line">Out[<span class="number">47</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: s1                                                            </span><br><span class="line">Out[<span class="number">48</span>]: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>判断前面的集合是不是后面的集合的子集。</p></blockquote><p><strong>issuperset</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">51</span>]: s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: s2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="string">'b'</span>&#125;                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: s2.issubset(s1)                                               </span><br><span class="line">Out[<span class="number">53</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: s1.issuperset(s2)                                             </span><br><span class="line">Out[<span class="number">54</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p>判断后面的集合是前面集合的子集。</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><ul><li>集合唯一性：集合中的元素具有唯一性，不存在两个相同的元素。</li><li>集合可变性：集合中的元素是可变的，集合是可变对象。</li><li>集合无序性：集合中的元素是无序的，所以没有存在索引。</li></ul></blockquote><h3 id="字典（dict）"><a href="#字典（dict）" class="headerlink" title="字典（dict）"></a>字典（dict）</h3><p>字典是除了列表外的另一种<code>可变类型</code>，字典的元素是以键值对的形式存在，字典的键必须是唯一，可以是数字、字符串或者是元组，键可以为任何不可变类型，列表和集合不能作为字典的键。</p><h4 id="字典的创建"><a href="#字典的创建" class="headerlink" title="字典的创建"></a>字典的创建</h4><p>第一种 { key :value } ，字典里的键和值用“：”隔开，一对键和值组成一个项，项和项之间用“，”隔开。</p><p>第二种使用内置函数dict(key=value)，要注意的是这里使用的是“=”赋值的方式，键是以名字的形式所以这种方法的键就必须符合名字的要求，且不能使用关键字作为键。</p><p>如果你要使用关键字作为键名那么就只能用第一种方法，关键字以字符串的形式来创建。</p><p>通过字典的键可以访问这个键所对应的值，字典是可变类型，所以可以直接对字典的项进行修改，使用dictname[key] = value，如果这个键存在于字典中，则是修改这个键所对应的值，如果这个键不存在则是往字典中添加这个项。</p><h4 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a><strong>演示</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">56</span>]: &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;                                                </span><br><span class="line">Out[<span class="number">56</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: s = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;                                            </span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: s,type(s)                                                     </span><br><span class="line">Out[<span class="number">58</span>]: (&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;, dict)</span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;                                                </span><br><span class="line">Out[<span class="number">56</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: s = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;                                            </span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: s,type(s)                                                     </span><br><span class="line">Out[<span class="number">58</span>]: (&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;, dict)</span><br></pre></td></tr></table></figure><blockquote><p>字典形式：{key:value}</p></blockquote><h4 id="字典的运用"><a href="#字典的运用" class="headerlink" title="字典的运用"></a>字典的运用</h4><h5 id="查看"><a href="#查看" class="headerlink" title="查看"></a><code>查看</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">67</span>]: a = dict(a=<span class="number">1</span>, b=<span class="number">2</span>)                                            </span><br><span class="line"></span><br><span class="line">In [<span class="number">68</span>]: a                                                             </span><br><span class="line">Out[<span class="number">68</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">69</span>]: a[<span class="string">'a'</span>]                                                        </span><br><span class="line">Out[<span class="number">69</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>由于字典也是无序的，所以我们在取值的时候，是根据key来取出对应的value的。</p></blockquote><h5 id="增加"><a href="#增加" class="headerlink" title="增加"></a><code>增加</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">70</span>]: a                                                             </span><br><span class="line">Out[<span class="number">70</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: a[<span class="string">'c'</span>] = <span class="number">3</span>                                                    </span><br><span class="line"></span><br><span class="line">In [<span class="number">72</span>]: a                                                             </span><br><span class="line">Out[<span class="number">72</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>往字典里添加元素时，是key和value对应增加的。</p></blockquote><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a><code>修改</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">73</span>]: a                                                             </span><br><span class="line">Out[<span class="number">73</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">74</span>]: a[<span class="string">'a'</span>] = <span class="string">'w'</span>                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">75</span>]: a                                                             </span><br><span class="line">Out[<span class="number">75</span>]: &#123;<span class="string">'a'</span>: <span class="string">'w'</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>修改字典是通过key取出value，然后对应的去重新赋值。</p></blockquote><h4 id="字典的增删改查"><a href="#字典的增删改查" class="headerlink" title="字典的增删改查"></a>字典的增删改查</h4><h5 id="增加-1"><a href="#增加-1" class="headerlink" title="增加"></a>增加</h5><p><code>copy</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">76</span>]: a                                                             </span><br><span class="line">Out[<span class="number">76</span>]: &#123;<span class="string">'a'</span>: <span class="string">'w'</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">77</span>]: b = a.copy()                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">78</span>]: b                                                             </span><br><span class="line">Out[<span class="number">78</span>]: &#123;<span class="string">'a'</span>: <span class="string">'w'</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>复制成一个新字典。</p></blockquote><p><code>fromkeys</code></p><p>查看fromkeys的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">79</span>]: help(a.fromkeys)</span><br></pre></td></tr></table></figure><blockquote><p>fromkeys(iterable, value=None, /) method of builtins.type instance Returns a new dict with keys from iterable and values equal to value.</p><p>注意： 返回一个新的dict，其中包含来自iterable的键，值等于value。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">93</span>]: a                                                             </span><br><span class="line">Out[<span class="number">93</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">94</span>]: s = a.fromkeys([<span class="string">'c'</span>, <span class="string">'d'</span>])                                    </span><br><span class="line"></span><br><span class="line">In [<span class="number">95</span>]: s                                                             </span><br><span class="line">Out[<span class="number">95</span>]: &#123;<span class="string">'c'</span>: <span class="keyword">None</span>, <span class="string">'d'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">96</span>]: s = a.fromkeys([<span class="string">'c'</span>, <span class="string">'d'</span>], <span class="number">7</span>)                                 </span><br><span class="line"></span><br><span class="line">In [<span class="number">97</span>]: s                                                             </span><br><span class="line">Out[<span class="number">97</span>]: &#123;<span class="string">'c'</span>: <span class="number">7</span>, <span class="string">'d'</span>: <span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用fromkey方法的时候，原字典是不变的，会返回一个新的字典。</p></blockquote><p><code>setfefault</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">103</span>]: a                                                            </span><br><span class="line">Out[<span class="number">103</span>]: &#123;<span class="string">'a'</span>: <span class="string">'w'</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">104</span>]: a.setdefault(<span class="string">'a'</span>)                                            </span><br><span class="line">Out[<span class="number">104</span>]: <span class="string">'w'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">105</span>]: a.setdefault(<span class="string">'b'</span>)                                            </span><br><span class="line">Out[<span class="number">105</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">106</span>]: a.setdefault(<span class="string">'c'</span>)                                            </span><br><span class="line"></span><br><span class="line">In [<span class="number">107</span>]: a                                                            </span><br><span class="line">Out[<span class="number">107</span>]: &#123;<span class="string">'a'</span>: <span class="string">'w'</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">108</span>]: a.setdefault(<span class="string">'d'</span>, <span class="number">4</span>)                                         </span><br><span class="line">Out[<span class="number">108</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">109</span>]: a                                                            </span><br><span class="line">Out[<span class="number">109</span>]: &#123;<span class="string">'a'</span>: <span class="string">'w'</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="keyword">None</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>查询并返回key所对应的值，如果没有这个key,则会新建。有则查，无则增。</p></blockquote><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><p><code>clear</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">110</span>]: a                                                            </span><br><span class="line">Out[<span class="number">110</span>]: &#123;<span class="string">'a'</span>: <span class="string">'w'</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="keyword">None</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">111</span>]: a.clear()                                                    </span><br><span class="line"></span><br><span class="line">In [<span class="number">112</span>]: a                                                            </span><br><span class="line">Out[<span class="number">112</span>]: &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>删除所有键值对</p></blockquote><p><code>pop</code></p><p>查看pop 的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">121</span>]: help(a.pop)</span><br></pre></td></tr></table></figure><blockquote><p>pop(…) method of builtins.dict instance<br>​ D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.<br>​ If key is not found, d is returned if given, otherwise KeyError is raised</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">116</span>]: a                                                            </span><br><span class="line">Out[<span class="number">116</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">117</span>]: a.pop(<span class="string">'a'</span>)                                                   </span><br><span class="line">Out[<span class="number">117</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">118</span>]: a                                                            </span><br><span class="line">Out[<span class="number">118</span>]: &#123;<span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">119</span>]: a.pop(<span class="string">'d'</span>)                                                   </span><br><span class="line">Out[<span class="number">119</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">120</span>]: a.pop()                                                      </span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line">TypeError                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-120</span><span class="number">-9</span>c070c907602&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 a.pop()</span><br><span class="line"></span><br><span class="line">TypeError: pop expected at least <span class="number">1</span> arguments, got <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>pop方法是删除指定的键并返回相应的值。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">134</span>]: a                                                            </span><br><span class="line">Out[<span class="number">134</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">135</span>]: a.pop(<span class="string">'c'</span>, <span class="string">'b'</span>)                                              </span><br><span class="line">Out[<span class="number">135</span>]: <span class="string">'b'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">136</span>]: a.pop(<span class="string">'a'</span>, <span class="string">'b'</span>)                                              </span><br><span class="line">Out[<span class="number">136</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">137</span>]: a                                                            </span><br><span class="line">Out[<span class="number">137</span>]: &#123;<span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果传入两个值，第一个是key，第二个是一个值，如果找到key, 就删除对应键值对，并返回该值，如果没有找到key,就返回你所传入的第二个值。</p></blockquote><p><code>popitem</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">140</span>]: a                                                            </span><br><span class="line">Out[<span class="number">140</span>]: &#123;<span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'d'</span>: <span class="number">4</span>, <span class="string">'s'</span>: <span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">141</span>]: a.popitem()                                                  </span><br><span class="line">Out[<span class="number">141</span>]: (<span class="string">'s'</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">142</span>]: a.popitem()                                                  </span><br><span class="line">Out[<span class="number">142</span>]: (<span class="string">'d'</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">143</span>]: a                                                            </span><br><span class="line">Out[<span class="number">143</span>]: &#123;<span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于字典也是无序的，多以popitem是随机删除一个键值对。</p></blockquote><h5 id="修改-1"><a href="#修改-1" class="headerlink" title="修改"></a>修改</h5><p><code>update</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">145</span>]: a                                                            </span><br><span class="line">Out[<span class="number">145</span>]: &#123;<span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">146</span>]: a.update(&#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'c'</span>:<span class="number">4</span>, <span class="string">'s'</span>: <span class="number">9</span>&#125;)                             </span><br><span class="line"></span><br><span class="line">In [<span class="number">147</span>]: a                                                            </span><br><span class="line">Out[<span class="number">147</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">4</span>, <span class="string">'s'</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">148</span>]: a.update(&#123;<span class="string">'a'</span>:<span class="number">0</span>&#125;)                                            </span><br><span class="line"></span><br><span class="line">In [<span class="number">149</span>]: a                                                            </span><br><span class="line">Out[<span class="number">149</span>]: &#123;<span class="string">'a'</span>: <span class="number">0</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">4</span>, <span class="string">'s'</span>: <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>update方法，对于键值对的处理是，有则改，无则增。</p></blockquote><h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><p><code>get</code></p><p>查看get的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">155</span>]: help(a.get)</span><br></pre></td></tr></table></figure><blockquote><p>get(…) method of builtins.dict instance<br>​ D.get(k[,d]) -&gt; D[k] if k in D, else d. d defaults to None.</p><p>注意：默认返回None</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">151</span>]: a                                                            </span><br><span class="line">Out[<span class="number">151</span>]: &#123;<span class="string">'a'</span>: <span class="number">0</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">4</span>, <span class="string">'s'</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">152</span>]: a.get(<span class="string">'a'</span>)                                                   </span><br><span class="line">Out[<span class="number">152</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">153</span>]: a.get(<span class="string">'f'</span>)                                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">154</span>]: a.get(<span class="string">'f'</span>, <span class="string">"没有"</span>)                                           </span><br><span class="line">Out[<span class="number">154</span>]: <span class="string">'没有'</span></span><br></pre></td></tr></table></figure><blockquote><p>get方法是如果查询到key就返回对应的value，如果没有，就返回你给定的提示值。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">156</span>]: c,d = a.get(<span class="string">'f'</span>, (<span class="number">2</span>,<span class="number">3</span>))                                      </span><br><span class="line"></span><br><span class="line">In [<span class="number">157</span>]: c                                                            </span><br><span class="line">Out[<span class="number">157</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">158</span>]: d                                                            </span><br><span class="line">Out[<span class="number">158</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure><blockquote><p>也可以通过这个功能，做些操作。</p></blockquote><p><code>keys</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">159</span>]: a                                                            </span><br><span class="line">Out[<span class="number">159</span>]: &#123;<span class="string">'a'</span>: <span class="number">0</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">4</span>, <span class="string">'s'</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">160</span>]: a.keys()                                                     </span><br><span class="line">Out[<span class="number">160</span>]: dict_keys([<span class="string">'s'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">161</span>]: list(a.keys())                                               </span><br><span class="line">Out[<span class="number">161</span>]: [<span class="string">'s'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>获取字典里所有的key。</p></blockquote><p><code>value</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">162</span>]: a                                                            </span><br><span class="line">Out[<span class="number">162</span>]: &#123;<span class="string">'a'</span>: <span class="number">0</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">4</span>, <span class="string">'s'</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">163</span>]: a.values()                                                   </span><br><span class="line">Out[<span class="number">163</span>]: dict_values([<span class="number">9</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">164</span>]: list(a.values())                                             </span><br><span class="line">Out[<span class="number">164</span>]: [<span class="number">9</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><blockquote><p>获取所有的value。</p></blockquote><p><code>items</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">165</span>]: a                                                            </span><br><span class="line">Out[<span class="number">165</span>]: &#123;<span class="string">'a'</span>: <span class="number">0</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">4</span>, <span class="string">'s'</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">166</span>]: a.items()                                                    </span><br><span class="line">Out[<span class="number">166</span>]: dict_items([(<span class="string">'s'</span>, <span class="number">9</span>), (<span class="string">'a'</span>, <span class="number">0</span>), (<span class="string">'c'</span>, <span class="number">4</span>), (<span class="string">'b'</span>, <span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line">In [<span class="number">167</span>]: list(a.items())                                              </span><br><span class="line">Out[<span class="number">167</span>]: [(<span class="string">'s'</span>, <span class="number">9</span>), (<span class="string">'a'</span>, <span class="number">0</span>), (<span class="string">'c'</span>, <span class="number">4</span>), (<span class="string">'b'</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure><blockquote><p>获取所有的键值对。</p></blockquote><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><blockquote><ul><li>键（key）唯一性： 字典中的键（key）具有唯一性，不存在两个相同的键（key）</li><li>可变性： 字典是可变对象，但是自动减的键（key）必须是不可变对象</li><li>无序性：字典中的键也是无序的，所以不能通过索引取值。</li></ul></blockquote><h3 id="运算符及优先级"><a href="#运算符及优先级" class="headerlink" title="运算符及优先级"></a>运算符及优先级</h3><h4 id="Python中的运算符"><a href="#Python中的运算符" class="headerlink" title="Python中的运算符"></a>Python中的运算符</h4><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-11/41589190.jpg" alt="1"></p><h4 id="演示："><a href="#演示：" class="headerlink" title="演示："></a>演示：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">168</span>]: <span class="number">2</span> **<span class="number">3</span>                                                        </span><br><span class="line">Out[<span class="number">168</span>]: <span class="number">8</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">169</span>]: <span class="number">2</span>+<span class="number">2</span>                                                          </span><br><span class="line">Out[<span class="number">169</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">170</span>]: <span class="number">2</span><span class="number">-1</span>                                                          </span><br><span class="line">Out[<span class="number">170</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">171</span>]: <span class="number">2</span>&lt;<span class="number">2</span>                                                          </span><br><span class="line">Out[<span class="number">171</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">172</span>]: <span class="number">2</span>&gt;<span class="number">20</span>                                                         </span><br><span class="line">Out[<span class="number">172</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">173</span>]: <span class="number">3</span>&lt;=(<span class="number">1</span>+<span class="number">2</span>)                                                     </span><br><span class="line">Out[<span class="number">173</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">174</span>]: <span class="number">5</span>&gt;=<span class="number">1</span>                                                         </span><br><span class="line">Out[<span class="number">174</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">175</span>]: <span class="number">2</span>==<span class="number">2</span>                                                         </span><br><span class="line">Out[<span class="number">175</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">176</span>]: <span class="number">2</span>!=<span class="number">2</span>                                                         </span><br><span class="line">Out[<span class="number">176</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">177</span>]: a =<span class="number">1</span> </span><br><span class="line">In [<span class="number">181</span>]: <span class="number">8</span> %<span class="number">2</span>                                                         </span><br><span class="line">Out[<span class="number">181</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">182</span>]: a                                                            </span><br><span class="line">Out[<span class="number">182</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">183</span>]: a += <span class="number">1</span>                                                       </span><br><span class="line"></span><br><span class="line">In [<span class="number">184</span>]: a                                                            </span><br><span class="line">Out[<span class="number">184</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">185</span>]: a /= <span class="number">1.2</span>                                                     </span><br><span class="line"></span><br><span class="line">In [<span class="number">186</span>]: a                                                            </span><br><span class="line">Out[<span class="number">186</span>]: <span class="number">1.6666666666666667</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">187</span>]: a %= <span class="number">1</span>                                                       </span><br><span class="line"></span><br><span class="line">In [<span class="number">188</span>]: a                                                            </span><br><span class="line">Out[<span class="number">188</span>]: <span class="number">0.6666666666666667</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">189</span>]: a = <span class="number">1</span>                                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">190</span>]: b = a                                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">191</span>]: a <span class="keyword">is</span> b  <span class="comment"># 判断是否是id一致                                                      </span></span><br><span class="line">Out[<span class="number">191</span>]: <span class="keyword">True</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">192</span>]: <span class="number">1</span> <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>]                                                  </span><br><span class="line">Out[<span class="number">192</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">193</span>]: <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>]                                              </span><br><span class="line">Out[<span class="number">193</span>]: <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><h5 id="查看对象类型"><a href="#查看对象类型" class="headerlink" title="查看对象类型"></a>查看对象类型</h5><p><code>type</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">204</span>]: a = <span class="number">1</span>                                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">205</span>]: b = <span class="string">'s'</span>                                                      </span><br><span class="line"></span><br><span class="line">In [<span class="number">206</span>]: c = [<span class="number">1</span>, <span class="number">2</span>]                                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">207</span>]: type(a), type(b), type(c)                                    </span><br><span class="line">Out[<span class="number">207</span>]: (int, str, list)</span><br></pre></td></tr></table></figure><blockquote><p>直接返回对象的类型</p></blockquote><p><code>isinstance</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">208</span>]: a                                                            </span><br><span class="line">Out[<span class="number">208</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">209</span>]: b                                                            </span><br><span class="line">Out[<span class="number">209</span>]: <span class="string">'s'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">210</span>]: c                                                            </span><br><span class="line">Out[<span class="number">210</span>]: [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">211</span>]: isinstance(a, int)                                           </span><br><span class="line">Out[<span class="number">211</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">212</span>]: isinstance(a, str)                                           </span><br><span class="line">Out[<span class="number">212</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">213</span>]: isinstance(b, str)                                           </span><br><span class="line">Out[<span class="number">213</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p>判断对象的类型</p></blockquote><h5 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">216</span>]: a = <span class="number">1</span>                                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">217</span>]: b = <span class="number">2</span>                                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">218</span>]: c = <span class="number">1</span>                                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">219</span>]: a == b                                                       </span><br><span class="line">Out[<span class="number">219</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">220</span>]: a == c                                                       </span><br><span class="line">Out[<span class="number">220</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">221</span>]: b != c                                                       </span><br><span class="line">Out[<span class="number">221</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h5 id="如果有多个条件"><a href="#如果有多个条件" class="headerlink" title="如果有多个条件"></a>如果有多个条件</h5><blockquote><ul><li>判断语句1 and 判断语句2</li><li>判断语句1 or 判断语句2</li><li>not 判断语句1</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">227</span>]: a==b <span class="keyword">and</span> b!=c                                                </span><br><span class="line">Out[<span class="number">227</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">228</span>]: a==b <span class="keyword">or</span> b!=c                                                 </span><br><span class="line">Out[<span class="number">228</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">229</span>]: <span class="keyword">not</span> a==b                                                     </span><br><span class="line">Out[<span class="number">229</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      python散列类型、运算优先级和逻辑运算，字典，集合的增删改查
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://yoursite.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python第三话之格式化输出和深浅复制</title>
    <link href="http://yoursite.com/2018/12/09/2018-12-8-python-output/"/>
    <id>http://yoursite.com/2018/12/09/2018-12-8-python-output/</id>
    <published>2018-12-08T16:00:00.000Z</published>
    <updated>2018-12-11T14:25:36.775Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 19 2018 22:33:54 GMT+0800 (GMT+08:00) --><p>[TOC]</p><h3 id="格式化输出和深浅拷贝"><a href="#格式化输出和深浅拷贝" class="headerlink" title="格式化输出和深浅拷贝"></a>格式化输出和深浅拷贝</h3><p>前面我熟悉了<code>列表</code>、<code>字符串</code>、<code>元组</code>的常用操作以及对应的<code>增删改查</code>，今天我们来深入了解<code>格式化输出</code>和<code>深浅复制</code>相关的知识点。</p><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><h4 id="传统方法"><a href="#传统方法" class="headerlink" title="传统方法"></a>传统方法</h4><h5 id="s"><a href="#s" class="headerlink" title="%s"></a><code>%s</code></h5><blockquote><p>%字符串</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: a = <span class="string">'hello'</span>                                                    </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: b = <span class="string">'python '</span>                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="string">"%s %s"</span> %(a, b)                                                </span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">'hello python '</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: c = <span class="number">123</span>                                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: <span class="string">"%s %s"</span> %(a, c)                                                </span><br><span class="line">Out[<span class="number">5</span>]: <span class="string">'hello 123'</span></span><br></pre></td></tr></table></figure><h5 id="d"><a href="#d" class="headerlink" title="%d"></a><code>%d</code></h5><blockquote><p>%数字</p><p>注意：只能传入数字</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: a = <span class="string">'hello'</span>                                                    </span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: b = <span class="string">'python '</span>                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: c = <span class="number">123</span>                                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: <span class="string">"%d %d"</span> %(a, c)                                                </span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line">TypeError                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-9</span><span class="number">-2</span>d6d5e198328&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 "%d %d" %(a, c)</span><br><span class="line"></span><br><span class="line">TypeError: %d format: a number <span class="keyword">is</span> required, <span class="keyword">not</span> str</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="string">"%d %d"</span> %(c, c)                                               </span><br><span class="line">Out[<span class="number">10</span>]: <span class="string">'123 123'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="string">"%d"</span>%<span class="number">123.34</span>                                                   </span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">'123'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: <span class="string">"%d %d"</span> %(<span class="number">123</span>, <span class="number">123.34</span>)                                        </span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'123 123'</span></span><br></pre></td></tr></table></figure><h5 id="f"><a href="#f" class="headerlink" title="%f"></a><code>%f</code></h5><blockquote><p>%浮点数</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: <span class="string">'%f'</span>%<span class="number">2.3</span>                                                      </span><br><span class="line">Out[<span class="number">14</span>]: <span class="string">'2.300000'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: <span class="string">'%.2f'</span>%<span class="number">2.3</span>                                                    </span><br><span class="line">Out[<span class="number">15</span>]: <span class="string">'2.30'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: <span class="string">'%.2f'</span>%<span class="number">2.333434</span>                                               </span><br><span class="line">Out[<span class="number">16</span>]: <span class="string">'2.33'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: <span class="string">'%.2f'</span>%<span class="number">2.35</span>                                                   </span><br><span class="line">Out[<span class="number">17</span>]: <span class="string">'2.35'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: <span class="string">'%.2f'</span>%<span class="number">2.36</span>                                                   </span><br><span class="line">Out[<span class="number">18</span>]: <span class="string">'2.36'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: <span class="string">'%.3f'</span>%<span class="number">2.36</span>                                                   </span><br><span class="line">Out[<span class="number">19</span>]: <span class="string">'2.360'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: <span class="string">'%.4f'</span>%<span class="number">2.36</span>                                                   </span><br><span class="line">Out[<span class="number">20</span>]: <span class="string">'2.3600'</span></span><br></pre></td></tr></table></figure><h5 id="c"><a href="#c" class="headerlink" title="%c"></a><code>%c</code></h5><blockquote><p>%ASCII字符</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">21</span>]: <span class="string">'%c'</span>%<span class="number">97</span>                                                       </span><br><span class="line">Out[<span class="number">21</span>]: <span class="string">'a'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: <span class="string">'%c'</span>%<span class="number">65</span>                                                       </span><br><span class="line">Out[<span class="number">22</span>]: <span class="string">'A'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: <span class="string">'%c'</span>%<span class="number">61</span>                                                       </span><br><span class="line">Out[<span class="number">23</span>]: <span class="string">'='</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: <span class="string">'%c'</span>%<span class="number">60</span>                                                       </span><br><span class="line">Out[<span class="number">24</span>]: <span class="string">'&lt;'</span></span><br></pre></td></tr></table></figure><h5 id="o"><a href="#o" class="headerlink" title="%o"></a><code>%o</code></h5><blockquote><p>%8进制</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">25</span>]: <span class="string">'%o'</span>%<span class="number">9</span>                               </span><br><span class="line">Out[<span class="number">25</span>]: <span class="string">'11'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: <span class="string">'%o'</span>%<span class="number">10</span>                              </span><br><span class="line">Out[<span class="number">26</span>]: <span class="string">'12'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: <span class="string">'%o'</span>%<span class="number">107</span>                             </span><br><span class="line">Out[<span class="number">27</span>]: <span class="string">'153'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: <span class="string">'%o'</span>%<span class="number">17</span>                              </span><br><span class="line">Out[<span class="number">28</span>]: <span class="string">'21'</span></span><br></pre></td></tr></table></figure><h5 id="x"><a href="#x" class="headerlink" title="%x"></a><code>%x</code></h5><blockquote><p>%16进制</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: <span class="string">'%x'</span>%<span class="number">16</span>                              </span><br><span class="line">Out[<span class="number">29</span>]: <span class="string">'10'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: <span class="string">'%x'</span>%<span class="number">15</span>                              </span><br><span class="line">Out[<span class="number">30</span>]: <span class="string">'f'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: <span class="string">'%x'</span>%<span class="number">14</span>                              </span><br><span class="line">Out[<span class="number">31</span>]: <span class="string">'e'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: <span class="string">'%x'</span>%<span class="number">10</span>                              </span><br><span class="line">Out[<span class="number">32</span>]: <span class="string">'a'</span></span><br></pre></td></tr></table></figure><h5 id="e"><a href="#e" class="headerlink" title="%e"></a><code>%e</code></h5><blockquote><p>%科学计数法</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">33</span>]: <span class="string">'%e'</span>%<span class="number">0.01</span>                            </span><br><span class="line">Out[<span class="number">33</span>]: <span class="string">'1.000000e-02'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: <span class="string">'%e'</span>%<span class="number">0.001</span>                           </span><br><span class="line">Out[<span class="number">34</span>]: <span class="string">'1.000000e-03'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: <span class="string">'%e'</span>%<span class="number">10</span>                              </span><br><span class="line">Out[<span class="number">35</span>]: <span class="string">'1.000000e+01'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: <span class="string">'%e'</span>%<span class="number">100</span>                             </span><br><span class="line">Out[<span class="number">36</span>]: <span class="string">'1.000000e+02'</span></span><br></pre></td></tr></table></figure><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a><code>扩展</code></h5><p><strong>%r</strong></p><blockquote><p>原始化</p></blockquote><p>演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">43</span>]: print(<span class="string">'%s'</span>%<span class="string">'123'</span>)                    </span><br><span class="line"><span class="number">123</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: print(<span class="string">'%r'</span>%<span class="string">'123'</span>)                    </span><br><span class="line"><span class="string">'123'</span></span><br></pre></td></tr></table></figure><p><strong>%+6.5f</strong></p><blockquote><p>规定输出的字符串的个数和输出小数的位数</p><p>注意：%6.5f 指的是一个输出6个字符，其中5个小数</p><p>如果：前面带+就是表示输出符号</p><p>​ 前面带-号表示左对齐</p></blockquote><p>演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">46</span>]: <span class="string">'%5.3f'</span>%<span class="number">1.2</span>                          </span><br><span class="line">Out[<span class="number">46</span>]: <span class="string">'1.200'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: <span class="string">'%6.3f'</span>%<span class="number">1.2</span>                          </span><br><span class="line">Out[<span class="number">47</span>]: <span class="string">' 1.200'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: <span class="string">'%6.3f'</span>%<span class="number">12.34567</span>                     </span><br><span class="line">Out[<span class="number">48</span>]: <span class="string">'12.346'</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">49</span>]: <span class="string">'%+6.3f'</span>%<span class="number">12.34567</span>                    </span><br><span class="line">Out[<span class="number">49</span>]: <span class="string">'+12.346'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: <span class="string">'%+6.3f'</span>%<span class="number">-12.34567</span>                   </span><br><span class="line">Out[<span class="number">50</span>]: <span class="string">'-12.346'</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">60</span>]: <span class="string">'%8.2f'</span>%<span class="number">13.3333</span>                      </span><br><span class="line">Out[<span class="number">60</span>]: <span class="string">'   13.33'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">61</span>]: <span class="string">'%-8.2f'</span>%<span class="number">13.3333</span>                     </span><br><span class="line">Out[<span class="number">61</span>]: <span class="string">'13.33   '</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">62</span>]: <span class="string">'%08.2f'</span>%<span class="number">13.3333</span>                     </span><br><span class="line">Out[<span class="number">62</span>]: <span class="string">'00013.33'</span></span><br></pre></td></tr></table></figure><h4 id="Python方法"><a href="#Python方法" class="headerlink" title="Python方法"></a><strong>Python方法</strong></h4><p>在Python中我们一般使用<code>format</code>来进行格式化输出</p><h5 id="format"><a href="#format" class="headerlink" title="format"></a><code>format</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">67</span>]: <span class="string">'&#123;:.2f&#125;'</span>.format(<span class="number">12.333</span>)              </span><br><span class="line">Out[<span class="number">67</span>]: <span class="string">'12.33'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">68</span>]: <span class="string">'&#123;a:.2f&#125;'</span>.format(a=<span class="number">12.333</span>)           </span><br><span class="line">Out[<span class="number">68</span>]: <span class="string">'12.33'</span></span><br></pre></td></tr></table></figure><blockquote><p>保留两位小数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">70</span>]: <span class="string">'&#123;:.2%&#125;'</span>.format(<span class="number">0.001</span>)               </span><br><span class="line">Out[<span class="number">70</span>]: <span class="string">'0.10%'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: <span class="string">'&#123;:.2%&#125;'</span>.format(<span class="number">0.61</span>)                </span><br><span class="line">Out[<span class="number">71</span>]: <span class="string">'61.00%'</span></span><br></pre></td></tr></table></figure><blockquote><p>百分比格式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">72</span>]: <span class="string">'&#123;0:x&#125;'</span>.format(<span class="number">20</span>)                   </span><br><span class="line">Out[<span class="number">72</span>]: <span class="string">'14'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: <span class="string">'&#123;0:x&#125;'</span>.format(<span class="number">10</span>)                   </span><br><span class="line">Out[<span class="number">73</span>]: <span class="string">'a'</span></span><br></pre></td></tr></table></figure><blockquote><p>转换成十六进制</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">74</span>]: <span class="string">'&#123;0:o&#125;'</span>.format(<span class="number">20</span>)                   </span><br><span class="line">Out[<span class="number">74</span>]: <span class="string">'24'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">75</span>]: <span class="string">'&#123;0:o&#125;'</span>.format(<span class="number">10</span>)                   </span><br><span class="line">Out[<span class="number">75</span>]: <span class="string">'12'</span></span><br></pre></td></tr></table></figure><blockquote><p>转换成8进制</p></blockquote><blockquote><p>注意：进制转换时使用{0:进制}这个格式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">76</span>]: <span class="string">'&#123;a:&lt;10&#125;'</span>.format(a=<span class="number">12.3</span>,b=<span class="number">13.44</span>)     </span><br><span class="line">Out[<span class="number">76</span>]: <span class="string">'12.3      '</span></span><br></pre></td></tr></table></figure><blockquote><p>左对齐，长度为10</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">77</span>]: <span class="string">'&#123;a:0&lt;10&#125;'</span>.format(a=<span class="number">12.3</span>,b=<span class="number">13.44</span>)    </span><br><span class="line">    ...:                                      </span><br><span class="line">Out[<span class="number">77</span>]: <span class="string">'12.3000000'</span></span><br></pre></td></tr></table></figure><blockquote><p>数字补x(填充右边，宽度为4)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">78</span>]: <span class="string">'&#123;a:0&gt;10&#125;'</span>.format(a=<span class="number">12.3</span>,b=<span class="number">13.44</span>)    </span><br><span class="line">Out[<span class="number">78</span>]: <span class="string">'00000012.3'</span></span><br></pre></td></tr></table></figure><blockquote><p>右对齐，长度为10</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">79</span>]: <span class="string">'&#123;a:0^10&#125;'</span>.format(a=<span class="number">12.3</span>,b=<span class="number">13.44</span>)    </span><br><span class="line">Out[<span class="number">79</span>]: <span class="string">'00012.3000'</span></span><br></pre></td></tr></table></figure><blockquote><p>两边对齐， 长度为10</p></blockquote><h3 id="字符串转义"><a href="#字符串转义" class="headerlink" title="字符串转义"></a>字符串转义</h3><p>字符前面加上 \ ，字符就不再表示字符本身的意思，表示ASCII码中不能显示字符，常见有下：</p><h5 id="n"><a href="#n" class="headerlink" title="\n"></a><code>\n</code></h5><blockquote><p>换行</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">83</span>]: print(<span class="string">'abc\nabc'</span>)                    </span><br><span class="line">abc</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><h5 id="t"><a href="#t" class="headerlink" title="\t"></a><code>\t</code></h5><blockquote><p>水平制表符</p></blockquote><p><strong>演示</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">84</span>]: print(<span class="string">'abc\tabc'</span>)                    </span><br><span class="line">abcabc</span><br></pre></td></tr></table></figure><h5 id="b"><a href="#b" class="headerlink" title="\b"></a><code>\b</code></h5><blockquote><p>退格</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">85</span>]: print(<span class="string">'abc\babc'</span>)                    </span><br><span class="line">ababc</span><br></pre></td></tr></table></figure><h5 id="r"><a href="#r" class="headerlink" title="\r"></a><code>\r</code></h5><blockquote><p>回车，当前位置移到本行开头</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">87</span>]: print(<span class="string">'abc\rbc'</span>)                     </span><br><span class="line">bcc</span><br></pre></td></tr></table></figure><h5><a href="#" class="headerlink" title="\"></a><code>\</code></h5><blockquote><p>代表反斜杠 \</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">88</span>]: print(<span class="string">'abc\\bc'</span>)                     </span><br><span class="line">abc\bc</span><br></pre></td></tr></table></figure><h5 id="’"><a href="#’" class="headerlink" title="\’"></a><code>\’</code></h5><blockquote><p>代表一个单引号，同样的 “ ？ 等符号也可以这么输出</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">95</span>]: print(<span class="string">'abc\' \"b c'</span>)                 </span><br><span class="line">abc<span class="string">' "b c</span></span><br></pre></td></tr></table></figure><h5 id="0"><a href="#0" class="headerlink" title="\0"></a><code>\0</code></h5><blockquote><p>代表一个空字符</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">96</span>]: print(<span class="string">'abc\0abc'</span>)                    </span><br><span class="line">abcabc</span><br><span class="line"></span><br><span class="line">In [<span class="number">97</span>]: print(<span class="string">'abc\0\0abc'</span>)                  </span><br><span class="line">abcabc</span><br></pre></td></tr></table></figure><h5 id="a"><a href="#a" class="headerlink" title="\a"></a><code>\a</code></h5><blockquote><p>系统提示音(交互环境需使用print)</p></blockquote><h5 id="取消转义"><a href="#取消转义" class="headerlink" title="取消转义"></a><code>取消转义</code></h5><blockquote><p>在python中如果要去掉字符串的转义，只需要在字符串前面加上 r</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">104</span>]: print(<span class="string">r'abc\b\t\nabc'</span>)              </span><br><span class="line">abc\b\t\nabc</span><br></pre></td></tr></table></figure><h3 id="格式化和转义的应用"><a href="#格式化和转义的应用" class="headerlink" title="格式化和转义的应用"></a>格式化和转义的应用</h3><p>格式化得到的结果都是字符串，通过把位置预先留出来，后期再往其中填入内容可以让输出内容更加整洁美观，而又具有良好的可读性，同时让代码更简洁精练。</p><p>字符串的转义可以方便我们表示我们不太方便表示的字符，同时转义有些情况下又会带来麻烦，特别是在表示路径的时候，这种情况下可以在字符串前面加上 r 来去掉字符串的转义。</p><h3 id="字符串编码"><a href="#字符串编码" class="headerlink" title="字符串编码"></a>字符串编码</h3><p>对于编码这部分，我们先举个栗子来看看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">105</span>]: <span class="string">'你好'</span>.encode(<span class="string">'utf-8'</span>)                  </span><br><span class="line">Out[<span class="number">105</span>]: <span class="string">b'\xe4\xbd\xa0\xe5\xa5\xbd'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">106</span>]: <span class="string">'你好'</span>.encode(<span class="string">'gbk'</span>)                    </span><br><span class="line">Out[<span class="number">106</span>]: <span class="string">b'\xc4\xe3\xba\xc3'</span></span><br></pre></td></tr></table></figure><p>我们可以通过不同的编码方式来进行编码以便我们在不同情况下使用，接下来我们来看看编码相关的知识点</p><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-8/6179178.jpg" alt="1"></p><h4 id="Python对于字符集的处理"><a href="#Python对于字符集的处理" class="headerlink" title="Python对于字符集的处理"></a>Python对于字符集的处理</h4><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-8/45812485.jpg" alt=""></p><h4 id="字符编码的作用"><a href="#字符编码的作用" class="headerlink" title="字符编码的作用"></a>字符编码的作用</h4><p>Python统一了编码，这样Python在内部处理的时候不会因编码不同而出现程序不能正常执行的问题。</p><p>Python会自动根据系统环境选择编码，但是经常在文件传输的过程中，会遇到各种不同的编码，这个时候就需要我们去处理编码问题。</p><h3 id="深浅复制"><a href="#深浅复制" class="headerlink" title="深浅复制"></a>深浅复制</h3><p>举个栗子看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">107</span>]: s = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]                           </span><br><span class="line"></span><br><span class="line">In [<span class="number">108</span>]: s2 = [<span class="string">'a'</span>, s]                           </span><br><span class="line"></span><br><span class="line">In [<span class="number">109</span>]: s2                                      </span><br><span class="line">Out[<span class="number">109</span>]: [<span class="string">'a'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">111</span>]: id(s), id(s2), id(s2[<span class="number">1</span>])                                     </span><br><span class="line">Out[<span class="number">111</span>]: (<span class="number">139956880001800</span>, <span class="number">139956880021256</span>, <span class="number">139956880001800</span>)</span><br></pre></td></tr></table></figure><blockquote><p>我们可以看出来，s2只是引用了s的值，s2[1]的值会随着s的变化而变化。</p></blockquote><h4 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h4><p>举个栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">136</span>]: s = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">137</span>]: s2 = [<span class="string">'a'</span>, s]                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">138</span>]: s3 = s2.copy()                                               </span><br><span class="line"></span><br><span class="line">In [<span class="number">139</span>]: s[<span class="number">0</span>]=<span class="string">'w'</span>                                                     </span><br><span class="line"></span><br><span class="line">In [<span class="number">140</span>]: s2                                                           </span><br><span class="line">Out[<span class="number">140</span>]: [<span class="string">'a'</span>, [<span class="string">'w'</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">141</span>]: s3                                                           </span><br><span class="line">Out[<span class="number">141</span>]: [<span class="string">'a'</span>, [<span class="string">'w'</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">149</span>]: id(s2[<span class="number">1</span>]), id(s3[<span class="number">1</span>]),id(s)                                   </span><br><span class="line">Out[<span class="number">149</span>]: (<span class="number">139956883394376</span>, <span class="number">139956883394376</span>, <span class="number">139956883394376</span>)</span><br></pre></td></tr></table></figure><blockquote><p>由上面的栗子可以看出来，虽然s3是copy的，但是s3还是会随着s的变化来变化的。那我们有什么办法让s3的值不变呢?那就是深拷贝。</p></blockquote><h4 id="深复制"><a href="#深复制" class="headerlink" title="深复制"></a>深复制</h4><p>举个栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">150</span>]: s = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">151</span>]: s2 = [<span class="string">'a'</span>, s]                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">152</span>]: <span class="keyword">import</span> copy                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">153</span>]: s3 = copy.deepcopy(s2)                                       </span><br><span class="line"></span><br><span class="line">In [<span class="number">154</span>]: s2                                                           </span><br><span class="line">Out[<span class="number">154</span>]: [<span class="string">'a'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">155</span>]: s3                                                           </span><br><span class="line">Out[<span class="number">155</span>]: [<span class="string">'a'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">156</span>]: s[<span class="number">0</span>]=<span class="string">'r'</span>                                                     </span><br><span class="line"></span><br><span class="line">In [<span class="number">157</span>]: s2                                                           </span><br><span class="line">Out[<span class="number">157</span>]: [<span class="string">'a'</span>, [<span class="string">'r'</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">158</span>]: s3                                                           </span><br><span class="line">Out[<span class="number">158</span>]: [<span class="string">'a'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">159</span>]: id(s),id(s2[<span class="number">1</span>]),id(s3[<span class="number">1</span>])                                    </span><br><span class="line">Out[<span class="number">159</span>]: (<span class="number">139956879794952</span>, <span class="number">139956879794952</span>, <span class="number">139956879278408</span>)</span><br></pre></td></tr></table></figure><blockquote><p>通过深拷贝，我们就实现了，原数据改变的时候，复制的数据不会随着改变。</p></blockquote><h4 id="深浅复制的应用"><a href="#深浅复制的应用" class="headerlink" title="深浅复制的应用"></a>深浅复制的应用</h4><p>深浅复制只有在<code>列表嵌套列表</code>的情况下讨论。</p><p>如果想保留修改之前的数据，就可以使用列表的复制，但要注意列表嵌套情况下的问题。</p><h3 id="bytes和bytearray"><a href="#bytes和bytearray" class="headerlink" title="bytes和bytearray"></a>bytes和bytearray</h3><h4 id="bytes二进制序列类型"><a href="#bytes二进制序列类型" class="headerlink" title="bytes二进制序列类型"></a>bytes二进制序列类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">169</span>]: a= bytes(<span class="number">3</span>)                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">170</span>]: a[<span class="number">0</span>]                                                         </span><br><span class="line">Out[<span class="number">170</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">171</span>]: a[<span class="number">1</span>]                                                         </span><br><span class="line">Out[<span class="number">171</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>使用bytes(number)指定长度的零填充字节生成一个二进制的序列类型</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">172</span>]: bytes(<span class="string">b'abc'</span>)                                                </span><br><span class="line">Out[<span class="number">172</span>]: <span class="string">b'abc'</span></span><br></pre></td></tr></table></figure><blockquote><p>二进制字符串</p></blockquote><h4 id="bytearray二进制数组"><a href="#bytearray二进制数组" class="headerlink" title="bytearray二进制数组"></a>bytearray二进制数组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">173</span>]: a = bytearray(<span class="number">3</span>)                                             </span><br><span class="line"></span><br><span class="line">In [<span class="number">174</span>]: a                                                            </span><br><span class="line">Out[<span class="number">174</span>]: bytearray(<span class="string">b'\x00\x00\x00'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">175</span>]: a[<span class="number">1</span>]                                                         </span><br><span class="line">Out[<span class="number">175</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>使用bytearray(number)指定长度的零填充字节生成一个二进制的数组</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">176</span>]: bytearray(<span class="string">b'abc'</span>)                                            </span><br><span class="line">Out[<span class="number">176</span>]: bytearray(<span class="string">b'abc'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>二进制字符串</p></blockquote><h4 id="二进制序列类型的应用"><a href="#二进制序列类型的应用" class="headerlink" title="二进制序列类型的应用"></a>二进制序列类型的应用</h4><p>二进制序列类型的用法比较少见，是python中少用的一种序列类型。</p><p>对于二进制序列类型，大家基本了解即可。</p><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      python格式化输出和深浅复制
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://yoursite.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
