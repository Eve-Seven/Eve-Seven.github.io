<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eve-Seven</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-12T08:56:20.674Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Seven</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python第六话之函数基础和函数参数</title>
    <link href="http://yoursite.com/2018/12/12/2018-12-13-python-main/"/>
    <id>http://yoursite.com/2018/12/12/2018-12-13-python-main/</id>
    <published>2018-12-11T16:00:00.000Z</published>
    <updated>2018-12-12T08:56:20.674Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:50 GMT+0800 (GMT+08:00) --><p>[TOC]</p><h3 id="函数基础和函数参数"><a href="#函数基础和函数参数" class="headerlink" title="函数基础和函数参数"></a>函数基础和函数参数</h3><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。</p><p>函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如print()。但你也可以自己创建函数，这被叫做用户自定义函数。</p><h3 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h3><h4 id="定义一个函数"><a href="#定义一个函数" class="headerlink" title="定义一个函数"></a>定义一个函数</h4><blockquote><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p><ul><li>函数代码块以 <strong>def</strong> 关键词开头，后接函数标识符名称和圆括号 <strong>()</strong>。</li><li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号起始，并且缩进。</li><li><strong>return [表达式]</strong> 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li></ul></blockquote><p><strong>演示</strong>：</p><blockquote><p>我们上节课实现了打印列表，如果我们打印几个列表呢？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'---------'</span>)</span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>, <span class="string">'A'</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'---------'</span>)</span><br><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="string">'s'</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">---------</span><br><span class="line"><span class="number">1</span></span><br><span class="line">A</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">---------</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">s</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><blockquote><p>以我们上节所讲的知识点，如果要打印三个列表的话，就是上述这种方法，那还有没有更简单的呢？</p></blockquote><p><strong>演示</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">l1 = [1, 0, 5, 7, 9]</span><br><span class="line">l2 = [1, &apos;A&apos;, 5, 7, 9]</span><br><span class="line">l3 = [1, 0, &apos;S&apos;, 7, 9]</span><br><span class="line"></span><br><span class="line">def demo(li):</span><br><span class="line">for i in li:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line">demo(l1)</span><br><span class="line">print(&apos;---------&apos;)</span><br><span class="line">demo(l2)</span><br><span class="line">print(&apos;---------&apos;)</span><br><span class="line">demo(l3)</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">---------</span><br><span class="line"><span class="number">1</span></span><br><span class="line">A</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">---------</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">S</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><blockquote><p>上述就是使用函数的形式来实现多个列表的打印，是不是比前面的更简单。</p></blockquote><h4 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h4><blockquote><p>def 函数名(参数)：</p><p>​ pass</p><p>​ return 表达式</p><p>函数名命名规则： 字母、数字和下划线组成，和变量命名规则一致</p><p>return 后面可以返回任意表达式，但不能是赋值语句</p><p>注意：函数名定义和变量名的定义是一样的，只能使用字母、数字和下划线定义，不能以数字开头。</p></blockquote><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><blockquote><p>关键字是不能拿来做变量定义的。</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: a</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-3</span><span class="number">-3</span>f786850e387&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 a</span><br><span class="line"></span><br><span class="line">NameError: name <span class="string">'a'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="function"><span class="keyword">def</span></span></span><br><span class="line">  File "&lt;ipython-input-4-7b18d017f89f&gt;", line 1</span><br><span class="line">    <span class="function"><span class="keyword">def</span></span></span><br><span class="line"><span class="function">       ^</span></span><br><span class="line"><span class="function"><span class="title">SyntaxError</span>:</span> invalid syntax</span><br></pre></td></tr></table></figure><blockquote><p>如果把关键字拿来定义，是会报语法错误的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> keyword</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: print(keyword.kwlist)</span><br><span class="line">[<span class="string">'False'</span>, <span class="string">'None'</span>, <span class="string">'True'</span>, <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'nonlocal'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>上述就是整个Python编程语言的全部关键字，在基础阶段都会提到的。</p></blockquote><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">0</span>, <span class="string">'S'</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(li)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">        print(i)</span><br><span class="line"></span><br><span class="line">demo(l1)</span><br></pre></td></tr></table></figure><blockquote><p>调用方式：函数名（参数）</p></blockquote><h4 id="函数返回"><a href="#函数返回" class="headerlink" title="函数返回"></a>函数返回</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">1</span>, <span class="number">0</span>, <span class="string">'S'</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(li)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">        print(i)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></span><br><span class="line"></span><br><span class="line">print(demo(l1))</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">S</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">ok</span><br></pre></td></tr></table></figure><blockquote><p>return：</p><p>注意 return 和 print 的区别，return是函数的返回值，返回值可以赋值给变量，而print只是打印出来</p></blockquote><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><blockquote><p>刚才讲到了函数的定义，那函数里面可以传入哪些对象呢？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">demo(<span class="string">'demo'</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">demo</span><br></pre></td></tr></table></figure><blockquote><p>如果我们不传值呢？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">demo()</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: demo() missing <span class="number">1</span> required positional argument: <span class="string">'x'</span></span><br></pre></td></tr></table></figure><blockquote><p>TypeError：demo()缺少一个必需的位置参数：’x’。</p></blockquote><blockquote><p>传入几个参数呢？</p></blockquote><h4 id="必备参数"><a href="#必备参数" class="headerlink" title="必备参数"></a>必备参数</h4><blockquote><p>def func(x):</p><p>pass</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: demo() takes <span class="number">1</span> positional argument but <span class="number">2</span> were given</span><br></pre></td></tr></table></figure><blockquote><p>一个参数对应一个数值</p></blockquote><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><blockquote><p>def func(x, y=None):</p><p>pass</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(x, y=<span class="number">1</span>)</span>:</span></span><br><span class="line">    print(x, y)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">demo(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>y=1.就是默认参数，没有传入新参数的时候，就使用默认参数。</p></blockquote><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(x, y=<span class="number">1</span>)</span>:</span></span><br><span class="line">    print(x, y)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">demo(y=<span class="string">"q"</span>, x=<span class="string">'s'</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">s q</span><br></pre></td></tr></table></figure><blockquote><p>关键字参数，调用的时候带上参数名。</p></blockquote><h4 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h4><blockquote><p>def func(*args, **kwargs):</p><p>pass</p><p>注意：*+参数名</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(args)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">demo(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">1</span>,)</span><br></pre></td></tr></table></figure><blockquote><p>参数名前面加<code>*号</code>是不定长参数，输出是一个元组。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(*a)</span>:</span></span><br><span class="line">    print(*a)  <span class="comment"># 加*：去除括号</span></span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">print(<span class="string">'-------'</span>)</span><br><span class="line">demo((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">print(<span class="string">'-------'</span>)</span><br><span class="line">demo(*(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">-------</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>),)</span><br><span class="line">-------</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><blockquote><p>加*：去除括号</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(**a)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">demo(x=<span class="number">1</span>, y=<span class="number">2</span>, s=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'s'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参数名前面加<code>**号</code>是不定长参数，输出是一个字典。</p><p>注意：传入的参数是键值对。</p></blockquote><h4 id="演示："><a href="#演示：" class="headerlink" title="演示："></a><strong>演示：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line">demo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, x=<span class="number">1</span>, y=<span class="number">2</span>, s=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'s'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>传入的键值对，只能放在最后。</p></blockquote><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><blockquote><p>必备参数：在函数调用的时候，必备参数必须要传入</p><p>默认参数： 在函数调用的时候，默认参数可以不传入值，不传入值时，会使用默认参数</p><p>不定长参数：在函数调用的时候，不定长参数可以不传入，也可以传入任意长度。其中定义时，元组形式可以放到参数最前面，字典形式只能放到最后面</p></blockquote><h3 id="常见的内置函数"><a href="#常见的内置函数" class="headerlink" title="常见的内置函数"></a>常见的内置函数</h3><p>常见内置函数提供了一些处理的数据的方法，可以帮助我们提高开发速度</p><h4 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h4><h5 id="len"><a href="#len" class="headerlink" title="len"></a><code>len</code></h5><blockquote><p>求长度</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>]</span><br><span class="line">In [<span class="number">6</span>]: len(li)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure><h5 id="min"><a href="#min" class="headerlink" title="min"></a><code>min</code></h5><blockquote><p>求最小值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>]</span><br><span class="line">In [<span class="number">6</span>]: len(li)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure><h5 id="max"><a href="#max" class="headerlink" title="max"></a><code>max</code></h5><blockquote><p>求最大值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>]</span><br><span class="line">In [<span class="number">8</span>]: max(li)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="number">8</span></span><br></pre></td></tr></table></figure><h5 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a><code>sorted</code></h5><blockquote><p>排序</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>]</span><br><span class="line">In [<span class="number">9</span>]: sorted(li)</span><br><span class="line">Out[<span class="number">9</span>]: [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><h5 id="reversed"><a href="#reversed" class="headerlink" title="reversed"></a><code>reversed</code></h5><blockquote><p>反向</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>]</span><br><span class="line">In [<span class="number">10</span>]: reversed(li)</span><br><span class="line">Out[<span class="number">10</span>]: &lt;list_reverseiterator at <span class="number">0x7f68aa81af98</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: list(reversed(li))</span><br><span class="line">Out[<span class="number">11</span>]: [<span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><h5 id="sum"><a href="#sum" class="headerlink" title="sum"></a><code>sum</code></h5><blockquote><p>求和</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">2</span>,<span class="number">8</span>,<span class="number">5</span>]</span><br><span class="line">In [<span class="number">12</span>]: sum(li)</span><br><span class="line">Out[<span class="number">12</span>]: <span class="number">15</span></span><br></pre></td></tr></table></figure><h4 id="进制转换函数"><a href="#进制转换函数" class="headerlink" title="进制转换函数"></a>进制转换函数</h4><h5 id="bin"><a href="#bin" class="headerlink" title="bin"></a><code>bin</code></h5><blockquote><p>二进制</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">13</span>]: bin(<span class="number">12</span>)</span><br><span class="line">Out[<span class="number">13</span>]: <span class="string">'0b1100'</span></span><br></pre></td></tr></table></figure><h5 id="oct"><a href="#oct" class="headerlink" title="oct"></a><code>oct</code></h5><blockquote><p>八进制</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: oct(<span class="number">18</span>)</span><br><span class="line">Out[<span class="number">16</span>]: <span class="string">'0o22</span></span><br></pre></td></tr></table></figure><h5 id="hex"><a href="#hex" class="headerlink" title="hex"></a><code>hex</code></h5><blockquote><p>十六进制</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">17</span>]: hex(<span class="number">12</span>)</span><br><span class="line">Out[<span class="number">17</span>]: <span class="string">'0xc'</span></span><br></pre></td></tr></table></figure><h5 id="ord"><a href="#ord" class="headerlink" title="ord"></a><code>ord</code></h5><blockquote><p>字符转ASCII码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">19</span>]: ord(<span class="string">'a'</span>)</span><br><span class="line">Out[<span class="number">19</span>]: <span class="number">97</span></span><br></pre></td></tr></table></figure><h5 id="chr"><a href="#chr" class="headerlink" title="chr"></a><code>chr</code></h5><blockquote><p>ASCII码转字符</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: chr(<span class="number">97</span>)</span><br><span class="line">Out[<span class="number">20</span>]: <span class="string">'a'</span></span><br></pre></td></tr></table></figure><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a><code>enumerate</code></h5><blockquote><p>返回一个可以枚举的对象</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">21</span>]: li = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: enumerate(li)</span><br><span class="line">Out[<span class="number">22</span>]: &lt;enumerate at <span class="number">0x7f68aa877d80</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: list(enumerate(li))</span><br><span class="line">Out[<span class="number">23</span>]: [(<span class="number">0</span>, <span class="string">'a'</span>), (<span class="number">1</span>, <span class="string">'b'</span>), (<span class="number">2</span>, <span class="string">'c'</span>), (<span class="number">3</span>, <span class="string">'d'</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: dict(enumerate(li))</span><br><span class="line">Out[<span class="number">24</span>]: &#123;<span class="number">0</span>: <span class="string">'a'</span>, <span class="number">1</span>: <span class="string">'b'</span>, <span class="number">2</span>: <span class="string">'c'</span>, <span class="number">3</span>: <span class="string">'d'</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="eval"><a href="#eval" class="headerlink" title="eval"></a><code>eval</code></h5><blockquote><p>取出字符串中内容</p><p>将字符串str当成有效的表达式来求值并返回计算结果</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">25</span>]: a = <span class="string">"&#123;'a':1&#125;"</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: eval(a)</span><br><span class="line">Out[<span class="number">26</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: b = <span class="string">'1 + 2 + 3'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: eval(b)</span><br><span class="line">Out[<span class="number">28</span>]: <span class="number">6</span></span><br></pre></td></tr></table></figure><h5 id="exec"><a href="#exec" class="headerlink" title="exec"></a><code>exec</code></h5><blockquote><p>执行字符串或complie方法编译过的字符串，没有返回值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: s = <span class="string">'''</span></span><br><span class="line"><span class="string">    ...: z = 10</span></span><br><span class="line"><span class="string">    ...: su = x + y + z</span></span><br><span class="line"><span class="string">    ...: print(su)</span></span><br><span class="line"><span class="string">    ...: print('OK')</span></span><br><span class="line"><span class="string">    ...: '''</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: exec(s)</span><br><span class="line"><span class="number">13</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: exec(s,&#123;<span class="string">'x'</span>:<span class="number">0</span>,<span class="string">'y'</span>:<span class="number">0</span>&#125;)</span><br><span class="line"><span class="number">10</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: exec(s,&#123;<span class="string">'x'</span>:<span class="number">0</span>,<span class="string">'y'</span>:<span class="number">0</span>&#125;,&#123;<span class="string">'y'</span>:<span class="number">10</span>,<span class="string">'z'</span>:<span class="number">0</span>&#125;)  <span class="comment">#以字符串为主,以最后的为主</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><blockquote><p>注意：eval 和 exec 是炸弹 能不能就不用，就好像你从不知道这东西一样，除非你足够的熟悉</p></blockquote><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a><code>filter</code></h5><blockquote><p>过滤器</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">38</span>]: <span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">(x)</span>:</span></span><br><span class="line">    ...:     <span class="keyword">return</span> x&gt;<span class="number">10</span></span><br><span class="line">    ...: l1 = [<span class="number">10</span>,<span class="number">2</span>,<span class="number">20</span>,<span class="number">13</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: filter(test1, l1)</span><br><span class="line">Out[<span class="number">39</span>]: &lt;filter at <span class="number">0x7f68aa7ecb70</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: list(filter(test1, l1))</span><br><span class="line">Out[<span class="number">40</span>]: [<span class="number">20</span>, <span class="number">13</span>]</span><br></pre></td></tr></table></figure><h5 id="map"><a href="#map" class="headerlink" title="map"></a><code>map</code></h5><blockquote><p>对于参数iterable中的每个元素都应用fuction函数，并将结果作为列表返回</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">41</span>]: l2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">42</span>]: map(str,l2)</span><br><span class="line">Out[<span class="number">42</span>]: &lt;map at <span class="number">0x7f68aa7ecba8</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: list(map(str,l2))</span><br><span class="line">Out[<span class="number">43</span>]: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br></pre></td></tr></table></figure><h5 id="zip"><a href="#zip" class="headerlink" title="zip"></a><code>zip</code></h5><blockquote><p>将对象逐一配对</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">44</span>]: l3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: t1 = (<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: zip(t1,l3)</span><br><span class="line">Out[<span class="number">46</span>]: &lt;zip at <span class="number">0x7f68abb3ec48</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: list(zip(t1,l3))</span><br><span class="line">Out[<span class="number">47</span>]: [(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'c'</span>, <span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: dict(zip(t1,l3))</span><br><span class="line">Out[<span class="number">48</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      python函数基础和函数参数
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://yoursite.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python第五话之控制流程</title>
    <link href="http://yoursite.com/2018/12/12/2018-12-12-python-if-while/"/>
    <id>http://yoursite.com/2018/12/12/2018-12-12-python-if-while/</id>
    <published>2018-12-11T16:00:00.000Z</published>
    <updated>2018-12-11T14:26:20.937Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:50 GMT+0800 (GMT+08:00) --><p>[TOC]</p><h3 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h3><p>逻辑值包含了两个值：<br><code>True</code>：表示非空的量(比如：string,tuple.list.set,dictonary等) ，所有非零数 。<br><code>False</code>：表示0,None,空的量等<br><code>作用</code>：主要用于判断语句中，用来判断</p><ul><li>一个字符串是否为空</li><li>一个运算结果是否为零</li><li>一个表达式是否可用</li></ul><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p>条件语句是根据条件来设置程序接下来的走向。</p><p>条件语句的关键字有<code>if，elif，else</code>。</p><h4 id="基本形式："><a href="#基本形式：" class="headerlink" title="基本形式："></a>基本形式：</h4><blockquote><p>if 判断条件:</p><p>执行语句</p><p>else:</p><p>执行语句</p></blockquote><p>判断条件后面和else这个关键字后面都必须加冒号，冒号后面缩进的语句是子语句，多个子语句组成了语句块，如果是单个语句可以与条件写在同一行直接跟在冒号的后面，如果是语句块则一行一条语句，每一行都必须缩进。注意冒号和缩进都是语法的一部分，缩进一般为四个空格。</p><h4 id="单个条件"><a href="#单个条件" class="headerlink" title="单个条件"></a>单个条件</h4><p>这个是针对只有一个判断条件时的，条件满足时就执行缩进的子语句，else就是表示其余的情况，只要条件不满足则执行else后面子语句。判断语句一般是返回值为bool类型的表达式，值为True则是条件满足，值为False则是条件不满足。</p><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a><strong>演示</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'天晴'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> a==<span class="string">'天晴'</span>:</span><br><span class="line">print(<span class="string">'天气好，出去玩吧！'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'天气不好，呆在家吧。。'</span>)</span><br><span class="line"></span><br><span class="line">天气好，出去玩吧！</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'下雨'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> a==<span class="string">'天晴'</span>:</span><br><span class="line">print(<span class="string">'天气好，出去玩吧！'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'天气不好，呆在家吧。。'</span>)</span><br><span class="line"></span><br><span class="line">天气不好，呆在家吧。。</span><br></pre></td></tr></table></figure><h4 id="多个条件"><a href="#多个条件" class="headerlink" title="多个条件"></a>多个条件</h4><p>如果判断需要多个条件需同时判断时，可以使用 or （或），表示两个条件有一个成立时判断条件成功；使用 and （与）时，表示只有两个条件同时成立的情况下，判断条件才成功。</p><h4 id="演示："><a href="#演示：" class="headerlink" title="演示："></a>演示：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">"天晴"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="string">"有空"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> a==<span class="string">"天晴"</span> <span class="keyword">and</span> t==<span class="string">"有空"</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"天气真好，咱们出去玩！！"</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">"天气不好，呆在家吧！！"</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">天气真好，咱们出去玩！！</span><br></pre></td></tr></table></figure><p>对于多条件分支的判断使用elif关键字来用来条件分支的.</p><h4 id="基本形式"><a href="#基本形式" class="headerlink" title="基本形式"></a>基本形式</h4><blockquote><p>if 判断条件1:</p><p>执行语句1</p><p>elif 判断条件2:</p><p>执行语句2</p><p>elif 判断条件n:</p><p>执行语句n</p><p>else:</p><p>执行语句x</p></blockquote><p>写多条件分支时，同一个条件中只能有一个if一个else，对elif的个数没有限制但必须是写在if后面，else放在最后表示以上条件都不满足的情况。满足哪个判断条件就执行这个判断条件对应的执行语句，如果列出的条件都不满足则执行else的子语句，语句的执行顺序是从上到下，遇到满足的条件则直接进入它的子语句块，其他剩余判断条件和子语句将不再进行判断和执行。</p><h4 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'分数等级测试'</span>)</span><br><span class="line">score = input(<span class="string">'请输入你的分数'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="number">90</span>&lt;=int(score)&lt;=<span class="number">100</span>:</span><br><span class="line">    print(<span class="string">'你的等级是A'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">75</span>&lt;=int(score)&lt;<span class="number">90</span>:</span><br><span class="line">    print(<span class="string">'你的等级是B'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">60</span>&lt;=int(score)&lt;<span class="number">75</span>:</span><br><span class="line">    print(<span class="string">'你的等级是C'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">0</span>&lt;=int(score)&lt;<span class="number">60</span>:</span><br><span class="line">    print(<span class="string">'你的等级是D'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'输入有误!'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">运行结果（python shell中显示）：</span><br><span class="line">分数等级测试</span><br><span class="line">请输入你的分数<span class="number">98</span></span><br><span class="line">你的等级是A</span><br></pre></td></tr></table></figure><p>这里使用了内置的函数input()获取键盘的输入，这里会把键盘的输入以字符串的形式赋值给score这个名字，同类型的才可以进行比较，所以后面在进行条件判断时要把score转换成int类型再进行比较。</p><h3 id="三目运算"><a href="#三目运算" class="headerlink" title="三目运算"></a>三目运算</h3><h4 id="演示：-1"><a href="#演示：-1" class="headerlink" title="演示："></a>演示：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">3</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> a&gt;<span class="number">5</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>    print(<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>更简单的写法呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="keyword">True</span>) <span class="keyword">if</span> a&gt;<span class="number">5</span> <span class="keyword">else</span> print(<span class="keyword">False</span>) </span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>####</p><h3 id="条件循环"><a href="#条件循环" class="headerlink" title="条件循环"></a>条件循环</h3><h4 id="while"><a href="#while" class="headerlink" title="while"></a><code>while</code></h4><blockquote><p>语法规则：</p><p>while 判断语句：</p><p>​ 循环体</p><p>注意：注意缩进</p></blockquote><h4 id="演示：-2"><a href="#演示：-2" class="headerlink" title="演示："></a>演示：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">while</span> i &lt; len(li):</span><br><span class="line"><span class="meta">... </span>    print(<span class="keyword">True</span>) <span class="keyword">if</span> li[i]&gt;<span class="number">5</span> <span class="keyword">else</span> print(<span class="keyword">False</span>) </span><br><span class="line"><span class="meta">... </span>    i += <span class="number">1</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>对于刚才值大于5的三目运算，如果是判断一个列表中数字该怎么做呢？</p><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><blockquote><p>跳出循环</p></blockquote><p><strong>演示</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(li):</span><br><span class="line"><span class="keyword">if</span> li[i] &gt; <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">print(li[i])</span><br><span class="line">i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><blockquote><p>跳过此次循环</p></blockquote><p><strong>演示</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(li):</span><br><span class="line">    print(li[i])</span><br><span class="line"><span class="keyword">if</span> li[i] == <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>大家猜测下执行结果。。。。。</p><p>解决上面的问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">i = <span class="number">-1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(li)<span class="number">-1</span>:</span><br><span class="line">    print(li[i])</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> li[i] == <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h4 id="else"><a href="#else" class="headerlink" title="else"></a>else</h4><blockquote><p>当while的条件不满足时，运行。</p><p>注意：break时，不运行</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">i = <span class="number">-1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(li)<span class="number">-1</span>:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> li[i] == <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">print(li[i])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">ok</span><br></pre></td></tr></table></figure><p><strong>演示</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">i = <span class="number">-1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(li)<span class="number">-1</span>:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> li[i] == <span class="number">5</span>:</span><br><span class="line">        <span class="comment"># continue</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">print(li[i])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote><p>循环可以被终止：</p><ul><li>判断语句可以返回 False</li><li>通过break终止循环</li></ul><p>else的执行条件：</p><p>只有在循环不是被break终止的情况下才会执行else中的内容</p></blockquote><h3 id="迭代循环"><a href="#迭代循环" class="headerlink" title="迭代循环"></a>迭代循环</h3><h4 id="for"><a href="#for" class="headerlink" title="for"></a><strong>for</strong></h4><blockquote><p>只要是可迭代对象，都可以使用for循环遍历。</p></blockquote><h4 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h4><blockquote><p>for i in obj：</p><p>​ 循环体</p><p>注意：注意缩进</p></blockquote><p><strong>演示</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h4 id="range"><a href="#range" class="headerlink" title="range"></a><strong>range</strong></h4><p><strong>演示</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure><blockquote><p>内置函数，表示一个范围，不包含结尾值。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: list(range(<span class="number">21</span>))</span><br><span class="line">Out[<span class="number">3</span>]: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>]</span><br><span class="line">    </span><br><span class="line">In [<span class="number">4</span>]: list(range(<span class="number">2</span>, <span class="number">21</span>))</span><br><span class="line">Out[<span class="number">4</span>]: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: list(range(<span class="number">1</span>, <span class="number">21</span>, <span class="number">2</span>))</span><br><span class="line">Out[<span class="number">5</span>]: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure><h4 id="continue-1"><a href="#continue-1" class="headerlink" title="continue"></a><strong>continue</strong></h4><blockquote><p>跳出当前循环</p></blockquote><p><strong>演示</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure><h4 id="break-1"><a href="#break-1" class="headerlink" title="break"></a>break</h4><blockquote><p>跳出循环</p></blockquote><p><strong>演示</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="else-1"><a href="#else-1" class="headerlink" title="else"></a><strong>else</strong></h4><blockquote><p>当for循环结束时，运行。</p><p>注意：break时，不运行</p></blockquote><p><strong>演示</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">print(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'end...'</span>)</span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span></span><br><span class="line">end...</span><br></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h4><blockquote><p>for 后面需要接上可迭代对象</p><p>for会依次取出可迭代对象中的元素</p><p>continue的用法：</p><p>continue和break类似，但是continue不会终止循环，而是结束本次循环，跳到下次循环</p></blockquote><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      python控制流程，循环，条件
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://yoursite.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python第四话之散列类型、运算优先级和逻辑运算</title>
    <link href="http://yoursite.com/2018/12/11/2018-12-11-python-dict-set/"/>
    <id>http://yoursite.com/2018/12/11/2018-12-11-python-dict-set/</id>
    <published>2018-12-10T16:00:00.000Z</published>
    <updated>2018-12-11T14:26:08.255Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:50 GMT+0800 (GMT+08:00) --><p>[TOC]</p><h3 id="散列类型、运算优先级和逻辑运算"><a href="#散列类型、运算优先级和逻辑运算" class="headerlink" title="散列类型、运算优先级和逻辑运算"></a>散列类型、运算优先级和逻辑运算</h3><p><code>散列类型</code>也就是我们所熟知的<code>字典</code>和<code>集合</code>，我们今天来看看散列类型的相关逻辑运算。</p><h3 id="集合（set）"><a href="#集合（set）" class="headerlink" title="集合（set）"></a>集合（set）</h3><h4 id="集合的特点："><a href="#集合的特点：" class="headerlink" title="集合的特点："></a>集合的特点：</h4><p>无序、元素是唯一的。</p><h4 id="集合的创建："><a href="#集合的创建：" class="headerlink" title="集合的创建："></a>集合的创建：</h4><p>用大括号“{}”，各元素之间用逗号隔开；也可以通过类型转换的方式使用set()内置函数将列表或元祖转换为集合类型。在创建的过程中会自动过滤掉重复的元素，保证元素的唯一性。</p><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>]                                              </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: s                                                              </span><br><span class="line">Out[<span class="number">2</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: se = set(s)                                                    </span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: se                                                             </span><br><span class="line">Out[<span class="number">4</span>]: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: type(se)                                                       </span><br><span class="line">Out[<span class="number">5</span>]: set</span><br><span class="line">    </span><br><span class="line">In [<span class="number">6</span>]: &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;                                                  </span><br><span class="line">Out[<span class="number">6</span>]: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：列表是允许元素重复的，但是当我们把列表转成集合后，里面重复的元素就去掉了。</p></blockquote><h4 id="集合的运算"><a href="#集合的运算" class="headerlink" title="集合的运算"></a>集合的运算</h4><p>交集：&amp;</p><p>并集：|</p><p>差集：-</p><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-11/79094336.jpg" alt=""></p><h5 id="交集"><a href="#交集" class="headerlink" title="交集"></a><code>交集</code></h5><p>两个集合(s 和t)的差补或相对补集是指一个集合C，该集合中的元素，只属于集合s，而不属于集合t。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;                                    </span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: s2 = &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;                                           </span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: s1 &amp; s2                                                        </span><br><span class="line">Out[<span class="number">9</span>]: &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="string">'b'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>两个集合取交集，最后输出的元素是属于两个集合所共有的元素。</p></blockquote><h5 id="并集"><a href="#并集" class="headerlink" title="并集"></a><code>并集</code></h5><p>联合(union)操作和集合的OR(又称可兼析取(inclusive disjunction))其实是等价的，两个集合的联合是一个新集合，该集合中的每个元素都至少是其中一个集合的成员，即：属于两个集合其中之一的成员。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: s2 = &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;                                          </span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: s1 | s2                                                       </span><br><span class="line">Out[<span class="number">12</span>]: &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>并集指的是两个集合的元素进行一个整合，最后生成的元素都是属于原来两个集合之中的某一个。</p></blockquote><h5 id="差集"><a href="#差集" class="headerlink" title="差集"></a><code>差集</code></h5><p>和其他的布尔集合操作相似，对称差分是集合的XOR(又称”异 或” (exclusive disjunction)).两个集合(s 和t)的对称差分是指另外一个集合C,该集合中的元素，只能是属于集合s 或者集合t的成员，不能同时属于两个集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">13</span>]: s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: s2 = &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;                                          </span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: s1 - s2                                                       </span><br><span class="line">Out[<span class="number">15</span>]: &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="string">'a'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>差集也叫被减集合的补集。</p></blockquote><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a><code>扩展</code></h5><p><strong>add</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: s1.add(<span class="number">8</span>)                                                     </span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: s1                                                            </span><br><span class="line">Out[<span class="number">18</span>]: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: s1.add(<span class="string">'w'</span>)                                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: s1                                                            </span><br><span class="line">Out[<span class="number">20</span>]: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'w'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>往集合里添加元素。</p></blockquote><p><strong>pop</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">23</span>]: s1                                                            </span><br><span class="line">Out[<span class="number">23</span>]: &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'w'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: s1.pop()                                                      </span><br><span class="line">Out[<span class="number">24</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: s1.pop()                                                      </span><br><span class="line">Out[<span class="number">25</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: s1.pop()                                                      </span><br><span class="line">Out[<span class="number">26</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: s1.pop()                                                      </span><br><span class="line">Out[<span class="number">27</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: s1.pop()                                                      </span><br><span class="line">Out[<span class="number">28</span>]: <span class="number">4</span></span><br></pre></td></tr></table></figure><blockquote><p>pop方法是没有参数的，因为集合是无序的，所以在移除的时候是随机移除的。</p></blockquote><p><strong>remove</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">30</span>]: s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: s1.remove(<span class="number">1</span>)                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: s1                                                            </span><br><span class="line">Out[<span class="number">32</span>]: &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: s1.remove(<span class="string">'a'</span>)                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: s1                                                            </span><br><span class="line">Out[<span class="number">34</span>]: &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'b'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>remove方法是指定元素进行删除。</p></blockquote><p><strong>update</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">35</span>]: s1                                                            </span><br><span class="line">Out[<span class="number">35</span>]: &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'b'</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: s1.update(&#123;<span class="string">'w'</span>, <span class="string">'c'</span>&#125;)                                         </span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: s1                                                            </span><br><span class="line">Out[<span class="number">37</span>]: &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'w'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>update方法是往集合里面添加集合。</p></blockquote><p><strong>isdisjoint</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">38</span>]: s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">39</span>]: s2 = &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;                                          </span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: s1.isdisjoint(s2)                                             </span><br><span class="line">Out[<span class="number">40</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: s1.isdisjoint(&#123;<span class="number">6</span>, <span class="number">8</span>, <span class="number">7</span>&#125;)                                      </span><br><span class="line">Out[<span class="number">41</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p>isdisjoint方法是判断两个集合有没有交集，有返回False，没有则返回True</p></blockquote><p><strong>issubset</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">42</span>]: s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: s2 = &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;                                          </span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: s1.issubset(s2)                                               </span><br><span class="line">Out[<span class="number">44</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: s2.issubset(s1)                                               </span><br><span class="line">Out[<span class="number">45</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: s1.issubset(s1)                                               </span><br><span class="line">Out[<span class="number">46</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: &#123;<span class="number">1</span>, <span class="number">2</span>&#125;.issubset(s1)                                           </span><br><span class="line">Out[<span class="number">47</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: s1                                                            </span><br><span class="line">Out[<span class="number">48</span>]: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>判断前面的集合是不是后面的集合的子集。</p></blockquote><p><strong>issuperset</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">51</span>]: s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>&#125;                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: s2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="string">'b'</span>&#125;                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: s2.issubset(s1)                                               </span><br><span class="line">Out[<span class="number">53</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">54</span>]: s1.issuperset(s2)                                             </span><br><span class="line">Out[<span class="number">54</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p>判断后面的集合是前面集合的子集。</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><ul><li>集合唯一性：集合中的元素具有唯一性，不存在两个相同的元素。</li><li>集合可变性：集合中的元素是可变的，集合是可变对象。</li><li>集合无序性：集合中的元素是无序的，所以没有存在索引。</li></ul></blockquote><h3 id="字典（dict）"><a href="#字典（dict）" class="headerlink" title="字典（dict）"></a>字典（dict）</h3><p>字典是除了列表外的另一种<code>可变类型</code>，字典的元素是以键值对的形式存在，字典的键必须是唯一，可以是数字、字符串或者是元组，键可以为任何不可变类型，列表和集合不能作为字典的键。</p><h4 id="字典的创建"><a href="#字典的创建" class="headerlink" title="字典的创建"></a>字典的创建</h4><p>第一种 { key :value } ，字典里的键和值用“：”隔开，一对键和值组成一个项，项和项之间用“，”隔开。</p><p>第二种使用内置函数dict(key=value)，要注意的是这里使用的是“=”赋值的方式，键是以名字的形式所以这种方法的键就必须符合名字的要求，且不能使用关键字作为键。</p><p>如果你要使用关键字作为键名那么就只能用第一种方法，关键字以字符串的形式来创建。</p><p>通过字典的键可以访问这个键所对应的值，字典是可变类型，所以可以直接对字典的项进行修改，使用dictname[key] = value，如果这个键存在于字典中，则是修改这个键所对应的值，如果这个键不存在则是往字典中添加这个项。</p><h4 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a><strong>演示</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">56</span>]: &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;                                                </span><br><span class="line">Out[<span class="number">56</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: s = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;                                            </span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: s,type(s)                                                     </span><br><span class="line">Out[<span class="number">58</span>]: (&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;, dict)</span><br><span class="line"></span><br><span class="line">In [<span class="number">56</span>]: &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;                                                </span><br><span class="line">Out[<span class="number">56</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: s = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>&#125;                                            </span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: s,type(s)                                                     </span><br><span class="line">Out[<span class="number">58</span>]: (&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;, dict)</span><br></pre></td></tr></table></figure><blockquote><p>字典形式：{key:value}</p></blockquote><h4 id="字典的运用"><a href="#字典的运用" class="headerlink" title="字典的运用"></a>字典的运用</h4><h5 id="查看"><a href="#查看" class="headerlink" title="查看"></a><code>查看</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">67</span>]: a = dict(a=<span class="number">1</span>, b=<span class="number">2</span>)                                            </span><br><span class="line"></span><br><span class="line">In [<span class="number">68</span>]: a                                                             </span><br><span class="line">Out[<span class="number">68</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">69</span>]: a[<span class="string">'a'</span>]                                                        </span><br><span class="line">Out[<span class="number">69</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>由于字典也是无序的，所以我们在取值的时候，是根据key来取出对应的value的。</p></blockquote><h5 id="增加"><a href="#增加" class="headerlink" title="增加"></a><code>增加</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">70</span>]: a                                                             </span><br><span class="line">Out[<span class="number">70</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: a[<span class="string">'c'</span>] = <span class="number">3</span>                                                    </span><br><span class="line"></span><br><span class="line">In [<span class="number">72</span>]: a                                                             </span><br><span class="line">Out[<span class="number">72</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>往字典里添加元素时，是key和value对应增加的。</p></blockquote><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a><code>修改</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">73</span>]: a                                                             </span><br><span class="line">Out[<span class="number">73</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">74</span>]: a[<span class="string">'a'</span>] = <span class="string">'w'</span>                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">75</span>]: a                                                             </span><br><span class="line">Out[<span class="number">75</span>]: &#123;<span class="string">'a'</span>: <span class="string">'w'</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>修改字典是通过key取出value，然后对应的去重新赋值。</p></blockquote><h4 id="字典的增删改查"><a href="#字典的增删改查" class="headerlink" title="字典的增删改查"></a>字典的增删改查</h4><h5 id="增加-1"><a href="#增加-1" class="headerlink" title="增加"></a>增加</h5><p><code>copy</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">76</span>]: a                                                             </span><br><span class="line">Out[<span class="number">76</span>]: &#123;<span class="string">'a'</span>: <span class="string">'w'</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">77</span>]: b = a.copy()                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">78</span>]: b                                                             </span><br><span class="line">Out[<span class="number">78</span>]: &#123;<span class="string">'a'</span>: <span class="string">'w'</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>复制成一个新字典。</p></blockquote><p><code>fromkeys</code></p><p>查看fromkeys的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">79</span>]: help(a.fromkeys)</span><br></pre></td></tr></table></figure><blockquote><p>fromkeys(iterable, value=None, /) method of builtins.type instance Returns a new dict with keys from iterable and values equal to value.</p><p>注意： 返回一个新的dict，其中包含来自iterable的键，值等于value。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">93</span>]: a                                                             </span><br><span class="line">Out[<span class="number">93</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">94</span>]: s = a.fromkeys([<span class="string">'c'</span>, <span class="string">'d'</span>])                                    </span><br><span class="line"></span><br><span class="line">In [<span class="number">95</span>]: s                                                             </span><br><span class="line">Out[<span class="number">95</span>]: &#123;<span class="string">'c'</span>: <span class="keyword">None</span>, <span class="string">'d'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">96</span>]: s = a.fromkeys([<span class="string">'c'</span>, <span class="string">'d'</span>], <span class="number">7</span>)                                 </span><br><span class="line"></span><br><span class="line">In [<span class="number">97</span>]: s                                                             </span><br><span class="line">Out[<span class="number">97</span>]: &#123;<span class="string">'c'</span>: <span class="number">7</span>, <span class="string">'d'</span>: <span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用fromkey方法的时候，原字典是不变的，会返回一个新的字典。</p></blockquote><p><code>setfefault</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">103</span>]: a                                                            </span><br><span class="line">Out[<span class="number">103</span>]: &#123;<span class="string">'a'</span>: <span class="string">'w'</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">104</span>]: a.setdefault(<span class="string">'a'</span>)                                            </span><br><span class="line">Out[<span class="number">104</span>]: <span class="string">'w'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">105</span>]: a.setdefault(<span class="string">'b'</span>)                                            </span><br><span class="line">Out[<span class="number">105</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">106</span>]: a.setdefault(<span class="string">'c'</span>)                                            </span><br><span class="line"></span><br><span class="line">In [<span class="number">107</span>]: a                                                            </span><br><span class="line">Out[<span class="number">107</span>]: &#123;<span class="string">'a'</span>: <span class="string">'w'</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">108</span>]: a.setdefault(<span class="string">'d'</span>, <span class="number">4</span>)                                         </span><br><span class="line">Out[<span class="number">108</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">109</span>]: a                                                            </span><br><span class="line">Out[<span class="number">109</span>]: &#123;<span class="string">'a'</span>: <span class="string">'w'</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="keyword">None</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>查询并返回key所对应的值，如果没有这个key,则会新建。有则查，无则增。</p></blockquote><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><p><code>clear</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">110</span>]: a                                                            </span><br><span class="line">Out[<span class="number">110</span>]: &#123;<span class="string">'a'</span>: <span class="string">'w'</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="keyword">None</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">111</span>]: a.clear()                                                    </span><br><span class="line"></span><br><span class="line">In [<span class="number">112</span>]: a                                                            </span><br><span class="line">Out[<span class="number">112</span>]: &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>删除所有键值对</p></blockquote><p><code>pop</code></p><p>查看pop 的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">121</span>]: help(a.pop)</span><br></pre></td></tr></table></figure><blockquote><p>pop(…) method of builtins.dict instance<br>​ D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.<br>​ If key is not found, d is returned if given, otherwise KeyError is raised</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">116</span>]: a                                                            </span><br><span class="line">Out[<span class="number">116</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">117</span>]: a.pop(<span class="string">'a'</span>)                                                   </span><br><span class="line">Out[<span class="number">117</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">118</span>]: a                                                            </span><br><span class="line">Out[<span class="number">118</span>]: &#123;<span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">119</span>]: a.pop(<span class="string">'d'</span>)                                                   </span><br><span class="line">Out[<span class="number">119</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">120</span>]: a.pop()                                                      </span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line">TypeError                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-120</span><span class="number">-9</span>c070c907602&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 a.pop()</span><br><span class="line"></span><br><span class="line">TypeError: pop expected at least <span class="number">1</span> arguments, got <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>pop方法是删除指定的键并返回相应的值。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">134</span>]: a                                                            </span><br><span class="line">Out[<span class="number">134</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">135</span>]: a.pop(<span class="string">'c'</span>, <span class="string">'b'</span>)                                              </span><br><span class="line">Out[<span class="number">135</span>]: <span class="string">'b'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">136</span>]: a.pop(<span class="string">'a'</span>, <span class="string">'b'</span>)                                              </span><br><span class="line">Out[<span class="number">136</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">137</span>]: a                                                            </span><br><span class="line">Out[<span class="number">137</span>]: &#123;<span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果传入两个值，第一个是key，第二个是一个值，如果找到key, 就删除对应键值对，并返回该值，如果没有找到key,就返回你所传入的第二个值。</p></blockquote><p><code>popitem</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">140</span>]: a                                                            </span><br><span class="line">Out[<span class="number">140</span>]: &#123;<span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'d'</span>: <span class="number">4</span>, <span class="string">'s'</span>: <span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">141</span>]: a.popitem()                                                  </span><br><span class="line">Out[<span class="number">141</span>]: (<span class="string">'s'</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">142</span>]: a.popitem()                                                  </span><br><span class="line">Out[<span class="number">142</span>]: (<span class="string">'d'</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">143</span>]: a                                                            </span><br><span class="line">Out[<span class="number">143</span>]: &#123;<span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于字典也是无序的，多以popitem是随机删除一个键值对。</p></blockquote><h5 id="修改-1"><a href="#修改-1" class="headerlink" title="修改"></a>修改</h5><p><code>update</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">145</span>]: a                                                            </span><br><span class="line">Out[<span class="number">145</span>]: &#123;<span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">146</span>]: a.update(&#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'c'</span>:<span class="number">4</span>, <span class="string">'s'</span>: <span class="number">9</span>&#125;)                             </span><br><span class="line"></span><br><span class="line">In [<span class="number">147</span>]: a                                                            </span><br><span class="line">Out[<span class="number">147</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">4</span>, <span class="string">'s'</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">148</span>]: a.update(&#123;<span class="string">'a'</span>:<span class="number">0</span>&#125;)                                            </span><br><span class="line"></span><br><span class="line">In [<span class="number">149</span>]: a                                                            </span><br><span class="line">Out[<span class="number">149</span>]: &#123;<span class="string">'a'</span>: <span class="number">0</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">4</span>, <span class="string">'s'</span>: <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>update方法，对于键值对的处理是，有则改，无则增。</p></blockquote><h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><p><code>get</code></p><p>查看get的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">155</span>]: help(a.get)</span><br></pre></td></tr></table></figure><blockquote><p>get(…) method of builtins.dict instance<br>​ D.get(k[,d]) -&gt; D[k] if k in D, else d. d defaults to None.</p><p>注意：默认返回None</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">151</span>]: a                                                            </span><br><span class="line">Out[<span class="number">151</span>]: &#123;<span class="string">'a'</span>: <span class="number">0</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">4</span>, <span class="string">'s'</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">152</span>]: a.get(<span class="string">'a'</span>)                                                   </span><br><span class="line">Out[<span class="number">152</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">153</span>]: a.get(<span class="string">'f'</span>)                                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">154</span>]: a.get(<span class="string">'f'</span>, <span class="string">"没有"</span>)                                           </span><br><span class="line">Out[<span class="number">154</span>]: <span class="string">'没有'</span></span><br></pre></td></tr></table></figure><blockquote><p>get方法是如果查询到key就返回对应的value，如果没有，就返回你给定的提示值。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">156</span>]: c,d = a.get(<span class="string">'f'</span>, (<span class="number">2</span>,<span class="number">3</span>))                                      </span><br><span class="line"></span><br><span class="line">In [<span class="number">157</span>]: c                                                            </span><br><span class="line">Out[<span class="number">157</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">158</span>]: d                                                            </span><br><span class="line">Out[<span class="number">158</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure><blockquote><p>也可以通过这个功能，做些操作。</p></blockquote><p><code>keys</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">159</span>]: a                                                            </span><br><span class="line">Out[<span class="number">159</span>]: &#123;<span class="string">'a'</span>: <span class="number">0</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">4</span>, <span class="string">'s'</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">160</span>]: a.keys()                                                     </span><br><span class="line">Out[<span class="number">160</span>]: dict_keys([<span class="string">'s'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">161</span>]: list(a.keys())                                               </span><br><span class="line">Out[<span class="number">161</span>]: [<span class="string">'s'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>获取字典里所有的key。</p></blockquote><p><code>value</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">162</span>]: a                                                            </span><br><span class="line">Out[<span class="number">162</span>]: &#123;<span class="string">'a'</span>: <span class="number">0</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">4</span>, <span class="string">'s'</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">163</span>]: a.values()                                                   </span><br><span class="line">Out[<span class="number">163</span>]: dict_values([<span class="number">9</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">164</span>]: list(a.values())                                             </span><br><span class="line">Out[<span class="number">164</span>]: [<span class="number">9</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><blockquote><p>获取所有的value。</p></blockquote><p><code>items</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">165</span>]: a                                                            </span><br><span class="line">Out[<span class="number">165</span>]: &#123;<span class="string">'a'</span>: <span class="number">0</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">4</span>, <span class="string">'s'</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">166</span>]: a.items()                                                    </span><br><span class="line">Out[<span class="number">166</span>]: dict_items([(<span class="string">'s'</span>, <span class="number">9</span>), (<span class="string">'a'</span>, <span class="number">0</span>), (<span class="string">'c'</span>, <span class="number">4</span>), (<span class="string">'b'</span>, <span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line">In [<span class="number">167</span>]: list(a.items())                                              </span><br><span class="line">Out[<span class="number">167</span>]: [(<span class="string">'s'</span>, <span class="number">9</span>), (<span class="string">'a'</span>, <span class="number">0</span>), (<span class="string">'c'</span>, <span class="number">4</span>), (<span class="string">'b'</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure><blockquote><p>获取所有的键值对。</p></blockquote><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><blockquote><ul><li>键（key）唯一性： 字典中的键（key）具有唯一性，不存在两个相同的键（key）</li><li>可变性： 字典是可变对象，但是自动减的键（key）必须是不可变对象</li><li>无序性：字典中的键也是无序的，所以不能通过索引取值。</li></ul></blockquote><h3 id="运算符及优先级"><a href="#运算符及优先级" class="headerlink" title="运算符及优先级"></a>运算符及优先级</h3><h4 id="Python中的运算符"><a href="#Python中的运算符" class="headerlink" title="Python中的运算符"></a>Python中的运算符</h4><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-11/41589190.jpg" alt="1"></p><h4 id="演示："><a href="#演示：" class="headerlink" title="演示："></a>演示：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">168</span>]: <span class="number">2</span> **<span class="number">3</span>                                                        </span><br><span class="line">Out[<span class="number">168</span>]: <span class="number">8</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">169</span>]: <span class="number">2</span>+<span class="number">2</span>                                                          </span><br><span class="line">Out[<span class="number">169</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">170</span>]: <span class="number">2</span><span class="number">-1</span>                                                          </span><br><span class="line">Out[<span class="number">170</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">171</span>]: <span class="number">2</span>&lt;<span class="number">2</span>                                                          </span><br><span class="line">Out[<span class="number">171</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">172</span>]: <span class="number">2</span>&gt;<span class="number">20</span>                                                         </span><br><span class="line">Out[<span class="number">172</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">173</span>]: <span class="number">3</span>&lt;=(<span class="number">1</span>+<span class="number">2</span>)                                                     </span><br><span class="line">Out[<span class="number">173</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">174</span>]: <span class="number">5</span>&gt;=<span class="number">1</span>                                                         </span><br><span class="line">Out[<span class="number">174</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">175</span>]: <span class="number">2</span>==<span class="number">2</span>                                                         </span><br><span class="line">Out[<span class="number">175</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">176</span>]: <span class="number">2</span>!=<span class="number">2</span>                                                         </span><br><span class="line">Out[<span class="number">176</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">177</span>]: a =<span class="number">1</span> </span><br><span class="line">In [<span class="number">181</span>]: <span class="number">8</span> %<span class="number">2</span>                                                         </span><br><span class="line">Out[<span class="number">181</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">182</span>]: a                                                            </span><br><span class="line">Out[<span class="number">182</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">183</span>]: a += <span class="number">1</span>                                                       </span><br><span class="line"></span><br><span class="line">In [<span class="number">184</span>]: a                                                            </span><br><span class="line">Out[<span class="number">184</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">185</span>]: a /= <span class="number">1.2</span>                                                     </span><br><span class="line"></span><br><span class="line">In [<span class="number">186</span>]: a                                                            </span><br><span class="line">Out[<span class="number">186</span>]: <span class="number">1.6666666666666667</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">187</span>]: a %= <span class="number">1</span>                                                       </span><br><span class="line"></span><br><span class="line">In [<span class="number">188</span>]: a                                                            </span><br><span class="line">Out[<span class="number">188</span>]: <span class="number">0.6666666666666667</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">189</span>]: a = <span class="number">1</span>                                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">190</span>]: b = a                                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">191</span>]: a <span class="keyword">is</span> b  <span class="comment"># 判断是否是id一致                                                      </span></span><br><span class="line">Out[<span class="number">191</span>]: <span class="keyword">True</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">192</span>]: <span class="number">1</span> <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>]                                                  </span><br><span class="line">Out[<span class="number">192</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">193</span>]: <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>]                                              </span><br><span class="line">Out[<span class="number">193</span>]: <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><h5 id="查看对象类型"><a href="#查看对象类型" class="headerlink" title="查看对象类型"></a>查看对象类型</h5><p><code>type</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">204</span>]: a = <span class="number">1</span>                                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">205</span>]: b = <span class="string">'s'</span>                                                      </span><br><span class="line"></span><br><span class="line">In [<span class="number">206</span>]: c = [<span class="number">1</span>, <span class="number">2</span>]                                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">207</span>]: type(a), type(b), type(c)                                    </span><br><span class="line">Out[<span class="number">207</span>]: (int, str, list)</span><br></pre></td></tr></table></figure><blockquote><p>直接返回对象的类型</p></blockquote><p><code>isinstance</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">208</span>]: a                                                            </span><br><span class="line">Out[<span class="number">208</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">209</span>]: b                                                            </span><br><span class="line">Out[<span class="number">209</span>]: <span class="string">'s'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">210</span>]: c                                                            </span><br><span class="line">Out[<span class="number">210</span>]: [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">211</span>]: isinstance(a, int)                                           </span><br><span class="line">Out[<span class="number">211</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">212</span>]: isinstance(a, str)                                           </span><br><span class="line">Out[<span class="number">212</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">213</span>]: isinstance(b, str)                                           </span><br><span class="line">Out[<span class="number">213</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p>判断对象的类型</p></blockquote><h5 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">216</span>]: a = <span class="number">1</span>                                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">217</span>]: b = <span class="number">2</span>                                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">218</span>]: c = <span class="number">1</span>                                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">219</span>]: a == b                                                       </span><br><span class="line">Out[<span class="number">219</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">220</span>]: a == c                                                       </span><br><span class="line">Out[<span class="number">220</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">221</span>]: b != c                                                       </span><br><span class="line">Out[<span class="number">221</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h5 id="如果有多个条件"><a href="#如果有多个条件" class="headerlink" title="如果有多个条件"></a>如果有多个条件</h5><blockquote><ul><li>判断语句1 and 判断语句2</li><li>判断语句1 or 判断语句2</li><li>not 判断语句1</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">227</span>]: a==b <span class="keyword">and</span> b!=c                                                </span><br><span class="line">Out[<span class="number">227</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">228</span>]: a==b <span class="keyword">or</span> b!=c                                                 </span><br><span class="line">Out[<span class="number">228</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">229</span>]: <span class="keyword">not</span> a==b                                                     </span><br><span class="line">Out[<span class="number">229</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      python散列类型、运算优先级和逻辑运算，字典，集合的增删改查
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://yoursite.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python第三话之格式化输出和深浅复制</title>
    <link href="http://yoursite.com/2018/12/09/2018-12-8-python-output/"/>
    <id>http://yoursite.com/2018/12/09/2018-12-8-python-output/</id>
    <published>2018-12-08T16:00:00.000Z</published>
    <updated>2018-12-11T14:25:36.775Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:50 GMT+0800 (GMT+08:00) --><p>[TOC]</p><h3 id="格式化输出和深浅拷贝"><a href="#格式化输出和深浅拷贝" class="headerlink" title="格式化输出和深浅拷贝"></a>格式化输出和深浅拷贝</h3><p>前面我熟悉了<code>列表</code>、<code>字符串</code>、<code>元组</code>的常用操作以及对应的<code>增删改查</code>，今天我们来深入了解<code>格式化输出</code>和<code>深浅复制</code>相关的知识点。</p><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><h4 id="传统方法"><a href="#传统方法" class="headerlink" title="传统方法"></a>传统方法</h4><h5 id="s"><a href="#s" class="headerlink" title="%s"></a><code>%s</code></h5><blockquote><p>%字符串</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: a = <span class="string">'hello'</span>                                                    </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: b = <span class="string">'python '</span>                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="string">"%s %s"</span> %(a, b)                                                </span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">'hello python '</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: c = <span class="number">123</span>                                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: <span class="string">"%s %s"</span> %(a, c)                                                </span><br><span class="line">Out[<span class="number">5</span>]: <span class="string">'hello 123'</span></span><br></pre></td></tr></table></figure><h5 id="d"><a href="#d" class="headerlink" title="%d"></a><code>%d</code></h5><blockquote><p>%数字</p><p>注意：只能传入数字</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: a = <span class="string">'hello'</span>                                                    </span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: b = <span class="string">'python '</span>                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: c = <span class="number">123</span>                                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: <span class="string">"%d %d"</span> %(a, c)                                                </span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line">TypeError                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-9</span><span class="number">-2</span>d6d5e198328&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 "%d %d" %(a, c)</span><br><span class="line"></span><br><span class="line">TypeError: %d format: a number <span class="keyword">is</span> required, <span class="keyword">not</span> str</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="string">"%d %d"</span> %(c, c)                                               </span><br><span class="line">Out[<span class="number">10</span>]: <span class="string">'123 123'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: <span class="string">"%d"</span>%<span class="number">123.34</span>                                                   </span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">'123'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: <span class="string">"%d %d"</span> %(<span class="number">123</span>, <span class="number">123.34</span>)                                        </span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'123 123'</span></span><br></pre></td></tr></table></figure><h5 id="f"><a href="#f" class="headerlink" title="%f"></a><code>%f</code></h5><blockquote><p>%浮点数</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: <span class="string">'%f'</span>%<span class="number">2.3</span>                                                      </span><br><span class="line">Out[<span class="number">14</span>]: <span class="string">'2.300000'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: <span class="string">'%.2f'</span>%<span class="number">2.3</span>                                                    </span><br><span class="line">Out[<span class="number">15</span>]: <span class="string">'2.30'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: <span class="string">'%.2f'</span>%<span class="number">2.333434</span>                                               </span><br><span class="line">Out[<span class="number">16</span>]: <span class="string">'2.33'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: <span class="string">'%.2f'</span>%<span class="number">2.35</span>                                                   </span><br><span class="line">Out[<span class="number">17</span>]: <span class="string">'2.35'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: <span class="string">'%.2f'</span>%<span class="number">2.36</span>                                                   </span><br><span class="line">Out[<span class="number">18</span>]: <span class="string">'2.36'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: <span class="string">'%.3f'</span>%<span class="number">2.36</span>                                                   </span><br><span class="line">Out[<span class="number">19</span>]: <span class="string">'2.360'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: <span class="string">'%.4f'</span>%<span class="number">2.36</span>                                                   </span><br><span class="line">Out[<span class="number">20</span>]: <span class="string">'2.3600'</span></span><br></pre></td></tr></table></figure><h5 id="c"><a href="#c" class="headerlink" title="%c"></a><code>%c</code></h5><blockquote><p>%ASCII字符</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">21</span>]: <span class="string">'%c'</span>%<span class="number">97</span>                                                       </span><br><span class="line">Out[<span class="number">21</span>]: <span class="string">'a'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: <span class="string">'%c'</span>%<span class="number">65</span>                                                       </span><br><span class="line">Out[<span class="number">22</span>]: <span class="string">'A'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: <span class="string">'%c'</span>%<span class="number">61</span>                                                       </span><br><span class="line">Out[<span class="number">23</span>]: <span class="string">'='</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: <span class="string">'%c'</span>%<span class="number">60</span>                                                       </span><br><span class="line">Out[<span class="number">24</span>]: <span class="string">'&lt;'</span></span><br></pre></td></tr></table></figure><h5 id="o"><a href="#o" class="headerlink" title="%o"></a><code>%o</code></h5><blockquote><p>%8进制</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">25</span>]: <span class="string">'%o'</span>%<span class="number">9</span>                               </span><br><span class="line">Out[<span class="number">25</span>]: <span class="string">'11'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: <span class="string">'%o'</span>%<span class="number">10</span>                              </span><br><span class="line">Out[<span class="number">26</span>]: <span class="string">'12'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: <span class="string">'%o'</span>%<span class="number">107</span>                             </span><br><span class="line">Out[<span class="number">27</span>]: <span class="string">'153'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: <span class="string">'%o'</span>%<span class="number">17</span>                              </span><br><span class="line">Out[<span class="number">28</span>]: <span class="string">'21'</span></span><br></pre></td></tr></table></figure><h5 id="x"><a href="#x" class="headerlink" title="%x"></a><code>%x</code></h5><blockquote><p>%16进制</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">29</span>]: <span class="string">'%x'</span>%<span class="number">16</span>                              </span><br><span class="line">Out[<span class="number">29</span>]: <span class="string">'10'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: <span class="string">'%x'</span>%<span class="number">15</span>                              </span><br><span class="line">Out[<span class="number">30</span>]: <span class="string">'f'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: <span class="string">'%x'</span>%<span class="number">14</span>                              </span><br><span class="line">Out[<span class="number">31</span>]: <span class="string">'e'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: <span class="string">'%x'</span>%<span class="number">10</span>                              </span><br><span class="line">Out[<span class="number">32</span>]: <span class="string">'a'</span></span><br></pre></td></tr></table></figure><h5 id="e"><a href="#e" class="headerlink" title="%e"></a><code>%e</code></h5><blockquote><p>%科学计数法</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">33</span>]: <span class="string">'%e'</span>%<span class="number">0.01</span>                            </span><br><span class="line">Out[<span class="number">33</span>]: <span class="string">'1.000000e-02'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: <span class="string">'%e'</span>%<span class="number">0.001</span>                           </span><br><span class="line">Out[<span class="number">34</span>]: <span class="string">'1.000000e-03'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: <span class="string">'%e'</span>%<span class="number">10</span>                              </span><br><span class="line">Out[<span class="number">35</span>]: <span class="string">'1.000000e+01'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: <span class="string">'%e'</span>%<span class="number">100</span>                             </span><br><span class="line">Out[<span class="number">36</span>]: <span class="string">'1.000000e+02'</span></span><br></pre></td></tr></table></figure><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a><code>扩展</code></h5><p><strong>%r</strong></p><blockquote><p>原始化</p></blockquote><p>演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">43</span>]: print(<span class="string">'%s'</span>%<span class="string">'123'</span>)                    </span><br><span class="line"><span class="number">123</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: print(<span class="string">'%r'</span>%<span class="string">'123'</span>)                    </span><br><span class="line"><span class="string">'123'</span></span><br></pre></td></tr></table></figure><p><strong>%+6.5f</strong></p><blockquote><p>规定输出的字符串的个数和输出小数的位数</p><p>注意：%6.5f 指的是一个输出6个字符，其中5个小数</p><p>如果：前面带+就是表示输出符号</p><p>​ 前面带-号表示左对齐</p></blockquote><p>演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">46</span>]: <span class="string">'%5.3f'</span>%<span class="number">1.2</span>                          </span><br><span class="line">Out[<span class="number">46</span>]: <span class="string">'1.200'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: <span class="string">'%6.3f'</span>%<span class="number">1.2</span>                          </span><br><span class="line">Out[<span class="number">47</span>]: <span class="string">' 1.200'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: <span class="string">'%6.3f'</span>%<span class="number">12.34567</span>                     </span><br><span class="line">Out[<span class="number">48</span>]: <span class="string">'12.346'</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">49</span>]: <span class="string">'%+6.3f'</span>%<span class="number">12.34567</span>                    </span><br><span class="line">Out[<span class="number">49</span>]: <span class="string">'+12.346'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: <span class="string">'%+6.3f'</span>%<span class="number">-12.34567</span>                   </span><br><span class="line">Out[<span class="number">50</span>]: <span class="string">'-12.346'</span></span><br><span class="line">    </span><br><span class="line">In [<span class="number">60</span>]: <span class="string">'%8.2f'</span>%<span class="number">13.3333</span>                      </span><br><span class="line">Out[<span class="number">60</span>]: <span class="string">'   13.33'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">61</span>]: <span class="string">'%-8.2f'</span>%<span class="number">13.3333</span>                     </span><br><span class="line">Out[<span class="number">61</span>]: <span class="string">'13.33   '</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">62</span>]: <span class="string">'%08.2f'</span>%<span class="number">13.3333</span>                     </span><br><span class="line">Out[<span class="number">62</span>]: <span class="string">'00013.33'</span></span><br></pre></td></tr></table></figure><h4 id="Python方法"><a href="#Python方法" class="headerlink" title="Python方法"></a><strong>Python方法</strong></h4><p>在Python中我们一般使用<code>format</code>来进行格式化输出</p><h5 id="format"><a href="#format" class="headerlink" title="format"></a><code>format</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">67</span>]: <span class="string">'&#123;:.2f&#125;'</span>.format(<span class="number">12.333</span>)              </span><br><span class="line">Out[<span class="number">67</span>]: <span class="string">'12.33'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">68</span>]: <span class="string">'&#123;a:.2f&#125;'</span>.format(a=<span class="number">12.333</span>)           </span><br><span class="line">Out[<span class="number">68</span>]: <span class="string">'12.33'</span></span><br></pre></td></tr></table></figure><blockquote><p>保留两位小数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">70</span>]: <span class="string">'&#123;:.2%&#125;'</span>.format(<span class="number">0.001</span>)               </span><br><span class="line">Out[<span class="number">70</span>]: <span class="string">'0.10%'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: <span class="string">'&#123;:.2%&#125;'</span>.format(<span class="number">0.61</span>)                </span><br><span class="line">Out[<span class="number">71</span>]: <span class="string">'61.00%'</span></span><br></pre></td></tr></table></figure><blockquote><p>百分比格式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">72</span>]: <span class="string">'&#123;0:x&#125;'</span>.format(<span class="number">20</span>)                   </span><br><span class="line">Out[<span class="number">72</span>]: <span class="string">'14'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: <span class="string">'&#123;0:x&#125;'</span>.format(<span class="number">10</span>)                   </span><br><span class="line">Out[<span class="number">73</span>]: <span class="string">'a'</span></span><br></pre></td></tr></table></figure><blockquote><p>转换成十六进制</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">74</span>]: <span class="string">'&#123;0:o&#125;'</span>.format(<span class="number">20</span>)                   </span><br><span class="line">Out[<span class="number">74</span>]: <span class="string">'24'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">75</span>]: <span class="string">'&#123;0:o&#125;'</span>.format(<span class="number">10</span>)                   </span><br><span class="line">Out[<span class="number">75</span>]: <span class="string">'12'</span></span><br></pre></td></tr></table></figure><blockquote><p>转换成8进制</p></blockquote><blockquote><p>注意：进制转换时使用{0:进制}这个格式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">76</span>]: <span class="string">'&#123;a:&lt;10&#125;'</span>.format(a=<span class="number">12.3</span>,b=<span class="number">13.44</span>)     </span><br><span class="line">Out[<span class="number">76</span>]: <span class="string">'12.3      '</span></span><br></pre></td></tr></table></figure><blockquote><p>左对齐，长度为10</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">77</span>]: <span class="string">'&#123;a:0&lt;10&#125;'</span>.format(a=<span class="number">12.3</span>,b=<span class="number">13.44</span>)    </span><br><span class="line">    ...:                                      </span><br><span class="line">Out[<span class="number">77</span>]: <span class="string">'12.3000000'</span></span><br></pre></td></tr></table></figure><blockquote><p>数字补x(填充右边，宽度为4)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">78</span>]: <span class="string">'&#123;a:0&gt;10&#125;'</span>.format(a=<span class="number">12.3</span>,b=<span class="number">13.44</span>)    </span><br><span class="line">Out[<span class="number">78</span>]: <span class="string">'00000012.3'</span></span><br></pre></td></tr></table></figure><blockquote><p>右对齐，长度为10</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">79</span>]: <span class="string">'&#123;a:0^10&#125;'</span>.format(a=<span class="number">12.3</span>,b=<span class="number">13.44</span>)    </span><br><span class="line">Out[<span class="number">79</span>]: <span class="string">'00012.3000'</span></span><br></pre></td></tr></table></figure><blockquote><p>两边对齐， 长度为10</p></blockquote><h3 id="字符串转义"><a href="#字符串转义" class="headerlink" title="字符串转义"></a>字符串转义</h3><p>字符前面加上 \ ，字符就不再表示字符本身的意思，表示ASCII码中不能显示字符，常见有下：</p><h5 id="n"><a href="#n" class="headerlink" title="\n"></a><code>\n</code></h5><blockquote><p>换行</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">83</span>]: print(<span class="string">'abc\nabc'</span>)                    </span><br><span class="line">abc</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><h5 id="t"><a href="#t" class="headerlink" title="\t"></a><code>\t</code></h5><blockquote><p>水平制表符</p></blockquote><p><strong>演示</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">84</span>]: print(<span class="string">'abc\tabc'</span>)                    </span><br><span class="line">abcabc</span><br></pre></td></tr></table></figure><h5 id="b"><a href="#b" class="headerlink" title="\b"></a><code>\b</code></h5><blockquote><p>退格</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">85</span>]: print(<span class="string">'abc\babc'</span>)                    </span><br><span class="line">ababc</span><br></pre></td></tr></table></figure><h5 id="r"><a href="#r" class="headerlink" title="\r"></a><code>\r</code></h5><blockquote><p>回车，当前位置移到本行开头</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">87</span>]: print(<span class="string">'abc\rbc'</span>)                     </span><br><span class="line">bcc</span><br></pre></td></tr></table></figure><h5><a href="#" class="headerlink" title="\"></a><code>\</code></h5><blockquote><p>代表反斜杠 \</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">88</span>]: print(<span class="string">'abc\\bc'</span>)                     </span><br><span class="line">abc\bc</span><br></pre></td></tr></table></figure><h5 id="’"><a href="#’" class="headerlink" title="\’"></a><code>\’</code></h5><blockquote><p>代表一个单引号，同样的 “ ？ 等符号也可以这么输出</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">95</span>]: print(<span class="string">'abc\' \"b c'</span>)                 </span><br><span class="line">abc<span class="string">' "b c</span></span><br></pre></td></tr></table></figure><h5 id="0"><a href="#0" class="headerlink" title="\0"></a><code>\0</code></h5><blockquote><p>代表一个空字符</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">96</span>]: print(<span class="string">'abc\0abc'</span>)                    </span><br><span class="line">abcabc</span><br><span class="line"></span><br><span class="line">In [<span class="number">97</span>]: print(<span class="string">'abc\0\0abc'</span>)                  </span><br><span class="line">abcabc</span><br></pre></td></tr></table></figure><h5 id="a"><a href="#a" class="headerlink" title="\a"></a><code>\a</code></h5><blockquote><p>系统提示音(交互环境需使用print)</p></blockquote><h5 id="取消转义"><a href="#取消转义" class="headerlink" title="取消转义"></a><code>取消转义</code></h5><blockquote><p>在python中如果要去掉字符串的转义，只需要在字符串前面加上 r</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">104</span>]: print(<span class="string">r'abc\b\t\nabc'</span>)              </span><br><span class="line">abc\b\t\nabc</span><br></pre></td></tr></table></figure><h3 id="格式化和转义的应用"><a href="#格式化和转义的应用" class="headerlink" title="格式化和转义的应用"></a>格式化和转义的应用</h3><p>格式化得到的结果都是字符串，通过把位置预先留出来，后期再往其中填入内容可以让输出内容更加整洁美观，而又具有良好的可读性，同时让代码更简洁精练。</p><p>字符串的转义可以方便我们表示我们不太方便表示的字符，同时转义有些情况下又会带来麻烦，特别是在表示路径的时候，这种情况下可以在字符串前面加上 r 来去掉字符串的转义。</p><h3 id="字符串编码"><a href="#字符串编码" class="headerlink" title="字符串编码"></a>字符串编码</h3><p>对于编码这部分，我们先举个栗子来看看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">105</span>]: <span class="string">'你好'</span>.encode(<span class="string">'utf-8'</span>)                  </span><br><span class="line">Out[<span class="number">105</span>]: <span class="string">b'\xe4\xbd\xa0\xe5\xa5\xbd'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">106</span>]: <span class="string">'你好'</span>.encode(<span class="string">'gbk'</span>)                    </span><br><span class="line">Out[<span class="number">106</span>]: <span class="string">b'\xc4\xe3\xba\xc3'</span></span><br></pre></td></tr></table></figure><p>我们可以通过不同的编码方式来进行编码以便我们在不同情况下使用，接下来我们来看看编码相关的知识点</p><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-8/6179178.jpg" alt="1"></p><h4 id="Python对于字符集的处理"><a href="#Python对于字符集的处理" class="headerlink" title="Python对于字符集的处理"></a>Python对于字符集的处理</h4><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-8/45812485.jpg" alt=""></p><h4 id="字符编码的作用"><a href="#字符编码的作用" class="headerlink" title="字符编码的作用"></a>字符编码的作用</h4><p>Python统一了编码，这样Python在内部处理的时候不会因编码不同而出现程序不能正常执行的问题。</p><p>Python会自动根据系统环境选择编码，但是经常在文件传输的过程中，会遇到各种不同的编码，这个时候就需要我们去处理编码问题。</p><h3 id="深浅复制"><a href="#深浅复制" class="headerlink" title="深浅复制"></a>深浅复制</h3><p>举个栗子看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">107</span>]: s = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]                           </span><br><span class="line"></span><br><span class="line">In [<span class="number">108</span>]: s2 = [<span class="string">'a'</span>, s]                           </span><br><span class="line"></span><br><span class="line">In [<span class="number">109</span>]: s2                                      </span><br><span class="line">Out[<span class="number">109</span>]: [<span class="string">'a'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">111</span>]: id(s), id(s2), id(s2[<span class="number">1</span>])                                     </span><br><span class="line">Out[<span class="number">111</span>]: (<span class="number">139956880001800</span>, <span class="number">139956880021256</span>, <span class="number">139956880001800</span>)</span><br></pre></td></tr></table></figure><blockquote><p>我们可以看出来，s2只是引用了s的值，s2[1]的值会随着s的变化而变化。</p></blockquote><h4 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a>浅复制</h4><p>举个栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">136</span>]: s = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">137</span>]: s2 = [<span class="string">'a'</span>, s]                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">138</span>]: s3 = s2.copy()                                               </span><br><span class="line"></span><br><span class="line">In [<span class="number">139</span>]: s[<span class="number">0</span>]=<span class="string">'w'</span>                                                     </span><br><span class="line"></span><br><span class="line">In [<span class="number">140</span>]: s2                                                           </span><br><span class="line">Out[<span class="number">140</span>]: [<span class="string">'a'</span>, [<span class="string">'w'</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">141</span>]: s3                                                           </span><br><span class="line">Out[<span class="number">141</span>]: [<span class="string">'a'</span>, [<span class="string">'w'</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">149</span>]: id(s2[<span class="number">1</span>]), id(s3[<span class="number">1</span>]),id(s)                                   </span><br><span class="line">Out[<span class="number">149</span>]: (<span class="number">139956883394376</span>, <span class="number">139956883394376</span>, <span class="number">139956883394376</span>)</span><br></pre></td></tr></table></figure><blockquote><p>由上面的栗子可以看出来，虽然s3是copy的，但是s3还是会随着s的变化来变化的。那我们有什么办法让s3的值不变呢?那就是深拷贝。</p></blockquote><h4 id="深复制"><a href="#深复制" class="headerlink" title="深复制"></a>深复制</h4><p>举个栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">150</span>]: s = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">151</span>]: s2 = [<span class="string">'a'</span>, s]                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">152</span>]: <span class="keyword">import</span> copy                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">153</span>]: s3 = copy.deepcopy(s2)                                       </span><br><span class="line"></span><br><span class="line">In [<span class="number">154</span>]: s2                                                           </span><br><span class="line">Out[<span class="number">154</span>]: [<span class="string">'a'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">155</span>]: s3                                                           </span><br><span class="line">Out[<span class="number">155</span>]: [<span class="string">'a'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">156</span>]: s[<span class="number">0</span>]=<span class="string">'r'</span>                                                     </span><br><span class="line"></span><br><span class="line">In [<span class="number">157</span>]: s2                                                           </span><br><span class="line">Out[<span class="number">157</span>]: [<span class="string">'a'</span>, [<span class="string">'r'</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">158</span>]: s3                                                           </span><br><span class="line">Out[<span class="number">158</span>]: [<span class="string">'a'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line">In [<span class="number">159</span>]: id(s),id(s2[<span class="number">1</span>]),id(s3[<span class="number">1</span>])                                    </span><br><span class="line">Out[<span class="number">159</span>]: (<span class="number">139956879794952</span>, <span class="number">139956879794952</span>, <span class="number">139956879278408</span>)</span><br></pre></td></tr></table></figure><blockquote><p>通过深拷贝，我们就实现了，原数据改变的时候，复制的数据不会随着改变。</p></blockquote><h4 id="深浅复制的应用"><a href="#深浅复制的应用" class="headerlink" title="深浅复制的应用"></a>深浅复制的应用</h4><p>深浅复制只有在<code>列表嵌套列表</code>的情况下讨论。</p><p>如果想保留修改之前的数据，就可以使用列表的复制，但要注意列表嵌套情况下的问题。</p><h3 id="bytes和bytearray"><a href="#bytes和bytearray" class="headerlink" title="bytes和bytearray"></a>bytes和bytearray</h3><h4 id="bytes二进制序列类型"><a href="#bytes二进制序列类型" class="headerlink" title="bytes二进制序列类型"></a>bytes二进制序列类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">169</span>]: a= bytes(<span class="number">3</span>)                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">170</span>]: a[<span class="number">0</span>]                                                         </span><br><span class="line">Out[<span class="number">170</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">171</span>]: a[<span class="number">1</span>]                                                         </span><br><span class="line">Out[<span class="number">171</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>使用bytes(number)指定长度的零填充字节生成一个二进制的序列类型</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">172</span>]: bytes(<span class="string">b'abc'</span>)                                                </span><br><span class="line">Out[<span class="number">172</span>]: <span class="string">b'abc'</span></span><br></pre></td></tr></table></figure><blockquote><p>二进制字符串</p></blockquote><h4 id="bytearray二进制数组"><a href="#bytearray二进制数组" class="headerlink" title="bytearray二进制数组"></a>bytearray二进制数组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">173</span>]: a = bytearray(<span class="number">3</span>)                                             </span><br><span class="line"></span><br><span class="line">In [<span class="number">174</span>]: a                                                            </span><br><span class="line">Out[<span class="number">174</span>]: bytearray(<span class="string">b'\x00\x00\x00'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">175</span>]: a[<span class="number">1</span>]                                                         </span><br><span class="line">Out[<span class="number">175</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>使用bytearray(number)指定长度的零填充字节生成一个二进制的数组</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">176</span>]: bytearray(<span class="string">b'abc'</span>)                                            </span><br><span class="line">Out[<span class="number">176</span>]: bytearray(<span class="string">b'abc'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>二进制字符串</p></blockquote><h4 id="二进制序列类型的应用"><a href="#二进制序列类型的应用" class="headerlink" title="二进制序列类型的应用"></a>二进制序列类型的应用</h4><p>二进制序列类型的用法比较少见，是python中少用的一种序列类型。</p><p>对于二进制序列类型，大家基本了解即可。</p><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      python格式化输出和深浅复制
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://yoursite.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python第二话之序列类型方法</title>
    <link href="http://yoursite.com/2018/12/08/2018-12-8-python-sequence/"/>
    <id>http://yoursite.com/2018/12/08/2018-12-8-python-sequence/</id>
    <published>2018-12-07T16:00:00.000Z</published>
    <updated>2018-12-11T14:25:54.826Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:50 GMT+0800 (GMT+08:00) --><p>[TOC]</p><h3 id="序列类型方法"><a href="#序列类型方法" class="headerlink" title="序列类型方法"></a>序列类型方法</h3><p>前面我们简单的介绍了什么是序列类型，并且简单的给大家提了下<code>字符串</code>、<code>元组</code>、<code>列表</code>的一些基本操作。接下来我们详细的来看下关于<code>字符串</code>、<code>元组</code>、<code>列表</code>的常用操作。</p><h4 id="列表常用方法"><a href="#列表常用方法" class="headerlink" title="列表常用方法"></a>列表常用方法</h4><p>我们先查看下<code>list</code>可以使用的一些方法：</p><blockquote><p>append(…)<br>| L.append(object) -&gt; None – append object to end<br>|<br>| clear(…)<br>| L.clear() -&gt; None – remove all items from L<br>|<br>| copy(…)<br>| L.copy() -&gt; list – a shallow copy of L<br>|<br>| count(…)<br>| L.count(value) -&gt; integer – return number of occurrences of value<br>|<br>| extend(…)<br>| L.extend(iterable) -&gt; None – extend list by appending elements from the iterable<br>|<br>| index(…)<br>| L.index(value, [start, [stop]]) -&gt; integer – return first index of value.<br>| Raises ValueError if the value is not present.<br>|<br>| insert(…)<br>| L.insert(index, object) – insert object before index<br>|<br>| pop(…)<br>| L.pop([index]) -&gt; item – remove and return item at index (default last).<br>| Raises IndexError if list is empty or index is out of range.<br>|<br>| remove(…)<br>| L.remove(value) -&gt; None – remove first occurrence of value.<br>| Raises ValueError if the value is not present.<br>|<br>| reverse(…)<br>| L.reverse() – reverse <em>IN PLACE</em><br>|<br>| sort(…)<br>| L.sort(key=None, reverse=False) -&gt; None – stable sort *IN PLAC</p></blockquote><p>接下来我们给大家分类讲解一下这样操作方法。</p><h5 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a><code>增加元素</code></h5><p><strong>append</strong></p><p>查看下<code>append</code>这个方法的用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]                                    </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: help(s.append)</span><br></pre></td></tr></table></figure><blockquote><p>append(…) method of builtins.list instance<br>​ L.append(object) -&gt; None – append object to end</p><p>使用方式：L.append(‘s’)</p><p>注意：append方法是在列表的最后添加元素</p></blockquote><p><strong>演示</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: s.append(<span class="string">'w'</span>)                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: s                                                              </span><br><span class="line">Out[<span class="number">4</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'w'</span>]</span><br></pre></td></tr></table></figure><p><strong>insert</strong></p><p>查看<code>insert</code>的使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: help(s.insert)</span><br></pre></td></tr></table></figure><blockquote><p>insert(…) method of builtins.list instance<br>​ L.insert(index, object) – insert object before index</p><p>使用方法： L.insert(index,’s’)</p><p>注意：index: 索引值，s为元素</p><p>insert方法是在指定的索引值处添加元素</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: s.insert(<span class="number">3</span>,<span class="string">'s'</span>)                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: s                                                              </span><br><span class="line">Out[<span class="number">7</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'s'</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'w'</span>]</span><br></pre></td></tr></table></figure><p><strong>extend</strong></p><p>查看<code>extend</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: help(s.extend)</span><br></pre></td></tr></table></figure><blockquote><p>extend(…) method of builtins.list instance<br>​ L.extend(iterable) -&gt; None – extend list by appending elements from the iterable</p><p>使用方法：L.extend([1,2,’a’])</p><p>注意：extend方法是指在列表中追加可迭代器</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: a = [<span class="string">'w'</span>,<span class="string">'o'</span>,<span class="number">0</span>]                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: s.extend(a)                                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: s                                                             </span><br><span class="line">Out[<span class="number">11</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'s'</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'w'</span>, <span class="string">'w'</span>, <span class="string">'o'</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><h5 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a><code>删除元素</code></h5><p><strong>clear</strong></p><p>查看下<code>clear</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: help(s.clear)</span><br></pre></td></tr></table></figure><blockquote><p>clear(…) method of builtins.list instance<br>​ L.clear() -&gt; None – remove all items from L</p><p>使用方法：L.clear()</p><p>注意：clear是删除所有的元素</p></blockquote><p><strong>演示</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">20</span>]: s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: s.clear()                                                     </span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: s                                                             </span><br><span class="line">Out[<span class="number">22</span>]: []</span><br></pre></td></tr></table></figure><p><strong>pop</strong></p><p>查看<code>pop</code>的使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">23</span>]: help(s.pop)</span><br></pre></td></tr></table></figure><blockquote><p>pop(…) method of builtins.list instance<br>​ L.pop([index]) -&gt; item – remove and return item at index (default last).<br>​ Raises IndexError if list is empty or index is out of range.</p><p>使用方法：L.pop()、L.pop(index)</p><p>注意：L.pop()指的是删除最后一个元素</p><p>​ L.pop(index)指的是指定索引值删除元素</p></blockquote><p><strong>演示</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">24</span>]: s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: s.pop()                                                       </span><br><span class="line">Out[<span class="number">25</span>]: <span class="string">'c'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: s.pop()                                                       </span><br><span class="line">Out[<span class="number">26</span>]: <span class="string">'b'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: s.pop()                                                       </span><br><span class="line">Out[<span class="number">27</span>]: <span class="string">'a'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: s.pop()                                                       </span><br><span class="line">Out[<span class="number">28</span>]: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: s.pop(<span class="number">1</span>)                                                      </span><br><span class="line">Out[<span class="number">29</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: s                                                             </span><br><span class="line">Out[<span class="number">30</span>]: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p><strong>remove</strong></p><p>查看<code>remove</code>的使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">35</span>]: help(s.remove)</span><br></pre></td></tr></table></figure><blockquote><p>remove(…) method of builtins.list instance<br>​ L.remove(value) -&gt; None – remove first occurrence of value.<br>​ Raises ValueError if the value is not present.</p><p>使用方法：L.remove(obj)</p><p>注意：移除指定元素从左边开始的第一个。</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">56</span>]: s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]                             </span><br><span class="line"></span><br><span class="line">In [<span class="number">57</span>]: s.remove(<span class="number">2</span>)                                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: s                                                             </span><br><span class="line">Out[<span class="number">58</span>]: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: s.remove(<span class="number">2</span>)                                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: s                                                             </span><br><span class="line">Out[<span class="number">60</span>]: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h5 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a><code>修改元素</code></h5><p>修改元素在列表中就非常简单了。</p><blockquote><p>使用方法：L[index] = obj</p><p>注意：修改元素是根据元素的索引来修改。</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">61</span>]: s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]                                               </span><br><span class="line"></span><br><span class="line">In [<span class="number">62</span>]: s[<span class="number">3</span>]=<span class="string">'s'</span>                                                      </span><br><span class="line"></span><br><span class="line">In [<span class="number">63</span>]: s                                                             </span><br><span class="line">Out[<span class="number">63</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'s'</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><h5 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a><code>查找元素</code></h5><p><strong>index</strong></p><p>查看index的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">64</span>]: help(s.index)</span><br></pre></td></tr></table></figure><blockquote><p>index(…) method of builtins.list instance<br>​ L.index(value, [start, [stop]]) -&gt; integer – return first index of value.<br>​ Raises ValueError if the value is not present.</p><p>使用方法：L.index(obj) , L.index(value, [start, [stop]])</p><p>注意：L.index(obj) 从列表中找某个值第一个匹配项的索引位置。</p><p>​ L.index(value, [start, [stop]])指定索引范围查找元素</p></blockquote><p><strong>演示</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">71</span>]: s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]                                               </span><br><span class="line"></span><br><span class="line">In [<span class="number">72</span>]: s.index(<span class="number">1</span>)                                                    </span><br><span class="line">Out[<span class="number">72</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: s.index(<span class="number">3</span>)                                                    </span><br><span class="line">Out[<span class="number">73</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">98</span>]: s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]                             </span><br><span class="line"></span><br><span class="line">In [<span class="number">99</span>]: s.index(<span class="number">2</span>,<span class="number">2</span>)                                                  </span><br><span class="line">Out[<span class="number">99</span>]: <span class="number">9</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">100</span>]: s.index(<span class="number">2</span>)                                                   </span><br><span class="line">Out[<span class="number">100</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>count</strong></p><p>查看<code>count</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">74</span>]: help(s.count)</span><br></pre></td></tr></table></figure><blockquote><p>count(…) method of builtins.list instance<br>​ L.count(value) -&gt; integer – return number of occurrences of value</p><p>使用方法：L.count(obj)</p><p>注意：统计某个元素在列表中出现的次数。</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">75</span>]: s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>]                                         </span><br><span class="line"></span><br><span class="line">In [<span class="number">76</span>]: s.count(<span class="number">2</span>)                                                    </span><br><span class="line">Out[<span class="number">76</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">77</span>]: s.count(<span class="number">3</span>)                                                    </span><br><span class="line">Out[<span class="number">77</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">78</span>]: s.count(<span class="number">1</span>)                                                    </span><br><span class="line">Out[<span class="number">78</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a><code>扩展</code></h5><p><strong>copy</strong></p><p>查看<code>copy</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">79</span>]: help(s.copy)</span><br></pre></td></tr></table></figure><blockquote><p>copy(…) method of builtins.list instance<br>​ L.copy() -&gt; list – a shallow copy of L</p><p>使用方法： L.copy()</p><p>注意： 复制列表，和L[:]的复制方式一样属于浅复制。</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">101</span>]: s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]                                              </span><br><span class="line"></span><br><span class="line">In [<span class="number">102</span>]: a = s.copy()                                                 </span><br><span class="line"></span><br><span class="line">In [<span class="number">103</span>]: a                                                            </span><br><span class="line">Out[<span class="number">103</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">104</span>]: id(s)                                                        </span><br><span class="line">Out[<span class="number">104</span>]: <span class="number">140462445434696</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">105</span>]: id(a)                                                        </span><br><span class="line">Out[<span class="number">105</span>]: <span class="number">140462410623560</span></span><br></pre></td></tr></table></figure><p><strong>reverse</strong></p><p>查看<code>reverse</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">83</span>]: help(s.reverse)</span><br></pre></td></tr></table></figure><blockquote><p>reverse(…) method of builtins.list instance<br>​ L.reverse() – reverse <em>IN PLACE</em></p><p>使用方法：L.reverse()</p><p>注意： 反向列表中元素。</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">84</span>]: s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]                                               </span><br><span class="line"></span><br><span class="line">In [<span class="number">85</span>]: s.reverse()                                                   </span><br><span class="line"></span><br><span class="line">In [<span class="number">86</span>]: s                                                             </span><br><span class="line">Out[<span class="number">86</span>]: [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><strong>sort</strong></p><p>查看<code>sort</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">87</span>]: help(s.sort)</span><br></pre></td></tr></table></figure><blockquote><p>sort(…) method of builtins.list instance<br>​ L.sort(key=None, reverse=False) -&gt; None – stable sort <em>IN PLACE</em></p><p>使用方法：L.sort()</p><p>注意： 对原列表进行排序。列表中的元素要类型相同 (key = len int lambda)，不同元素需要改变元素类型，然后根据ASCII码进行排序。</p></blockquote><p><strong>演示</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">92</span>]: s                                                             </span><br><span class="line">Out[<span class="number">92</span>]: [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">93</span>]: s.sort()                                                      </span><br><span class="line"></span><br><span class="line">In [<span class="number">94</span>]: s                                                             </span><br><span class="line">Out[<span class="number">94</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    </span><br><span class="line">In [<span class="number">110</span>]: s = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'b'</span>,<span class="string">'a'</span>]                                      </span><br><span class="line"></span><br><span class="line">In [<span class="number">111</span>]: s.sort()                                                     </span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line">TypeError                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-111</span><span class="number">-474</span>c8408a842&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 s.sort()</span><br><span class="line"></span><br><span class="line">TypeError: unorderable types: str() &lt; int()</span><br><span class="line"></span><br><span class="line">In [<span class="number">112</span>]: s.sort(key=str)                                              </span><br><span class="line"></span><br><span class="line">In [<span class="number">113</span>]: s                                                            </span><br><span class="line">Out[<span class="number">113</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="string">'a'</span>, <span class="string">'b'</span>]</span><br></pre></td></tr></table></figure><h4 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h4><h5 id="增加元素-1"><a href="#增加元素-1" class="headerlink" title="增加元素"></a><code>增加元素</code></h5><p><strong>使用 +</strong></p><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">215</span>]: a = <span class="string">'hello'</span>                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">216</span>]: b = <span class="string">'python'</span>                                                 </span><br><span class="line"></span><br><span class="line">In [<span class="number">217</span>]: c = <span class="string">'!'</span>                                                      </span><br><span class="line"></span><br><span class="line">In [<span class="number">218</span>]: a+b+c                                                        </span><br><span class="line">Out[<span class="number">218</span>]: <span class="string">'hellopython!'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">219</span>]: a+<span class="string">' '</span>+b+<span class="string">' '</span>+c                                                </span><br><span class="line">Out[<span class="number">219</span>]: <span class="string">'hello python !'</span></span><br></pre></td></tr></table></figure><p><strong>格式化字符串</strong></p><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">220</span>]: a = <span class="string">'hello'</span>                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">221</span>]: b = <span class="string">'python'</span>                                                 </span><br><span class="line"></span><br><span class="line">In [<span class="number">222</span>]: c = <span class="string">'!'</span>                                                      </span><br><span class="line"></span><br><span class="line">In [<span class="number">223</span>]: <span class="string">'%s %s %s'</span>%(a,b,c)                                           </span><br><span class="line">Out[<span class="number">223</span>]: <span class="string">'hello python !'</span></span><br></pre></td></tr></table></figure><p><strong>使用join</strong></p><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">229</span>]: a = <span class="string">'hello'</span>                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">230</span>]: b = <span class="string">'python'</span>                                                 </span><br><span class="line"></span><br><span class="line">In [<span class="number">231</span>]: c = <span class="string">'!'</span>                                                      </span><br><span class="line"></span><br><span class="line">In [<span class="number">232</span>]: <span class="string">' '</span>.join([a,b,c])                                            </span><br><span class="line">Out[<span class="number">232</span>]: <span class="string">'hello python !'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">233</span>]: <span class="string">'****'</span>.join(<span class="string">'abc'</span>)                                           </span><br><span class="line">Out[<span class="number">233</span>]: <span class="string">'a****b****c'</span></span><br></pre></td></tr></table></figure><p><strong>使用format</strong></p><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">234</span>]: a = <span class="string">'hello'</span>                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">235</span>]: b = <span class="string">'python'</span>                                                 </span><br><span class="line"></span><br><span class="line">In [<span class="number">236</span>]: c = <span class="string">'!'</span>                                                      </span><br><span class="line"></span><br><span class="line">In [<span class="number">237</span>]: <span class="string">'&#123;&#125; &#123;&#125; &#123;&#125;'</span>.format(a,b,c)                                     </span><br><span class="line">Out[<span class="number">237</span>]: <span class="string">'hello python !'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">238</span>]: <span class="string">'&#123;0&#125; &#123;1&#125; &#123;2&#125;'</span>.format(a,b,c)                                  </span><br><span class="line">Out[<span class="number">238</span>]: <span class="string">'hello python !'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">239</span>]: <span class="string">'&#123;2&#125; &#123;1&#125; &#123;0&#125;'</span>.format(a,b,c)                                  </span><br><span class="line">Out[<span class="number">239</span>]: <span class="string">'! python hello'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">240</span>]: <span class="string">'&#123;1&#125; &#123;1&#125; &#123;1&#125;'</span>.format(a,b,c)                                  </span><br><span class="line">Out[<span class="number">240</span>]: <span class="string">'python python python'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">241</span>]: <span class="string">'&#123;n1&#125; &#123;n2&#125; &#123;n3&#125;'</span>.format(n1=a, n2=b, n3=c)                    </span><br><span class="line">Out[<span class="number">241</span>]: <span class="string">'hello python !'</span></span><br></pre></td></tr></table></figure><h5 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a><code>删除元素</code></h5><p><strong>replace</strong></p><p>查看<code>replace</code> 的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">115</span>]: help(s.replace)</span><br></pre></td></tr></table></figure><blockquote><p>replace(…) method of builtins.str instance<br>​ S.replace(old, new[, count]) -&gt; str<br>​ Return a copy of S with all occurrences of substring old replaced by new. If the optional argument count is given, only the first count occurrences are replaced.</p><p>使用方法：s.replace (x,y) ：</p><p>注意： 子串替换,在字符串s中出现字符串x的任意位置都用y进行替换</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">205</span>]: s = <span class="string">'abc cnn dnn'</span>                                            </span><br><span class="line"></span><br><span class="line">In [<span class="number">206</span>]: s.replace(<span class="string">'a'</span>,<span class="string">'2'</span>)                                           </span><br><span class="line">Out[<span class="number">206</span>]: <span class="string">'2bc cnn dnn'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">207</span>]: s.replace(<span class="string">'n'</span>,<span class="string">'w'</span>,<span class="number">1</span>)                                         </span><br><span class="line">Out[<span class="number">207</span>]: <span class="string">'abc cwn dnn'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">208</span>]: s.replace(<span class="string">'n'</span>,<span class="string">'w'</span>,<span class="number">2</span>)                                         </span><br><span class="line">Out[<span class="number">208</span>]: <span class="string">'abc cww dnn'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">209</span>]: s.replace(<span class="string">'n'</span>,<span class="string">'w'</span>)                                           </span><br><span class="line">Out[<span class="number">209</span>]: <span class="string">'abc cww dww'</span></span><br></pre></td></tr></table></figure><h5 id="修改元素-1"><a href="#修改元素-1" class="headerlink" title="修改元素"></a><code>修改元素</code></h5><p><strong>upper</strong></p><p>查看<code>upper</code> 的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">116</span>]: help(s.upper)</span><br></pre></td></tr></table></figure><blockquote><p>upper(…) method of builtins.str instance<br>​ S.upper() -&gt; str</p><p>Return a copy of S converted to uppercase.</p><p>使用方法： s.upper ()</p><p>注意： 将字符串转为大写</p></blockquote><p><strong>演示</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">189</span>]: s = <span class="string">'123456abc'</span>                                              </span><br><span class="line"></span><br><span class="line">In [<span class="number">190</span>]: s.upper()                                                    </span><br><span class="line">Out[<span class="number">190</span>]: <span class="string">'123456ABC'</span></span><br></pre></td></tr></table></figure><p><strong>lower</strong></p><p>查看<code>lower</code> 的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">116</span>]: help(s.lower)</span><br></pre></td></tr></table></figure><blockquote><p>lower(…) method of builtins.str instance<br>​ S.lower() -&gt; str<br>​ Return a copy of the string S converted to lowercase.</p><p>使用方法：s.lower ()</p><p>注意：将字符串转为小写</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">193</span>]: s = <span class="string">'123456abcDF'</span>                                            </span><br><span class="line"></span><br><span class="line">In [<span class="number">194</span>]: s.lower()                                                    </span><br><span class="line">Out[<span class="number">194</span>]: <span class="string">'123456abcdf'</span></span><br></pre></td></tr></table></figure><p><strong>strip(lstrip、rstrip)</strong></p><p>查看<code>strip(lstrip、rstrip)</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">116</span>]: help(s.strip) </span><br><span class="line">In [<span class="number">117</span>]: help(s.lstrip) </span><br><span class="line">In [<span class="number">118</span>]: help(s.rstrip)</span><br></pre></td></tr></table></figure><blockquote><p>strip(…) method of builtins.str instance<br>​ S.strip([chars]) -&gt; str<br>Return a copy of the string S with leading and trailing whitespace removed. If chars is given and not None, remove characters in chars instead</p><p>使用方式：s.trip()</p><p>注意：去除两边的空格</p></blockquote><blockquote><p>lstrip(…) method of builtins.str instance<br>​ S.lstrip([chars]) -&gt; str</p><p>Return a copy of the string S with leading whitespace removed. If chars is given and not None, remove characters in chars instead</p><p>使用方式：s.lstrip()</p><p>注意:去除左边的空格</p></blockquote><blockquote><p>rstrip(…) method of builtins.str instance<br>​ S.rstrip([chars]) -&gt; str<br>Return a copy of the string S with trailing whitespace removed. If chars is given and not None, remove characters in chars instead</p><p>使用方式：s.rstrip()</p><p>注意：去除右边空格</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">195</span>]: s = <span class="string">'    abc    '</span>                                            </span><br><span class="line"></span><br><span class="line">In [<span class="number">196</span>]: s.strip()                                                    </span><br><span class="line">Out[<span class="number">196</span>]: <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">197</span>]: s.lstrip()                                                   </span><br><span class="line">Out[<span class="number">197</span>]: <span class="string">'abc    '</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">198</span>]: s.rstrip()                                                   </span><br><span class="line">Out[<span class="number">198</span>]: <span class="string">'    abc'</span></span><br></pre></td></tr></table></figure><p><strong>capitalize</strong></p><p>查看<code>capitalize</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">115</span>]: help(s.capitalize)</span><br></pre></td></tr></table></figure><blockquote><p>capitalize(…) method of builtins.str instance<br>​ S.capitalize() -&gt; str<br>​ Return a capitalized version of S, i.e. make the first character have upper case and the rest lower case.</p><p>使用方式： s.capitalize()</p><p>注意：首字母大写</p></blockquote><p><strong>演示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [201]: s = &apos;abc cnn dnn&apos;                                            </span><br><span class="line"></span><br><span class="line">In [202]: s.capitalize()                                               </span><br><span class="line">Out[202]: &apos;Abc cnn dnn&apos;</span><br></pre></td></tr></table></figure><p><strong>title</strong></p><p>查看<code>title</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">115</span>]: help(s.title)</span><br></pre></td></tr></table></figure><blockquote><p>title(…) method of builtins.str instance<br>​ S.title() -&gt; str<br>​ Return a titlecased version of S, i.e. words start with title case characters, all remaining cased characters have lower case.</p><p>使用方式： S.title()</p><p>注意：每个单词的首字母大写</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">203</span>]: s = <span class="string">'abc cnn dnn'</span>                                            </span><br><span class="line"></span><br><span class="line">In [<span class="number">204</span>]: s.title()                                                    </span><br><span class="line">Out[<span class="number">204</span>]: <span class="string">'Abc Cnn Dnn'</span></span><br></pre></td></tr></table></figure><p><strong>split</strong></p><p>查看<code>split</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">115</span>]: help(s.split)</span><br></pre></td></tr></table></figure><blockquote><p>split(…) method of builtins.str instance<br>​ S.split(sep=None, maxsplit=-1) -&gt; list of strings<br>​ Return a list of the words in S, using sep as the delimiter string. If maxsplit is given, at most maxsplit splits are done. If sep is not specified or is None, any whitespace string is a separator and empty strings are removed from the result.</p><p>使用方法：s.split()，s.split(a,b)</p><p>注意：s.split()指的是返回一系列用空格分割的字符串列表</p><p>​ s.split(a,b)指的是a,b为可选参数，a是将要分割的字符串，b是说明最多要分割几个</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">210</span>]: s = <span class="string">'abc123cba'</span>                                              </span><br><span class="line"></span><br><span class="line">In [<span class="number">211</span>]: s.split(<span class="string">'b'</span>)                                                 </span><br><span class="line">Out[<span class="number">211</span>]: [<span class="string">'a'</span>, <span class="string">'c123c'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">213</span>]: s = <span class="string">'abc cnn dnn'</span>                                            </span><br><span class="line"></span><br><span class="line">In [<span class="number">214</span>]: s.split(<span class="string">' '</span>)                                                 </span><br><span class="line">Out[<span class="number">214</span>]: [<span class="string">'abc'</span>, <span class="string">'cnn'</span>, <span class="string">'dnn'</span>]</span><br></pre></td></tr></table></figure><h5 id="查找元素-1"><a href="#查找元素-1" class="headerlink" title="查找元素"></a><code>查找元素</code></h5><p><strong>count</strong></p><p>查看<code>count</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">115</span>]: help(s.count)</span><br></pre></td></tr></table></figure><blockquote><p>count(…) method of builtins.str instance<br>​ S.count(sub[, start[, end]]) -&gt; int<br>​ Return the number of non-overlapping occurrences of substring sub in string S[start:end]. Optional arguments start and end are interpreted as in slice notation.</p><p>使用方法：s.count(x)</p><p>注意： 返回字符串x在s中出现的次数，带可选参数</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">138</span>]: s = <span class="string">'abc123abc321678'</span>                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">139</span>]: s.count(<span class="string">'a'</span>)                                                 </span><br><span class="line">Out[<span class="number">139</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">140</span>]: s.count(<span class="string">'8'</span>)                                                 </span><br><span class="line">Out[<span class="number">140</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>index</strong></p><p>查看<code>index</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">115</span>]: help(s.index)</span><br></pre></td></tr></table></figure><blockquote><p>index(…) method of builtins.str instance<br>​ S.index(sub[, start[, end]]) -&gt; int<br>​ Like S.find() but raise ValueError when the substring is not found</p><p>使用方法：s.index(x)</p><p>注意：返回字符串中出现x的最左端的索引值，如果不在则抛出valueError异常</p></blockquote><p><strong>演示</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">141</span>]: s = <span class="string">'abc123abc321678'</span>                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">142</span>]: s.index(<span class="string">'a'</span>)                                                 </span><br><span class="line">Out[<span class="number">142</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">143</span>]: s.index(<span class="string">'a'</span>,<span class="number">2</span>)                                               </span><br><span class="line">Out[<span class="number">143</span>]: <span class="number">6</span></span><br></pre></td></tr></table></figure><p><strong>find</strong></p><p>查看<code>find</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">115</span>]: help(s.find)</span><br></pre></td></tr></table></figure><blockquote><p>find(…) method of builtins.str instance<br>​ S.find(sub[, start[, end]]) -&gt; int<br>​ Return the lowest index in S where substring sub is found, such that sub is contained within S[start:end].Optional<br>arguments start and end are interpreted as in slice notation.</p><p>Return -1 on failure.</p><p>使用方法：s.find(x)</p><p>注意：返回字符串中出现x的最左端字符的索引值，如果不在则返回-1</p></blockquote><p><strong>演示</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">146</span>]: s = <span class="string">'abc123abc321678'</span>                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">147</span>]: s.index(<span class="string">'a'</span>,<span class="number">1</span>,<span class="number">4</span>)  <span class="comment"># index没有找到就报错                                            </span></span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line">ValueError                            Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-147</span>-fbbfe36ae6a6&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 s.index('a',1,4)</span><br><span class="line"></span><br><span class="line">ValueError: substring <span class="keyword">not</span> found</span><br><span class="line"></span><br><span class="line">In [<span class="number">148</span>]: s.find(<span class="string">'a'</span>,<span class="number">1</span>,<span class="number">4</span>)  <span class="comment"># find 没有找到就提示-1                                             </span></span><br><span class="line">Out[<span class="number">148</span>]: <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">149</span>]: s.find(<span class="string">'a'</span>,<span class="number">1</span>)                                                </span><br><span class="line">Out[<span class="number">149</span>]: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">150</span>]: s.find(<span class="string">'a'</span>)                                                  </span><br><span class="line">Out[<span class="number">150</span>]: <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>isdigit</strong></p><p>查看<code>isdigit</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">115</span>]: help(s.isdigit)</span><br></pre></td></tr></table></figure><blockquote><p>isdigit(…) method of builtins.str instance<br>​ S.isdigit() -&gt; bool<br>​ Return True if all characters in S are digits and there is at least one character in S, False otherwise.</p><p>使用方法：s.isdigit ()</p><p>注意 ：测试是否全是数字，都是数字则返回 True 否则返回 False.</p></blockquote><p><strong>演示</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">151</span>]: s = <span class="string">'123456'</span>                                                 </span><br><span class="line"></span><br><span class="line">In [<span class="number">152</span>]: s1 = <span class="string">'123abc'</span>                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">153</span>]: s2 = <span class="string">'abcdef'</span>                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">154</span>]: s.isdigit()                                                  </span><br><span class="line">Out[<span class="number">154</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">155</span>]: s1.isdigit()                                                 </span><br><span class="line">Out[<span class="number">155</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">156</span>]: s2.isdigit()                                                 </span><br><span class="line">Out[<span class="number">156</span>]: <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p><strong>isalpha</strong></p><p>查看<code>isalpha</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">115</span>]: help(s.isalpha )</span><br></pre></td></tr></table></figure><blockquote><p>isalpha(…) method of builtins.str instance<br>​ S.isalpha() -&gt; bool<br>​ Return True if all characters in S are alphabetic and there is at least one character in S, False otherwise.</p><p>使用方法：s.isalpha ()</p><p>注意 ：测试是否全是字母，都是字母则返回 True,否则返回 False.</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">157</span>]: s = <span class="string">'123456'</span>                                                 </span><br><span class="line"></span><br><span class="line">In [<span class="number">158</span>]: s1 = <span class="string">'123abc'</span>                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">159</span>]: s2 = <span class="string">'abcdef'</span>                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">160</span>]: s.isalpha()                                                  </span><br><span class="line">Out[<span class="number">160</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">161</span>]: s1.isalpha()                                                 </span><br><span class="line">Out[<span class="number">161</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">162</span>]: s2.isalpha()                                                 </span><br><span class="line">Out[<span class="number">162</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p><strong>endswith</strong></p><p>查看<code>endswith</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">115</span>]: help(s.endswith )</span><br></pre></td></tr></table></figure><blockquote><p>endswith(…) method of builtins.str instance<br>​ S.endswith(suffix[, start[, end]]) -&gt; bool<br>​ Return True if S ends with the specified suffix, False otherwise. With optional start, test S beginning at that position. With optional end, stop comparing S at that position. suffix can also be a tuple of strings to try.</p><p>使用方法：s.endswith(x)</p><p>注意：如果字符串s以x结尾，返回True</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">163</span>]: s = <span class="string">'123456abc'</span>                                              </span><br><span class="line"></span><br><span class="line">In [<span class="number">164</span>]: s1 = <span class="string">'123abced'</span>                                              </span><br><span class="line"></span><br><span class="line">In [<span class="number">165</span>]: s2 = <span class="string">'abcdef'</span>                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">166</span>]: s.endswith(<span class="string">'c'</span>)                                              </span><br><span class="line">Out[<span class="number">166</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">167</span>]: s.endswith(<span class="string">'2'</span>)                                              </span><br><span class="line">Out[<span class="number">167</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">168</span>]: s1.endswith(<span class="string">'d'</span>)                                             </span><br><span class="line">Out[<span class="number">168</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">169</span>]: s2.endswith(<span class="string">'f'</span>)                                             </span><br><span class="line">Out[<span class="number">169</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><p>备注：方法s.startwith与s.endwith相反，前者是以什么开始，后者是以什么结尾。</p></blockquote><p><strong>islower</strong></p><p>查看<code>islower</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">115</span>]: help(s.islower )</span><br></pre></td></tr></table></figure><blockquote><p>islower(…) method of builtins.str instance<br>​ S.islower() -&gt; bool<br>​ Return True if all cased characters in S are lowercase and there is at least one cased character in S, False otherwise.</p><p>使用方法：s.islower ()</p><p>注意：测试是否全是小写</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">173</span>]: s = <span class="string">'123456abc'</span>                                              </span><br><span class="line"></span><br><span class="line">In [<span class="number">174</span>]: s1 = <span class="string">'abcDE'</span>                                                 </span><br><span class="line"></span><br><span class="line">In [<span class="number">175</span>]: s2 = <span class="string">'DE'</span>                                                    </span><br><span class="line"></span><br><span class="line">In [<span class="number">176</span>]: s.islower()                                                  </span><br><span class="line">Out[<span class="number">176</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">177</span>]: s1.islower()                                                 </span><br><span class="line">Out[<span class="number">177</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">178</span>]: s2.islower()                                                 </span><br><span class="line">Out[<span class="number">178</span>]: <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p><strong>isupper</strong></p><p>查看<code>isupper</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">115</span>]: help(s.isupper )</span><br></pre></td></tr></table></figure><blockquote><p>isupper(…) method of builtins.str instance<br>​ S.isupper() -&gt; bool<br>​ Return True if all cased characters in S are uppercase and there is at least one cased character in S, False otherwise.</p><p>使用方式：s.isupper ()</p><p>注意：测试是否全是大写</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">181</span>]: s = <span class="string">'123456abc'</span>                                              </span><br><span class="line"></span><br><span class="line">In [<span class="number">182</span>]: s1 = <span class="string">'abcDE'</span>                                                 </span><br><span class="line"></span><br><span class="line">In [<span class="number">183</span>]: s2 = <span class="string">'DE'</span>                                                    </span><br><span class="line"></span><br><span class="line">In [<span class="number">184</span>]: s3 = <span class="string">'123ADFAFA'</span>                                             </span><br><span class="line"></span><br><span class="line">In [<span class="number">185</span>]: s.isupper()                                                  </span><br><span class="line">Out[<span class="number">185</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">186</span>]: s1.isupper()                                                 </span><br><span class="line">Out[<span class="number">186</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">187</span>]: s2.isupper()                                                 </span><br><span class="line">Out[<span class="number">187</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">188</span>]: s3.isupper()                                                 </span><br><span class="line">Out[<span class="number">188</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h4 id="元组常用方法"><a href="#元组常用方法" class="headerlink" title="元组常用方法"></a>元组常用方法</h4><blockquote><p>元组为不可变序列，所以只有两种方法。</p></blockquote><h5 id="查找元素-2"><a href="#查找元素-2" class="headerlink" title="查找元素"></a><code>查找元素</code></h5><p><strong>count</strong></p><p>查看<code>count</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">115</span>]: help(s.count )</span><br></pre></td></tr></table></figure><blockquote><p>count(…) method of builtins.tuple instance<br>​ T.count(value) -&gt; integer – return number of occurrences of value</p><p>使用方法：s.count(value)</p><p>注意：统计元素的个数</p></blockquote><p><strong>演示：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">243</span>]: s = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>)                                          </span><br><span class="line"></span><br><span class="line">In [<span class="number">244</span>]: s.count(<span class="number">1</span>)                                                   </span><br><span class="line">Out[<span class="number">244</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">245</span>]: s.count(<span class="number">4</span>)                                                   </span><br><span class="line">Out[<span class="number">245</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>index</strong></p><p>查看<code>index</code>的使用方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">115</span>]: help(s.index )</span><br></pre></td></tr></table></figure><blockquote><p>index(…) method of builtins.tuple instance<br>​ T.index(value, [start, [stop]]) -&gt; integer – return first index of value.<br>​ Raises ValueError if the value is not present.</p><p>使用方式： T.index(value, [start, [stop]])</p><p>注意：查看元素的索引</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">246</span>]: s = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>)                                          </span><br><span class="line"></span><br><span class="line">In [<span class="number">247</span>]: s.index(<span class="number">1</span>)                                                   </span><br><span class="line">Out[<span class="number">247</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">248</span>]: s.index(<span class="number">1</span>,<span class="number">1</span>)                                                 </span><br><span class="line">Out[<span class="number">248</span>]: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">249</span>]: s.index(<span class="number">4</span>)                                                   </span><br><span class="line">Out[<span class="number">249</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      python序列类型方法，列表字符串，元组，增删改查
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://yoursite.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python第一话之数值类型和序列类型</title>
    <link href="http://yoursite.com/2018/12/01/2018-12-01-python-numerical-sequence/"/>
    <id>http://yoursite.com/2018/12/01/2018-12-01-python-numerical-sequence/</id>
    <published>2018-11-30T16:00:00.000Z</published>
    <updated>2018-12-11T14:25:23.554Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:50 GMT+0800 (GMT+08:00) --><p>[TOC]</p><h3 id="Python的数值类型"><a href="#Python的数值类型" class="headerlink" title="Python的数值类型"></a>Python的数值类型</h3><p>Python中的基本数据类型有数值类型、字符串型、列表、元组、字典、集合等。本节介绍数值类型。数值类型包括整型、布尔型、浮点型和复数类型。</p><h4 id="基本整形四则运算"><a href="#基本整形四则运算" class="headerlink" title="基本整形四则运算"></a>基本整形四则运算</h4><p>用Python实现简单的加减乘除</p><p>我们先进入<code>Python的交互模式</code></p><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-1/36226595.jpg" alt="python"></p><p>或者执行<code>ipython</code></p><p><img src="http://eveseven.oss-cn-shanghai.aliyuncs.com/18-12-1/65669846.jpg" alt="ipython"></p><h5 id="加法"><a href="#加法" class="headerlink" title="加法"></a><code>加法</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="number">1</span>+<span class="number">1</span></span><br><span class="line">Out[<span class="number">1</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="number">12</span>+<span class="number">2</span></span><br><span class="line">Out[<span class="number">2</span>]: <span class="number">14</span></span><br></pre></td></tr></table></figure><h5 id="减法"><a href="#减法" class="headerlink" title="减法"></a><code>减法</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: <span class="number">21</span><span class="number">-1</span></span><br><span class="line">Out[<span class="number">3</span>]: <span class="number">20</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="number">20</span><span class="number">-22</span></span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">-2</span></span><br></pre></td></tr></table></figure><h5 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a><code>乘法</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: <span class="number">2</span>*<span class="number">2</span></span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="number">10</span>*<span class="number">10</span></span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">100</span></span><br></pre></td></tr></table></figure><h5 id="除法"><a href="#除法" class="headerlink" title="除法"></a><code>除法</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: <span class="number">4</span>/<span class="number">2</span></span><br><span class="line">Out[<span class="number">9</span>]: <span class="number">2.0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: <span class="number">2</span>/<span class="number">2</span></span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">1.0</span></span><br></pre></td></tr></table></figure><blockquote><p>以上就是我们所遇到的一些基本的加减乘除运算，接下来我们再看看其他形式的扩展。</p></blockquote><h4 id="保存计算结果-基本的赋值运算"><a href="#保存计算结果-基本的赋值运算" class="headerlink" title="保存计算结果-基本的赋值运算"></a>保存计算结果-基本的赋值运算</h4><p>在我们后面的学习中，经常会遇到需要保存计算结果的情况，下面我们来看一下如何保存我们的计算结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: a = <span class="number">1</span>+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: <span class="number">1</span>+<span class="number">1</span></span><br><span class="line">Out[<span class="number">12</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: a</span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="基本整数与小数四则运算"><a href="#基本整数与小数四则运算" class="headerlink" title="基本整数与小数四则运算"></a>基本整数与小数四则运算</h4><p>计算机在计算的时候，除了整数运算，还有小数运算，还有小数和整数的混合运算。</p><h5 id="加法-1"><a href="#加法-1" class="headerlink" title="加法"></a><code>加法</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: <span class="number">2</span>+<span class="number">1.2</span></span><br><span class="line">Out[<span class="number">14</span>]: <span class="number">3.2</span></span><br></pre></td></tr></table></figure><h5 id="减法-1"><a href="#减法-1" class="headerlink" title="减法"></a><code>减法</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">16</span>]: <span class="number">2.2</span><span class="number">-2</span></span><br><span class="line">Out[<span class="number">16</span>]: <span class="number">0.20000000000000018</span></span><br></pre></td></tr></table></figure><h5 id="乘法-1"><a href="#乘法-1" class="headerlink" title="乘法"></a><code>乘法</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">17</span>]: <span class="number">3.3</span>*<span class="number">2</span></span><br><span class="line">Out[<span class="number">17</span>]: <span class="number">6.6</span></span><br></pre></td></tr></table></figure><h5 id="除法-1"><a href="#除法-1" class="headerlink" title="除法"></a><code>除法</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">18</span>]: <span class="number">2.4</span>/<span class="number">4</span></span><br><span class="line">Out[<span class="number">18</span>]: <span class="number">0.6</span></span><br></pre></td></tr></table></figure><blockquote><p>小数一般是<code>float</code>类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; In [<span class="number">19</span>]: b = <span class="number">3</span>+<span class="number">2.2</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; In [<span class="number">20</span>]: type(b)</span><br><span class="line">&gt; Out[<span class="number">20</span>]: float</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>但是<code>浮点数</code>不是我们真正看到的数，比如<code>1.2</code>实际是<code>1.1999999999</code></p><p>所以小数计算都是不精确的，那么我们如何进行精确计算呢？</p></blockquote><h4 id="精确计算-decimal的运算"><a href="#精确计算-decimal的运算" class="headerlink" title="精确计算-decimal的运算"></a>精确计算-decimal的运算</h4><p>在<code>Python</code>中如果我们要实现精确计算，我们是使用<code>decimal</code>这个库函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">27</span>]: <span class="keyword">import</span> decimal </span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: a = decimal.Decimal(<span class="string">'2.2'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: b = decimal.Decimal(<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: a-b</span><br><span class="line">Out[<span class="number">30</span>]: Decimal(<span class="string">'0.2'</span>)</span><br></pre></td></tr></table></figure><h4 id="布尔型的计算"><a href="#布尔型的计算" class="headerlink" title="布尔型的计算"></a>布尔型的计算</h4><p><code>布尔型变量</code>只有<code>True</code>和<code>False</code>两种情况，<code>True</code>就是<code>1</code>，<code>False</code>就是<code>0</code>。</p><h5 id="基本情况"><a href="#基本情况" class="headerlink" title="基本情况"></a><code>基本情况</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">34</span>]: a = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: b = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: a</span><br><span class="line">Out[<span class="number">36</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: b</span><br><span class="line">Out[<span class="number">37</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: type(a)</span><br><span class="line">Out[<span class="number">38</span>]: bool</span><br></pre></td></tr></table></figure><h5 id="运算"><a href="#运算" class="headerlink" title="运算"></a><code>运算</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">39</span>]: a + <span class="number">1</span></span><br><span class="line">Out[<span class="number">39</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">40</span>]: a + a </span><br><span class="line">Out[<span class="number">40</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: a + b</span><br><span class="line">Out[<span class="number">41</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="复数类型"><a href="#复数类型" class="headerlink" title="复数类型"></a>复数类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">42</span>]: <span class="number">1</span> + <span class="number">2j</span></span><br><span class="line">Out[<span class="number">42</span>]: (<span class="number">1</span>+<span class="number">2j</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: a = <span class="number">1</span> + <span class="number">2j</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">44</span>]: type(a)</span><br><span class="line">Out[<span class="number">44</span>]: complex</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>整型、布尔型、浮点型和复数类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">45</span>]: type(<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">45</span>]: int</span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: type(<span class="keyword">True</span>)</span><br><span class="line">Out[<span class="number">46</span>]: bool</span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: type(<span class="number">1.2</span>)</span><br><span class="line">Out[<span class="number">47</span>]: float</span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: type(<span class="number">1</span>+<span class="number">2j</span>)</span><br><span class="line">Out[<span class="number">48</span>]: complex</span><br></pre></td></tr></table></figure><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="整除-向下取整"><a href="#整除-向下取整" class="headerlink" title="整除-向下取整"></a><code>整除-向下取整</code></h5><p><code>//</code>在<code>Python</code>中是指的<code>向下取整</code>：1 &lt; 1.n &lt; 2 ==&gt; 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">49</span>]: <span class="number">2.3</span> / <span class="number">2</span></span><br><span class="line">Out[<span class="number">49</span>]: <span class="number">1.15</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: <span class="number">2.3</span> // <span class="number">2</span></span><br><span class="line">Out[<span class="number">50</span>]: <span class="number">1.0</span></span><br></pre></td></tr></table></figure><h5 id="整除-向上取整"><a href="#整除-向上取整" class="headerlink" title="整除-向上取整"></a><code>整除-向上取整</code></h5><p><code>向上取整</code>：使用<code>math</code>库函数实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">52</span>]: <span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">In [<span class="number">53</span>]: math.ceil(<span class="number">2.3</span>/<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">53</span>]: <span class="number">2</span></span><br></pre></td></tr></table></figure><h5 id="幂运算"><a href="#幂运算" class="headerlink" title="幂运算"></a><code>幂运算</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">54</span>]: <span class="number">2</span> * <span class="number">2</span> *<span class="number">2</span></span><br><span class="line">Out[<span class="number">54</span>]: <span class="number">8</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">55</span>]: <span class="number">2</span> **<span class="number">3</span></span><br><span class="line">Out[<span class="number">55</span>]: <span class="number">8</span></span><br></pre></td></tr></table></figure><h5 id="取余"><a href="#取余" class="headerlink" title="取余"></a><code>取余</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">56</span>]: <span class="number">6</span> % <span class="number">4</span></span><br><span class="line">Out[<span class="number">56</span>]: <span class="number">2</span></span><br></pre></td></tr></table></figure><p>这就是我们常见的数值类型的相关使用和运算。</p><h3 id="Python的序列类型"><a href="#Python的序列类型" class="headerlink" title="Python的序列类型"></a>Python的序列类型</h3><p>前面我们遇到的都是一些数值类型的使用与运算，但是如果我想在Python中表示字母怎么办呢？这就是我们接下来看一下序列类型。</p><h4 id="字符串-str"><a href="#字符串-str" class="headerlink" title="字符串-str"></a>字符串-<code>str</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">57</span>]: <span class="string">'abc'</span></span><br><span class="line">Out[<span class="number">57</span>]: <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: type(<span class="string">'abc'</span>)</span><br><span class="line">Out[<span class="number">58</span>]: str</span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: <span class="string">"I'm seven"</span></span><br><span class="line">Out[<span class="number">59</span>]: <span class="string">"I'm seven"</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: <span class="string">"""abcde</span></span><br><span class="line"><span class="string">    ...: fghijk"""</span></span><br><span class="line">Out[<span class="number">60</span>]: <span class="string">'abcde\nfghijk'</span></span><br></pre></td></tr></table></figure><h5 id="字符串的使用"><a href="#字符串的使用" class="headerlink" title="字符串的使用"></a><code>字符串的使用</code></h5><blockquote><p>字符串是通过下标索引值来获取对应值的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">74</span>]: a = <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">75</span>]: a[<span class="number">0</span>]</span><br><span class="line">Out[<span class="number">75</span>]: <span class="string">'a'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">76</span>]: a[<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">76</span>]: <span class="string">'c'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">77</span>]: a[<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">77</span>]: <span class="string">'b'</span></span><br></pre></td></tr></table></figure><h4 id="列表-list"><a href="#列表-list" class="headerlink" title="列表-list"></a>列表-<code>list</code></h4><blockquote><p>数值和字符串的混合使用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">61</span>]: [<span class="string">'abc'</span>, <span class="number">123</span>, <span class="string">'dde'</span>]</span><br><span class="line">Out[<span class="number">61</span>]: [<span class="string">'abc'</span>, <span class="number">123</span>, <span class="string">'dde'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">62</span>]: type([<span class="string">'abc'</span>, <span class="number">123</span>, <span class="string">'dde'</span>])</span><br><span class="line">Out[<span class="number">62</span>]: list</span><br></pre></td></tr></table></figure><h5 id="列表的使用-简单取值"><a href="#列表的使用-简单取值" class="headerlink" title="列表的使用-简单取值"></a><code>列表的使用-简单取值</code></h5><blockquote><p>根据下标取出对应数据，下标从0开始计数：0,1,2,3…</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">65</span>]: a = [<span class="string">'abc'</span>, <span class="number">123</span>, <span class="string">'dde'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">66</span>]: a[<span class="number">0</span>]</span><br><span class="line">Out[<span class="number">66</span>]: <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">67</span>]: a[<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">67</span>]: <span class="number">123</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">68</span>]: a[<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">68</span>]: <span class="string">'dde'</span></span><br></pre></td></tr></table></figure><h5 id="列表的使用-切片"><a href="#列表的使用-切片" class="headerlink" title="列表的使用-切片"></a><code>列表的使用-切片</code></h5><blockquote><p>通过<code>list[start_index : end_index : stride ]</code>来进行<code>切片</code>，<code>切片</code>方式类似数学中的<code>左闭右开区间</code></p><p><code>start_index:</code> 开始的索引值</p><p><code>end_index:</code> 结束的索引值</p><p><code>stride:</code> 步长</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">78</span>]: a = [<span class="string">'abc'</span>, <span class="number">123</span>, <span class="string">'dde'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">79</span>]: a[:<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">79</span>]: [<span class="string">'abc'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">80</span>]: a[:<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">80</span>]: [<span class="string">'abc'</span>, <span class="number">123</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">81</span>]: a[<span class="number">1</span>:]</span><br><span class="line">Out[<span class="number">81</span>]: [<span class="number">123</span>, <span class="string">'dde'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">82</span>]: a[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">Out[<span class="number">82</span>]: [<span class="number">123</span>, <span class="string">'dde'</span>]</span><br><span class="line">    </span><br><span class="line">In [<span class="number">84</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">85</span>]: a[<span class="number">1</span>:<span class="number">6</span>:<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">85</span>]: [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>其中：<code>[-1]:</code> 表示倒着计数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">92</span>]: a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">93</span>]: a[<span class="number">1</span>:]</span><br><span class="line">Out[<span class="number">93</span>]: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">94</span>]: a[<span class="number">-1</span>:]</span><br><span class="line">Out[<span class="number">94</span>]: [<span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">95</span>]: a[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line">Out[<span class="number">95</span>]: [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">96</span>]: a[<span class="number">2</span>:<span class="number">8</span>]</span><br><span class="line">Out[<span class="number">96</span>]: [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">'a'</span>, <span class="string">'b'</span>]</span><br></pre></td></tr></table></figure><h4 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组-tuple"></a>元组-<code>tuple</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">63</span>]: (<span class="number">123</span>, <span class="string">'abc'</span>, <span class="string">'seven'</span>)</span><br><span class="line">Out[<span class="number">63</span>]: (<span class="number">123</span>, <span class="string">'abc'</span>, <span class="string">'seven'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">64</span>]: type((<span class="number">123</span>, <span class="string">'abc'</span>, <span class="string">'seven'</span>))</span><br><span class="line">Out[<span class="number">64</span>]: tuple</span><br></pre></td></tr></table></figure><h5 id="元组的使用"><a href="#元组的使用" class="headerlink" title="元组的使用"></a><code>元组的使用</code></h5><blockquote><p>元组的使用是和列表的类似的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">70</span>]: b = (<span class="number">123</span>, <span class="string">'abc'</span>, <span class="string">'seven'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: b[<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">71</span>]: <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">72</span>]: b[<span class="number">0</span>]</span><br><span class="line">Out[<span class="number">72</span>]: <span class="number">123</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: b[<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">73</span>]: <span class="string">'seven'</span></span><br></pre></td></tr></table></figure><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><blockquote><p>我们经常会使用到这几种类型， 所以这几种类型间的转换又尤为关键</p></blockquote><h5 id="字符串转列表"><a href="#字符串转列表" class="headerlink" title="字符串转列表"></a><code>字符串转列表</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">111</span>]: a = <span class="string">'abcd'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">112</span>]: b = list(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">113</span>]: type(a)</span><br><span class="line">Out[<span class="number">113</span>]: str</span><br><span class="line"></span><br><span class="line">In [<span class="number">114</span>]: type(b)</span><br><span class="line">Out[<span class="number">114</span>]: list</span><br><span class="line"></span><br><span class="line">In [<span class="number">115</span>]: b</span><br><span class="line">Out[<span class="number">115</span>]: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure><h5 id="列表转字符串"><a href="#列表转字符串" class="headerlink" title="列表转字符串"></a><code>列表转字符串</code></h5><blockquote><p>列表变成字符串会把列表里的中括号和空格也变成字符串</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">123</span>]: a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">124</span>]: b = str(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">125</span>]: type(a)</span><br><span class="line">Out[<span class="number">125</span>]: list</span><br><span class="line"></span><br><span class="line">In [<span class="number">126</span>]: type(b)</span><br><span class="line">Out[<span class="number">126</span>]: str</span><br><span class="line"></span><br><span class="line">In [<span class="number">127</span>]: b</span><br><span class="line">Out[<span class="number">127</span>]: <span class="string">"['a', 'b', 'c', 'd']"</span></span><br></pre></td></tr></table></figure><h5 id="字符串转元组"><a href="#字符串转元组" class="headerlink" title="字符串转元组"></a><code>字符串转元组</code></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">116</span>]: a = <span class="string">'abcd'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">117</span>]: b = tuple(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">118</span>]: type(a)</span><br><span class="line">Out[<span class="number">118</span>]: str</span><br><span class="line"></span><br><span class="line">In [<span class="number">119</span>]: type(b)</span><br><span class="line">Out[<span class="number">119</span>]: tuple</span><br><span class="line"></span><br><span class="line">In [<span class="number">120</span>]: b</span><br><span class="line">Out[<span class="number">120</span>]: (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span><br></pre></td></tr></table></figure><h5 id="元组转字符串"><a href="#元组转字符串" class="headerlink" title="元组转字符串"></a><code>元组转字符串</code></h5><blockquote><p>列表变成字符串会把列表里的小括号和空格也变成字符串</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">128</span>]: a = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">129</span>]: b = str(a)</span><br><span class="line"></span><br><span class="line">In [<span class="number">130</span>]: type(a)</span><br><span class="line">Out[<span class="number">130</span>]: tuple</span><br><span class="line"></span><br><span class="line">In [<span class="number">131</span>]: type(b)</span><br><span class="line">Out[<span class="number">131</span>]: str</span><br><span class="line"></span><br><span class="line">In [<span class="number">132</span>]: b</span><br><span class="line">Out[<span class="number">132</span>]: <span class="string">"('a', 'b', 'c', 'd')"</span></span><br></pre></td></tr></table></figure><h4 id="元组和列表的区别"><a href="#元组和列表的区别" class="headerlink" title="元组和列表的区别"></a>元组和列表的区别</h4><blockquote><p>在我们前面的接触过程中，列表和元组基本的功能是一样的，那列表和元组都存在，是为什么呢？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">133</span>]: a = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">134</span>]: b = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">135</span>]: a[<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">135</span>]: <span class="string">'b'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">136</span>]: b[<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">136</span>]: <span class="string">'b'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">137</span>]: b[<span class="number">1</span>] = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">138</span>]: b</span><br><span class="line">Out[<span class="number">138</span>]: [<span class="string">'a'</span>, <span class="number">3</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">139</span>]: a[<span class="number">1</span>] = <span class="number">3</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-139</span><span class="number">-23</span>f2cf2bdf70&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 a[1] = 3</span><br><span class="line"></span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure><p><code>扩展：</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">140</span>]: a = <span class="string">'abcdefg'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">141</span>]: type(a)</span><br><span class="line">Out[<span class="number">141</span>]: str</span><br><span class="line"></span><br><span class="line">In [<span class="number">142</span>]: a[<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">142</span>]: <span class="string">'b'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">143</span>]: a[<span class="number">1</span>] = <span class="string">'s'</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-143</span><span class="number">-55e6</span>e4038777&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 a[1] = 's'</span><br><span class="line"></span><br><span class="line">TypeError: <span class="string">'str'</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure><blockquote><p>总结：列表：可变</p><p>​ 元组： 不可变</p><p>​ 字符串： 不可变</p><p>所以，在序列类型中，只有列表才是可变的类型。</p></blockquote><h4 id="更改字符串和元组的元素"><a href="#更改字符串和元组的元素" class="headerlink" title="更改字符串和元组的元素"></a>更改字符串和元组的元素</h4><blockquote><p>前面我们讲了在序列类型中，只有列表才是可变的类型。那我们如何来更改不可变数据类型的元素呢？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">151</span>]: a = <span class="string">'abcdefg'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">152</span>]: a = a[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">In [<span class="number">153</span>]: a</span><br><span class="line">Out[<span class="number">153</span>]: <span class="string">'bcdefg'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">154</span>]: a = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">155</span>]: a = a[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">156</span>]: a</span><br><span class="line">Out[<span class="number">156</span>]: (<span class="string">'b'</span>, <span class="string">'c'</span>)</span><br></pre></td></tr></table></figure><h4 id="拆包"><a href="#拆包" class="headerlink" title="拆包"></a>拆包</h4><blockquote><p>元组拆包可以应用到任何迭代对象上， 唯一的要求是， 被可迭代对象中的元素数量必须要和这些元素的元组的空档数一致， 除非我们用* 来表示忽略多余的元素。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">157</span>]: a = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">158</span>]: x,*y,z = a</span><br><span class="line"></span><br><span class="line">In [<span class="number">159</span>]: x</span><br><span class="line">Out[<span class="number">159</span>]: <span class="string">'a'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">160</span>]: z</span><br><span class="line">Out[<span class="number">160</span>]: <span class="string">'d'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">161</span>]: y</span><br><span class="line">Out[<span class="number">161</span>]: [<span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">In [<span class="number">162</span>]: x,y,z = a</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-162</span><span class="number">-57</span>ae45ef0060&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 x,y,z = a</span><br><span class="line"></span><br><span class="line">ValueError: too many values to unpack (expected <span class="number">3</span>)</span><br></pre></td></tr></table></figure><blockquote><p><code>x</code> 接收第一个元素，<code>z</code> 接收最后一个元素，由于<code>y</code>前面有<code>*</code>号，所以剩余的元素由<code>y</code>接收</p><p>总结：有多少个元素就需要多少个变量来接收，除非有<code>*</code>号，不然就会报错。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">163</span>]: x,y,z = a,a,a</span><br><span class="line"></span><br><span class="line">In [<span class="number">164</span>]: x</span><br><span class="line">Out[<span class="number">164</span>]: (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">165</span>]: y</span><br><span class="line">Out[<span class="number">165</span>]: (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">166</span>]: z</span><br><span class="line">Out[<span class="number">166</span>]: (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span><br></pre></td></tr></table></figure><h4 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h4><blockquote><p>变量的保存都是保存在内存中</p><p>注意：<code>变量</code>是没有类型的，有类型的是他所<code>指向的数据</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">167</span>]: a = <span class="number">123</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">168</span>]: id(a)</span><br><span class="line">Out[<span class="number">168</span>]: <span class="number">10923232</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">169</span>]: b = <span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">170</span>]: id(b)</span><br><span class="line">Out[<span class="number">170</span>]: <span class="number">140343125492152</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">171</span>]: a = <span class="string">'111'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">172</span>]: id(a)</span><br><span class="line">Out[<span class="number">172</span>]: <span class="number">140342939172344</span></span><br></pre></td></tr></table></figure><blockquote><p><code>id()</code>：查看数据的地址</p><p>总结：赋值给变量是保存在内存中，重新赋值后，变量指向新的地址</p></blockquote><h4 id="变量的引用-成员运算"><a href="#变量的引用-成员运算" class="headerlink" title="变量的引用-成员运算"></a>变量的引用-成员运算</h4><blockquote><p>通过<code>in</code>或者<code>not in</code> 来进行成员运算</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">173</span>]: a = <span class="string">'abcd123'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">174</span>]: <span class="string">'c'</span> <span class="keyword">in</span> a</span><br><span class="line">Out[<span class="number">174</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">175</span>]: <span class="string">'8'</span> <span class="keyword">in</span> a</span><br><span class="line">Out[<span class="number">175</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">176</span>]: <span class="string">'a'</span> <span class="keyword">not</span> <span class="keyword">in</span> a</span><br><span class="line">Out[<span class="number">176</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">177</span>]: <span class="string">'q'</span> <span class="keyword">not</span> <span class="keyword">in</span> a</span><br><span class="line">Out[<span class="number">177</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      python数值类型，序列类型
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python基础" scheme="http://yoursite.com/tags/Python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>开发常用工具</title>
    <link href="http://yoursite.com/2018/11/22/2016-06-02-Develop_Tool/"/>
    <id>http://yoursite.com/2018/11/22/2016-06-02-Develop_Tool/</id>
    <published>2018-11-22T08:43:19.000Z</published>
    <updated>2018-12-11T13:47:11.954Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:49 GMT+0800 (GMT+08:00) --><p>工欲善其事必先利其器，选择一些好的工具可以成吨的提高自己的工作效率。</p><h3 id="个人开发常用工具的收集"><a href="#个人开发常用工具的收集" class="headerlink" title="个人开发常用工具的收集"></a>个人开发常用工具的收集</h3><ul><li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">cmd Markdown</a> 作业部落出版的Markdown编辑器</li><li><a href="https://github.com/rest-client/rest-client" target="_blank" rel="noopener">RESTClient</a> 一个开源的客户端HTTP调试工具。</li><li><a href="https://github.com/getlantern/lantern" target="_blank" rel="noopener">lantern</a> 蓝灯,一款开源的翻墙工具。</li><li><a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">Charles</a> 青花瓷, 一款HTTP/HTTPS的抓包工具。<ul><li><a href="http://blog.devtang.com/2015/11/14/charles-introduction/" target="_blank" rel="noopener">Charles 从入门到精通</a></li></ul></li><li><a href="http://www.sublimetext.com" target="_blank" rel="noopener">Sublime</a> 一款强大的IDE,支持Python、JS、JSON格式化等等…更重要的是<code>Sublime</code>支持的插件很多。<ul><li><a href="http://www.xuanfengge.com/practical-collection-of-sublime-plug-in.html" target="_blank" rel="noopener">实用的sublime插件集合</a></li></ul></li></ul><h3 id="文章配图网站"><a href="#文章配图网站" class="headerlink" title="文章配图网站"></a>文章配图网站</h3><p>还在为文章配图而苦恼吗？点击店面的网站吧，各种各样的图片帮你丰富你的文章。</p><p><a href="http://www.gratisography.com/" target="_blank" rel="noopener">Gratisography</a> gratisography 里面的图片每周都会更新，很多时尚流行的照片在里面，并且适合用在设计项目上。</p><p><a href="http://www.ssyer.com/home-index.html" target="_blank" rel="noopener">ssyer</a>国内的网站，不需要翻墙，速度很快，图片最全。完全免费的图片库。</p><p><a href="https://pixabay.com/" target="_blank" rel="noopener">Pixabay</a> 不同类型的高清摄影照片。</p><h3 id="UI设计网站"><a href="#UI设计网站" class="headerlink" title="UI设计网站"></a>UI设计网站</h3><p>作为一个开发者，自己写些小程序的时候经常会为没有UI而烦恼，下面就是一些UI设计网站，有新颖的UI界面设计，也有单独的UI元素，icon等。</p><p><a href="http://www.ui.cn/" target="_blank" rel="noopener">UI中国</a> 国内潮流的UI设计作品。</p><p><a href="http://www.webdesigndev.com/" target="_blank" rel="noopener">webdesigndev</a> 国外网站设计文章，各种各样的资料看到你眼花缭乱。</p><p><a href="https://dribbble.com/" target="_blank" rel="noopener">dribbble</a> 接触过设计的应该都知道，一个很好的UI设计平台。</p><p><a href="http://www.flaticon.com/" target="_blank" rel="noopener">flaticon</a> 各种icon的设计，一定有你想想要的。</p><p><br></p><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a> » <a href="https://sevenold.github.io/2016/06/Develop_Tool/" target="_blank" rel="noopener">点击阅读原文</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      程序员常用工具
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="开发工具" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-线性回归算法</title>
    <link href="http://yoursite.com/2018/11/22/2018-07-21-ml-linearRegression-python/"/>
    <id>http://yoursite.com/2018/11/22/2018-07-21-ml-linearRegression-python/</id>
    <published>2018-11-22T08:43:19.000Z</published>
    <updated>2018-12-11T13:56:29.491Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:49 GMT+0800 (GMT+08:00) --><h2 id="首先导入所需要的库文件"><a href="#首先导入所需要的库文件" class="headerlink" title="首先导入所需要的库文件"></a>首先导入所需要的库文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt  # 导入可视化库</span><br><span class="line">import numpy as np               # 导入数据处理库</span><br><span class="line">from sklearn import datasets     # 导入sklearn自带的数据集</span><br></pre></td></tr></table></figure><h2 id="把我们的参数值求解公式-theta-X-TX-1-X-TY-转换为代码"><a href="#把我们的参数值求解公式-theta-X-TX-1-X-TY-转换为代码" class="headerlink" title="把我们的参数值求解公式$\theta=(X^TX)^{-1}X^TY$转换为代码"></a>把我们的参数值求解公式$\theta=(X^TX)^{-1}X^TY$转换为代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def fit(self, X, y):                    # 训练集的拟合</span><br><span class="line">        X = np.insert(X, 0, 1, axis=1)  # 增加一个维度</span><br><span class="line">        print (X.shape)        </span><br><span class="line">        X_ = np.linalg.inv(X.T.dot(X))  # 公式求解 -- X.T表示转置，X.dot(Y)表示矩阵相乘</span><br><span class="line">        self.w = X_.dot(X.T).dot(y)     # 返回theta的值</span><br></pre></td></tr></table></figure><h1 id="其中：-X-TX-1-表示为："><a href="#其中：-X-TX-1-表示为：" class="headerlink" title="其中：$(X^TX)^{-1} $表示为："></a>其中：$(X^TX)^{-1} $表示为：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X_ = np.linalg.inv(X.T.dot(X))  # 公式求解 -- X.T表示转置，X.dot(Y)表示矩阵相乘</span><br><span class="line"> np.linalg.inv() 表示求逆矩阵</span><br></pre></td></tr></table></figure><h1 id="其中：-X-TY-表示为："><a href="#其中：-X-TY-表示为：" class="headerlink" title="其中：$X^TY $表示为："></a>其中：$X^TY $表示为：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X.T.dot(X)</span><br></pre></td></tr></table></figure><h1 id="所以完整公式-theta-X-TX-1-X-TY-表示为："><a href="#所以完整公式-theta-X-TX-1-X-TY-表示为：" class="headerlink" title="所以完整公式$\theta=(X^TX)^{-1}X^TY$表示为："></a>所以完整公式$\theta=(X^TX)^{-1}X^TY$表示为：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_.dot(X.T).dot(y)</span><br></pre></td></tr></table></figure><h2 id="由于我们最终得到的线性回归函数是-y-theta-x-b-即预测函数："><a href="#由于我们最终得到的线性回归函数是-y-theta-x-b-即预测函数：" class="headerlink" title="由于我们最终得到的线性回归函数是$y=\theta x+b$即预测函数："></a>由于我们最终得到的线性回归函数是$y=\theta x+b$即预测函数：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def predict(self, X):               # 测试集的测试反馈</span><br><span class="line">                                    # 为偏置权值插入常数项</span><br><span class="line">    X = np.insert(X, 0, 1, axis=1)  # 增加一个维度</span><br><span class="line">    y_pred = X.dot(self.w)          # 测试集与拟合的训练集相乘</span><br><span class="line">    return y_pred                   # 返回最终的预测值</span><br></pre></td></tr></table></figure><h2 id="其中得到的预测结果y-pred-X-text-cdot-theta"><a href="#其中得到的预测结果y-pred-X-text-cdot-theta" class="headerlink" title="其中得到的预测结果y_pred=X_text$\cdot\theta$"></a>其中得到的预测结果y_pred=X_text$\cdot\theta$</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_pred = X.dot(self.w)          # 测试集与参数值相乘</span><br></pre></td></tr></table></figure><h2 id="最终得出线性回归代码："><a href="#最终得出线性回归代码：" class="headerlink" title="最终得出线性回归代码："></a>最终得出线性回归代码：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class LinearRegression():</span><br><span class="line">    def __init__(self):          # 新建变量</span><br><span class="line">        self.w = None</span><br><span class="line"></span><br><span class="line">    def fit(self, X, y):         # 训练集的拟合</span><br><span class="line">        X = np.insert(X, 0, 1, axis=1)  # 增加一个维度</span><br><span class="line">        print (X.shape)        </span><br><span class="line">        X_ = np.linalg.inv(X.T.dot(X))  # 公式求解 -- X.T表示转置，X.dot(Y)表示矩阵相乘</span><br><span class="line">        self.w = X_.dot(X.T).dot(y)     # 返回theta的值</span><br><span class="line"></span><br><span class="line">    def predict(self, X):               # 测试集的测试反馈</span><br><span class="line">                                        # 为偏置权值插入常数项</span><br><span class="line">        X = np.insert(X, 0, 1, axis=1)  # 增加一个维度</span><br><span class="line">        y_pred = X.dot(self.w)          # 测试集与拟合的训练集相乘</span><br><span class="line">        return y_pred                   # 返回最终的预测值</span><br></pre></td></tr></table></figure><h2 id="同时我们需要得出预测值与真实值的一个平方平均值"><a href="#同时我们需要得出预测值与真实值的一个平方平均值" class="headerlink" title="同时我们需要得出预测值与真实值的一个平方平均值"></a>同时我们需要得出预测值与真实值的一个平方平均值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def mean_squared_error(y_true, y_pred):</span><br><span class="line">                                        #真实数据与预测数据之间的差值（平方平均）</span><br><span class="line">    mse = np.mean(np.power(y_true - y_pred, 2))</span><br><span class="line">    return mse</span><br></pre></td></tr></table></figure><h2 id="最后就是进行我数据的加载，训练，测试过程以及可视化"><a href="#最后就是进行我数据的加载，训练，测试过程以及可视化" class="headerlink" title="最后就是进行我数据的加载，训练，测试过程以及可视化"></a>最后就是进行我数据的加载，训练，测试过程以及可视化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">def main():</span><br><span class="line">    # 第一步：导入数据</span><br><span class="line">    # 加载糖尿病数据集</span><br><span class="line">    </span><br><span class="line">    diabetes = datasets.load_diabetes()</span><br><span class="line">    # 只使用其中一个特征值</span><br><span class="line">    X = diabetes.data[:, np.newaxis, 2]</span><br><span class="line">    print (X.shape)</span><br><span class="line"></span><br><span class="line">    #第二步：将数据分为训练集以及测试集</span><br><span class="line">    x_train, x_test = X[:-20], X[-20:]</span><br><span class="line">    y_train, y_test = diabetes.target[:-20], diabetes.target[-20:]</span><br><span class="line"></span><br><span class="line">    #第三步：导入线性回归类（之前定义的）</span><br><span class="line">    clf = LinearRegression()</span><br><span class="line">    clf.fit(x_train, y_train)    # 训练</span><br><span class="line">    y_pred = clf.predict(x_test) # 测试</span><br><span class="line"></span><br><span class="line">    #第四步：测试误差计算（需要引入一个函数）</span><br><span class="line">    # 打印平均值平方误差</span><br><span class="line">    print (&quot;Mean Squared Error:&quot;, mean_squared_error(y_test, y_pred))</span><br><span class="line"></span><br><span class="line">    #matplotlib可视化输出</span><br><span class="line">    # Plot the results</span><br><span class="line">    plt.scatter(x_test[:,0], y_test,  color=&apos;black&apos;)         # 散点输出</span><br><span class="line">    plt.plot(x_test[:,0], y_pred, color=&apos;blue&apos;, linewidth=3) # 预测输出</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h2 id="可视化结果"><a href="#可视化结果" class="headerlink" title="可视化结果"></a>可视化结果</h2><p><img src="/images/ml/5.png" alt="image"></p><h2 id="完整线性回归的代码"><a href="#完整线性回归的代码" class="headerlink" title="完整线性回归的代码"></a>完整线性回归的代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt  # 导入可视化库</span><br><span class="line">import numpy as np               # 导入数据处理库</span><br><span class="line">from sklearn import datasets     # 导入sklearn自带的数据集</span><br><span class="line">import csv</span><br><span class="line"></span><br><span class="line">class LinearRegression():</span><br><span class="line">    def __init__(self):          # 新建变量</span><br><span class="line">        self.w = None</span><br><span class="line"></span><br><span class="line">    def fit(self, X, y):         # 训练集的拟合</span><br><span class="line">        X = np.insert(X, 0, 1, axis=1)  # 增加一个维度</span><br><span class="line">        print (X.shape)        </span><br><span class="line">        X_ = np.linalg.inv(X.T.dot(X))  # 公式求解 -- X.T表示转置，X.dot(Y)表示矩阵相乘</span><br><span class="line">        self.w = X_.dot(X.T).dot(y)     # 返回theta的值</span><br><span class="line"></span><br><span class="line">    def predict(self, X):               # 测试集的测试反馈</span><br><span class="line">                                        # 为偏置权值插入常数项</span><br><span class="line">        X = np.insert(X, 0, 1, axis=1)  # 增加一个维度</span><br><span class="line">        y_pred = X.dot(self.w)          # 测试集与拟合的训练集相乘</span><br><span class="line">        return y_pred                   # 返回最终的预测值</span><br><span class="line"></span><br><span class="line">def mean_squared_error(y_true, y_pred):</span><br><span class="line">                                        #真实数据与预测数据之间的差值（平方平均）</span><br><span class="line">    mse = np.mean(np.power(y_true - y_pred, 2))</span><br><span class="line">    return mse</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 第一步：导入数据</span><br><span class="line">    # 加载糖尿病数据集</span><br><span class="line">    diabetes = datasets.load_diabetes()</span><br><span class="line">    # 只使用其中一个特征值(把一个422x10的矩阵提取其中一列变成422x1)</span><br><span class="line">    X = diabetes.data[:, np.newaxis, 2]  # np.newaxis的作用就是在原来的数组上增加一个维度。2表示提取第三列数据</span><br><span class="line">    print (X.shape)</span><br><span class="line"></span><br><span class="line">    # 第二步：将数据分为训练集以及测试集</span><br><span class="line">    x_train, x_test = X[:-20], X[-20:]</span><br><span class="line">    print(x_train.shape,x_test.shape)  # (422, 1) (20, 1)</span><br><span class="line">    # 将目标分为训练/测试集合</span><br><span class="line">    y_train, y_test = diabetes.target[:-20], diabetes.target[-20:]</span><br><span class="line">    print(y_train.shape,y_test.shape)  # (422,) (20,)</span><br><span class="line"></span><br><span class="line">    #第三步：导入线性回归类（之前定义的）</span><br><span class="line">    clf = LinearRegression()</span><br><span class="line">    clf.fit(x_train, y_train)    # 训练</span><br><span class="line">    y_pred = clf.predict(x_test) # 测试</span><br><span class="line"></span><br><span class="line">    #第四步：测试误差计算（需要引入一个函数）</span><br><span class="line">    # 打印平均值平方误差</span><br><span class="line">    print (&quot;Mean Squared Error:&quot;, mean_squared_error(y_test, y_pred))  # Mean Squared Error: 2548.072398725972</span><br><span class="line"></span><br><span class="line">    #matplotlib可视化输出</span><br><span class="line">    # Plot the results</span><br><span class="line">    plt.scatter(x_test[:,0], y_test,  color=&apos;black&apos;)         # 散点输出</span><br><span class="line">    plt.plot(x_test[:,0], y_pred, color=&apos;blue&apos;, linewidth=3) # 预测输出</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a> » <a href="https://sevenold.github.io/2018/07/ml-linearRegression-python/" target="_blank" rel="noopener">点击阅读原文</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      机器学习入门篇-机器学习-线性回归算法python实现
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="MachineLearning" scheme="http://yoursite.com/tags/MachineLearning/"/>
    
      <category term="线性回归" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-线性回归算法</title>
    <link href="http://yoursite.com/2018/11/22/2018-07-20-ml-linearRegression/"/>
    <id>http://yoursite.com/2018/11/22/2018-07-20-ml-linearRegression/</id>
    <published>2018-11-22T08:43:19.000Z</published>
    <updated>2018-12-11T13:56:07.052Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:49 GMT+0800 (GMT+08:00) --><h1 id="线性回归–-y-wx-b"><a href="#线性回归–-y-wx-b" class="headerlink" title="线性回归–$y=wx+b$"></a><strong>线性回归</strong>–$y=wx+b$</h1><p><strong>回归</strong>，统计学术语，表示变量之间的某种数量依存关系，并由此引出回归方程，回归系数。</p><h3 id="线性回归（Linear-Regression）"><a href="#线性回归（Linear-Regression）" class="headerlink" title="线性回归（Linear Regression）"></a><strong>线性回归（Linear Regression）</strong></h3><p>数理统计中回归分析，用来确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法，其表达形式为$y = wx+e$，e为误差服从均值为0的正态分布，其中只有一个自变量的情况称为简单回归，多个自变量的情况叫多元回归。</p><p>注意，统计学中的回归并如线性回归非与严格直线函数完全能拟合，所以我们统计中称之为回归用以与其直线函数区别。</p><p>我们先来看下这个图</p><p><img src="/images/math/1.png" alt="image"></p><p>这个是近期比较火的现金贷产品的贷款额度。这个表格表示的是<strong>可贷款的金额 </strong>与 <strong>工资 </strong>和 <strong>房屋面积</strong>之间的关系，其中 <strong>工资</strong> 和 <strong>房屋面积</strong> 为 特征，<strong>可贷款金额</strong>为目标函数值。 那么根据线性函数可得到以下公式。</p><h2 id="h-theta-x-theta-1-x-1-theta-2-x-2"><a href="#h-theta-x-theta-1-x-1-theta-2-x-2" class="headerlink" title="$h_\theta(x)=\theta_{1}x_{1}+\theta_{2}x_{2} $"></a>$h_\theta(x)=\theta_{1}x_{1}+\theta_{2}x_{2} $</h2><p>上面的这个式子是当一个模型只有两个特征$$(x_1,x_2)$$的时候的线性回归式子。 正常情况下，现金贷中可贷款的额度和用户的很多特征相关联，并不只是简单的这两个特征。所以我们需要把这个式子进行通用化。 假如有n个特征的话，那么式子就会变成下面的样子</p><h2 id="h-theta-x-theta-1-x-1-theta-2-x-2-cdot-cdot-cdot-cdot-cdot-theta-n-x-n-sum-i-1-n-theta-i-x-i"><a href="#h-theta-x-theta-1-x-1-theta-2-x-2-cdot-cdot-cdot-cdot-cdot-theta-n-x-n-sum-i-1-n-theta-i-x-i" class="headerlink" title="$h_\theta(x)=\theta_{1}x_{1}+\theta_{2}x_{2} + \cdot \cdot \cdot \cdot \cdot+\theta_{n}x_{n} = \sum_{i=1}^{n}\theta_{i}x_{i}$"></a>$h_\theta(x)=\theta_{1}x_{1}+\theta_{2}x_{2} + \cdot \cdot \cdot \cdot \cdot+\theta_{n}x_{n} = \sum_{i=1}^{n}\theta_{i}x_{i}$</h2><h3 id="利用矩阵的知识对线性公式进行整合。"><a href="#利用矩阵的知识对线性公式进行整合。" class="headerlink" title="利用矩阵的知识对线性公式进行整合。"></a>利用矩阵的知识对线性公式进行整合。</h3><p>因为机器学习中基本上都是用矩阵的方式来表示参数的，也就是说我们需要把这个多项求和的式子用矩阵的方式表达出来，这样才方便后续的计算。</p><h2 id="theta-i-times-1-theta-1-theta-2-cdot-cdot-cdot-theta-i"><a href="#theta-i-times-1-theta-1-theta-2-cdot-cdot-cdot-theta-i" class="headerlink" title="$\theta_{i \times 1} = [\theta_1,\theta_2,\cdot\cdot\cdot\theta_i,]$"></a>$\theta_{i \times 1} = [\theta_1,\theta_2,\cdot\cdot\cdot\theta_i,]$</h2><h2 id="X-i-times1-x-1-x-2-cdot-cdot-cdot-x-i"><a href="#X-i-times1-x-1-x-2-cdot-cdot-cdot-x-i" class="headerlink" title="$X_{i\times1}=[x_1,x_2,\cdot \cdot \cdot x_i]$"></a>$X_{i\times1}=[x_1,x_2,\cdot \cdot \cdot x_i]$</h2><h3 id="把上述线性函数写成矩阵相乘的形式"><a href="#把上述线性函数写成矩阵相乘的形式" class="headerlink" title="把上述线性函数写成矩阵相乘的形式"></a>把上述线性函数写成矩阵相乘的形式</h3><h2 id="theta-TX-begin-bmatrix-theta-1-theta-2-cdot-cdot-cdot-theta-i-end-bmatrix-cdot-x-1-x-2-cdot-cdot-cdot-x-i-sum-i-1-n-theta-i-x-i"><a href="#theta-TX-begin-bmatrix-theta-1-theta-2-cdot-cdot-cdot-theta-i-end-bmatrix-cdot-x-1-x-2-cdot-cdot-cdot-x-i-sum-i-1-n-theta-i-x-i" class="headerlink" title="$\theta^TX=\begin{bmatrix}  \theta_1 \\  \theta_2 \\ \cdot \\ \cdot \\ \cdot \\ \theta_i \end{bmatrix} \cdot [x_1,x_2,\cdot \cdot \cdot x_i] = \sum_{i=1}^{n}\theta_{i}x_{i} $"></a>$\theta^TX=\begin{bmatrix} \theta_1 \\ \theta_2 \\ \cdot \\ \cdot \\ \cdot \\ \theta_i \end{bmatrix} \cdot [x_1,x_2,\cdot \cdot \cdot x_i] = \sum_{i=1}^{n}\theta_{i}x_{i} $</h2><p>我们把权重参数和特征参数，都看成是1行n列的矩阵(或者是行向量)。那么就可以根据矩阵乘法的相关知识，把上述多项求和的式子，转换成矩阵的乘法的表达式。 由此我们就把多项求和化简称了 。</p><h2 id="h-theta-x-theta-TX"><a href="#h-theta-x-theta-TX" class="headerlink" title="$h_\theta(x)=\theta^TX$"></a>$h_\theta(x)=\theta^TX$</h2><h3 id="误差项的分析"><a href="#误差项的分析" class="headerlink" title="误差项的分析"></a>误差项的分析</h3><p>原式:$$y =wx+b$$ 其中$b$就是我们所说的偏移量，或者叫误差项。</p><p>我们再看看下面这个图：</p><p><img src="/images/math/2.png" alt="image"></p><p>图中的横坐标$x_1$ 和 X$x)_2$分别代表着 两个特征(工资、房屋平米) 。纵坐标Y代表目标(可贷款的额度)。其中红点代表的就是实际的目标值(每个人可贷款的额度).而平面上和红点竖向相交的点代表着我们根据线性回归模型得到的点。也就是说实际得到的钱和预估的钱之间是有一定误差的，这个就是误差项。 因为误差项是真实值和误差值之间的一个差距。那么肯定我们希望误差项越小越好。</p><p>然后我们对应整理成线性回归函数：</p><h2 id="h-theta-x-theta-Tx-varepsilon"><a href="#h-theta-x-theta-Tx-varepsilon" class="headerlink" title="$h_\theta(x)=\theta^Tx+\varepsilon$"></a>$h_\theta(x)=\theta^Tx+\varepsilon$</h2><p>我们根据实际情况，假设认为这个误差项是满足以下几个条件的。</p><ol><li>误差$\varepsilon_{(i)}$是独立。</li><li>具有相同的分布。</li><li>服从均值为0方差为$\theta^2$的高斯分布。</li></ol><p>然我们回到刚开始的现金贷产品的贷款额度问题上面</p><p>1.独立：张三和李四一起使用这款产品，可贷款额互不影响</p><p>2.同分布：张三和李四是使用的是同一款产品</p><p>3.高斯分布：绝大多数的情况下，在一个的空间内浮动不大</p><h3 id="似然函数的理解"><a href="#似然函数的理解" class="headerlink" title="似然函数的理解"></a>似然函数的理解</h3><p>由前面两步，我们已经把线性回归模型，推导成下面的这个式子了</p><h1 id="y-i-theta-Tx-i-varepsilon-i"><a href="#y-i-theta-Tx-i-varepsilon-i" class="headerlink" title="$y_{(i)}=\theta^Tx_i+\varepsilon_i$"></a>$y_{(i)}=\theta^Tx_i+\varepsilon_i$</h1><p>我们已经知道误差项是符合高斯分布的，所以误差项的概率值：</p><h1 id="P-varepsilon-i-frac-1-sqrt-2-pi-sigma-e-frac-varepsilon-i-2-2-sigma-2"><a href="#P-varepsilon-i-frac-1-sqrt-2-pi-sigma-e-frac-varepsilon-i-2-2-sigma-2" class="headerlink" title="$P(\varepsilon_i)=\frac{1}{\sqrt{2\pi}\sigma}e^{-(\frac{(\varepsilon_i)^2}{2\sigma^2})}$"></a>$P(\varepsilon_i)=\frac{1}{\sqrt{2\pi}\sigma}e^{-(\frac{(\varepsilon_i)^2}{2\sigma^2})}$</h1><p>然后把误差值带入式子中:</p><h1 id="P-y-i-x-i-theta-frac-1-sqrt-2-pi-sigma-e-frac-y-i-theta-Tx-i-2-2-sigma-2"><a href="#P-y-i-x-i-theta-frac-1-sqrt-2-pi-sigma-e-frac-y-i-theta-Tx-i-2-2-sigma-2" class="headerlink" title="$P(y_i|x_i,\theta)=\frac{1}{\sqrt{2\pi}\sigma}e^{-(\frac{(y_i-\theta^Tx_i)^2}{2\sigma^2})}$"></a>$P(y_i|x_i,\theta)=\frac{1}{\sqrt{2\pi}\sigma}e^{-(\frac{(y_i-\theta^Tx_i)^2}{2\sigma^2})}$</h1><p>由于是误差值，所以是越小越好，所以我们接下来就是讨论什么样的特征值和特征组合能够让误差值最小，现在就要看似然函数的作用了，似然函数的作用就是要根据样本求什么样的参数和特征的组成能够接近真实值，所以越接近真实值则误差就越小。</p><p>引入似然函数(似然函数就是求能让真实值和预测值相等的那个参数的 )：</p><h1 id="L-theta-prod-i-1-N-P-y-i-x-i-theta-prod-i-1-N-frac-1-sqrt-2-pi-sigma-e-frac-y-i-theta-Tx-i-2-2-sigma-2"><a href="#L-theta-prod-i-1-N-P-y-i-x-i-theta-prod-i-1-N-frac-1-sqrt-2-pi-sigma-e-frac-y-i-theta-Tx-i-2-2-sigma-2" class="headerlink" title="$L(\theta) = \prod_{i=1}^{N} P(y_i|x_i,\theta)=\prod_{i=1}^{N}\frac{1}{\sqrt{2\pi}\sigma}e^{-(\frac{(y_i-\theta^Tx_i)^2}{2\sigma^2})}$"></a>$L(\theta) = \prod_{i=1}^{N} P(y_i|x_i,\theta)=\prod_{i=1}^{N}\frac{1}{\sqrt{2\pi}\sigma}e^{-(\frac{(y_i-\theta^Tx_i)^2}{2\sigma^2})}$</h1><p>$\prod$表示各元素相乘的结果</p><p>上面的式子是多个参数的乘积的形式，很难进行计算，所以我们又采用了对数的一个小技巧，把多个数相乘，转化成多个数相加的形式。</p><p>因为对数的性质</p><h2 id="logA-cdot-B-logA-logB"><a href="#logA-cdot-B-logA-logB" class="headerlink" title="$logA\cdot B = logA+logB$"></a>$logA\cdot B = logA+logB$</h2><p>根据上面的这种换算关系，我们就把似然函数的式子换算成下面的这个。 (因为似然函数是越大越好，似然函数的值和对数似然函数的值是成正比的，对值求对数，并不会影响到最后求极限的值。所以才敢进行对数处理。)</p><h1 id="l-theta-logL-theta-log-prod-i-1-N-frac-1-sqrt-2-pi-sigma-e-frac-y-i-theta-Tx-i-2-2-sigma-2"><a href="#l-theta-logL-theta-log-prod-i-1-N-frac-1-sqrt-2-pi-sigma-e-frac-y-i-theta-Tx-i-2-2-sigma-2" class="headerlink" title="$l(\theta) = logL(\theta) = log\prod_{i=1}^{N}\frac{1}{\sqrt{2\pi}\sigma}e^{-(\frac{(y_i-\theta^Tx_i)^2}{2\sigma^2})}$"></a>$l(\theta) = logL(\theta) = log\prod_{i=1}^{N}\frac{1}{\sqrt{2\pi}\sigma}e^{-(\frac{(y_i-\theta^Tx_i)^2}{2\sigma^2})}$</h1><p>对上式进行整理：</p><h1 id="l-theta-logL-theta-sum-i-1-N-log-frac-1-sqrt-2-pi-sigma-e-frac-y-i-theta-Tx-i-2-2-sigma-2"><a href="#l-theta-logL-theta-sum-i-1-N-log-frac-1-sqrt-2-pi-sigma-e-frac-y-i-theta-Tx-i-2-2-sigma-2" class="headerlink" title="$l(\theta) = logL(\theta) = \sum_{i=1}^{N}log\frac{1}{\sqrt{2\pi}\sigma}e^{-(\frac{(y_i-\theta^Tx_i)^2}{2\sigma^2})}$"></a>$l(\theta) = logL(\theta) = \sum_{i=1}^{N}log\frac{1}{\sqrt{2\pi}\sigma}e^{-(\frac{(y_i-\theta^Tx_i)^2}{2\sigma^2})}$</h1><h1 id="sum-i-1-N-log-frac-1-sqrt-2-pi-sigma-loge-frac-y-i-theta-Tx-i-2-2-sigma-2"><a href="#sum-i-1-N-log-frac-1-sqrt-2-pi-sigma-loge-frac-y-i-theta-Tx-i-2-2-sigma-2" class="headerlink" title="$= \sum_{i=1}^{N}(log\frac{1}{\sqrt{2\pi}\sigma}+loge^{-(\frac{(y_i-\theta^Tx_i)^2}{2\sigma^2})})$"></a>$= \sum_{i=1}^{N}(log\frac{1}{\sqrt{2\pi}\sigma}+loge^{-(\frac{(y_i-\theta^Tx_i)^2}{2\sigma^2})})$</h1><h1 id="Nlog-frac-1-sqrt-2-pi-sigma-frac-1-2-sigma-2-sum-i-1-N-y-i-theta-Tx-i-2"><a href="#Nlog-frac-1-sqrt-2-pi-sigma-frac-1-2-sigma-2-sum-i-1-N-y-i-theta-Tx-i-2" class="headerlink" title="$= Nlog\frac{1}{\sqrt{2\pi}\sigma}-\frac{1}{2\sigma^2}\sum_{i=1}^{N}(y_i-\theta^Tx_i)^2 $"></a>$= Nlog\frac{1}{\sqrt{2\pi}\sigma}-\frac{1}{2\sigma^2}\sum_{i=1}^{N}(y_i-\theta^Tx_i)^2 $</h1><p>因为：</p><p>$Nlog\frac{1}{\sqrt{2\pi}\sigma}$ 是一个定值</p><p>似然函数是要越大越好</p><p>所以：</p><h2 id="frac-1-2-sigma-2-y-i-theta-Tx-i-2-越小越好"><a href="#frac-1-2-sigma-2-y-i-theta-Tx-i-2-越小越好" class="headerlink" title="$-\frac{1}{2\sigma^2}(y_i-\theta^Tx_i)^2$越小越好"></a>$-\frac{1}{2\sigma^2}(y_i-\theta^Tx_i)^2$越小越好</h2><p>再因为：</p><h2 id="frac-1-2-sigma-2-也为定值"><a href="#frac-1-2-sigma-2-也为定值" class="headerlink" title="$-\frac{1}{2\sigma^2}$也为定值"></a>$-\frac{1}{2\sigma^2}$也为定值</h2><p>最终：</p><p>$l(\theta) = \sum_{i=1}^{N}(y_i-\theta^Tx_i)^2$</p><h2 id="sum-i-1-N-y-i-theta-Tx-i-2-越小越好——最小二乘法（损失函数）"><a href="#sum-i-1-N-y-i-theta-Tx-i-2-越小越好——最小二乘法（损失函数）" class="headerlink" title="$\sum_{i=1}^{N}(y_i-\theta^Tx_i)^2$越小越好——最小二乘法（损失函数）"></a>$\sum_{i=1}^{N}(y_i-\theta^Tx_i)^2$越小越好——最小二乘法（损失函数）</h2><h3 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a><strong>最小二乘法</strong></h3><p>上述代价函数中使用的均方误差，其实对应了我们常用的欧几里得的距离（欧式距离，<strong>Euclidean Distance</strong>）, 基于均方误差最小化进行模型求解的方法称为“最小二乘法”（<strong>least square method</strong>），即通过最小化误差的平方和寻找数据的最佳函数匹配；</p><p>当函数子变量为一维时，最小二乘法就蜕变成寻找一条直线；</p><p>然后我们把得到的损失函数推广到n维，转换成矩阵形式（参考前面利用矩阵的知识对线性公式进行整合）：</p><h1 id="J-theta-sum-i-1-N-y-i-theta-Tx-i-2-损失函数"><a href="#J-theta-sum-i-1-N-y-i-theta-Tx-i-2-损失函数" class="headerlink" title="$J(\theta)=\sum_{i=1}^{N}(y_i-\theta^Tx_i)^2$       损失函数"></a>$J(\theta)=\sum_{i=1}^{N}(y_i-\theta^Tx_i)^2$ 损失函数</h1><h3 id="其对应的均方误差表示为如下矩阵"><a href="#其对应的均方误差表示为如下矩阵" class="headerlink" title="其对应的均方误差表示为如下矩阵"></a>其对应的均方误差表示为如下矩阵</h3><h1 id="J-theta-y-X-theta-T-y-X-theta"><a href="#J-theta-y-X-theta-T-y-X-theta" class="headerlink" title="$J(\theta) = {(y-X\theta)^T(y-X\theta)}$"></a>$J(\theta) = {(y-X\theta)^T(y-X\theta)}$</h1><h5 id="其中X："><a href="#其中X：" class="headerlink" title="其中X："></a>其中X：</h5><p>$X=\begin{bmatrix} 1 &amp;&amp; x_1^T \\ 1 &amp;&amp; x_2^T \\ \cdot \\ \cdot \\ \cdot \\ 1 &amp;&amp; x_N^T \end{bmatrix} =\begin{bmatrix} 1 &amp;&amp; x_{11} &amp;&amp; x_{12} &amp;&amp; \cdot \cdot \cdot x_{1n} \\ 1 &amp;&amp; x_{21} &amp;&amp; x_{22} &amp;&amp; \cdot \cdot \cdot x_{2n} \\ \cdot \\ \cdot \\ \cdot \\ 1&amp;&amp; x_{m1} &amp;&amp; x_{m2} &amp;&amp; \cdot \cdot \cdot x_{mn} \end{bmatrix} $</p><p>对$\theta​$求导</p><h2 id="J-theta-y-X-theta-T-y-X-theta-y-Ty-y-Tx-theta-theta-Tx-Ty-theta-Tx-Tx-theta"><a href="#J-theta-y-X-theta-T-y-X-theta-y-Ty-y-Tx-theta-theta-Tx-Ty-theta-Tx-Tx-theta" class="headerlink" title="$J(\theta) = {(y-X\theta)^T(y-X\theta)}=y^Ty-y^Tx\theta-\theta^Tx^Ty+\theta^Tx^Tx\theta$"></a>$J(\theta) = {(y-X\theta)^T(y-X\theta)}=y^Ty-y^Tx\theta-\theta^Tx^Ty+\theta^Tx^Tx\theta$</h2><h1 id="frac-partial-J-theta-partial-theta-frac-partial-y-Ty-partial-theta-frac-partial-y-Tx-theta-partial-theta-frac-partial-theta-Tx-Ty-partial-theta-frac-partial-theta-Tx-Tx-theta-partial-theta"><a href="#frac-partial-J-theta-partial-theta-frac-partial-y-Ty-partial-theta-frac-partial-y-Tx-theta-partial-theta-frac-partial-theta-Tx-Ty-partial-theta-frac-partial-theta-Tx-Tx-theta-partial-theta" class="headerlink" title="$\frac{\partial J(\theta)}{\partial(\theta)} = \frac{\partial y^Ty}{\partial(\theta)} - \frac{\partial y^Tx\theta}{\partial(\theta)} - \frac{\partial \theta^Tx^Ty}{\partial(\theta)} + \frac{\partial \theta^Tx^Tx\theta}{\partial(\theta)} $"></a>$\frac{\partial J(\theta)}{\partial(\theta)} = \frac{\partial y^Ty}{\partial(\theta)} - \frac{\partial y^Tx\theta}{\partial(\theta)} - \frac{\partial \theta^Tx^Ty}{\partial(\theta)} + \frac{\partial \theta^Tx^Tx\theta}{\partial(\theta)} $</h1><h1 id="frac-partial-J-theta-partial-theta-0-x-Ty-x-Ty-2x-Tx-theta"><a href="#frac-partial-J-theta-partial-theta-0-x-Ty-x-Ty-2x-Tx-theta" class="headerlink" title="$\frac{\partial J(\theta)}{\partial(\theta)} = 0-x^Ty-x^Ty+2x^Tx\theta$"></a>$\frac{\partial J(\theta)}{\partial(\theta)} = 0-x^Ty-x^Ty+2x^Tx\theta$</h1><h1 id="frac-partial-J-theta-partial-theta-2x-T-x-theta-y"><a href="#frac-partial-J-theta-partial-theta-2x-T-x-theta-y" class="headerlink" title="$\frac{\partial J(\theta)}{\partial(\theta)} =2x^T(x\theta-y)$"></a>$\frac{\partial J(\theta)}{\partial(\theta)} =2x^T(x\theta-y)$</h1><p>根据导数的性质，该值在导数为0时为最小</p><p>所以：根据微积分定理，令上式等于零，可以得到 θ 最优的闭式解。当</p><h2 id="2-x-Ty-x-Tx-theta-0-时取得最小"><a href="#2-x-Ty-x-Tx-theta-0-时取得最小" class="headerlink" title="$2(x^Ty-x^Tx\theta)=0$时取得最小"></a>$2(x^Ty-x^Tx\theta)=0$时取得最小</h2><p>矩阵求导的知识：</p><p><img src="/images/math/3.png" alt="image"></p><h1 id="最终：-theta-x-Tx-1-x-Ty"><a href="#最终：-theta-x-Tx-1-x-Ty" class="headerlink" title="最终：$\theta = (x^Tx)^{-1}x^Ty$"></a>最终：$\theta = (x^Tx)^{-1}x^Ty$</h1><p>X和Y都是已知的，那么得到了最终的参数值。</p><h3 id="那我们来看看数学原理"><a href="#那我们来看看数学原理" class="headerlink" title="那我们来看看数学原理"></a>那我们来看看<strong>数学原理</strong></h3><p><strong>微积分角度来讲</strong>，最小二乘法是采用非迭代法，针对代价函数求导数而得出全局极值，进而对所给定参数进行估算。</p><p><strong>计算数学角度来讲</strong>，最小二乘法的本质上是一个线性优化问题，试图找到一个最优解。</p><p><strong>线性代数角度来讲</strong>，最小二乘法是求解线性方程组，当方程个数大于未知量个数，其方程本身 无解，而最小二乘法则试图找到最优残差。</p><p><strong>几何角度来讲</strong>，最小二乘法中的几何意义是高维空间中的一个向量在低维子空间的投影。</p><p><strong>概率论角度来讲</strong>，如果数据的观测误差是/或者满足高斯分布，则最小二乘解就是使得观测数据出现概率最大的解，即<strong>最大似然估计-Maximum Likelihood Estimate，MLE</strong>（利用已知的样本结果，反推最有可能（最大概率）导致这样结果的参数值）。</p><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a> » <a href="https://sevenold.github.io/2018/07/ml-linearRegression/" target="_blank" rel="noopener">点击阅读原文</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      机器学习入门篇-机器学习-线性回归算法实现
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="MachineLearning" scheme="http://yoursite.com/tags/MachineLearning/"/>
    
      <category term="线性回归" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Xpath提取网页数据</title>
    <link href="http://yoursite.com/2018/11/21/2018-11-21-reptile-xml/"/>
    <id>http://yoursite.com/2018/11/21/2018-11-21-reptile-xml/</id>
    <published>2018-11-20T16:00:00.000Z</published>
    <updated>2018-12-11T14:25:04.980Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:50 GMT+0800 (GMT+08:00) --><p>转载自：简书-<a href="https://www.jianshu.com/u/948da055a416" target="_blank" rel="noopener">王南北</a></p><h3 id="Xpath提取网页数据"><a href="#Xpath提取网页数据" class="headerlink" title="Xpath提取网页数据"></a>Xpath提取网页数据</h3><p>XPath 是一门在 XML 文档中查找信息的语言。XPath 用于在 XML 文档中通过元素和属性进行导航。</p><p>相比于<code>BeautifulSoup</code>，<code>Xpath</code>在提取数据时会更加的方便。</p><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在Python中很多库都有提供<code>Xpath</code>的功能，但是最基本的还是<code>lxml</code>这个库，效率最高。在之前<code>BeautifulSoup</code>章节中我们也介绍到了<code>lxml</code>是如何安装的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br></pre></td></tr></table></figure><hr><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>XPath 使用路径表达式在 XML 文档中选取节点。节点是通过沿着路径或者 step 来选取的。</p><p>我们将用以下的HTML文档来进行演示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">html_doc = '''<span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bookstore</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">"COOKING"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>Everyday Italian<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">author</span>&gt;</span>Giada De Laurentiis<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">price</span>&gt;</span>30.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">"CHILDREN"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>Harry Potter<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">author</span>&gt;</span>J K. Rowling<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">price</span>&gt;</span>29.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">"WEB"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>XQuery Kick Start<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">author</span>&gt;</span>James McGovern<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">author</span>&gt;</span>Per Bothner<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">author</span>&gt;</span>Kurt Cagle<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">author</span>&gt;</span>James Linn<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">author</span>&gt;</span>Vaidyanathan Nagarajan<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">year</span>&gt;</span>2003<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">price</span>&gt;</span>49.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">"WEB"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>Learning XML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">author</span>&gt;</span>Erik T. Ray<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">year</span>&gt;</span>2003<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">price</span>&gt;</span>39.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>'''</span><br></pre></td></tr></table></figure><p>导入语句，并生成HTML的DOM树：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">page = etree.HTML(html_doc)</span><br></pre></td></tr></table></figure><hr><h3 id="路径查找"><a href="#路径查找" class="headerlink" title="路径查找"></a>路径查找</h3><table><thead><tr><th style="text-align:left">表达式</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left">nodename</td><td>选取此节点的子节点。</td></tr><tr><td style="text-align:left">/</td><td>从根节点选取。</td></tr><tr><td style="text-align:left">//</td><td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td></tr><tr><td style="text-align:left">.</td><td>选取当前节点。</td></tr><tr><td style="text-align:left">..</td><td>选取当前节点的父节点。</td></tr><tr><td style="text-align:left">@</td><td>选取属性。</td></tr></tbody></table><ul><li><p>查找当前节点的子节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: page.xpath(<span class="string">'head'</span>)</span><br><span class="line">Out[<span class="number">1</span>]: [&lt;Element head at <span class="number">0x111c74c48</span>&gt;]</span><br></pre></td></tr></table></figure></li><li><p>从根节点进行查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: page.xpath(<span class="string">'/html'</span>)</span><br><span class="line">Out[<span class="number">2</span>]: [&lt;Element html at <span class="number">0x11208be88</span>&gt;]</span><br></pre></td></tr></table></figure></li><li><p>从整个文档中所有节点查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: page.xpath(<span class="string">'//book'</span>)</span><br><span class="line">Out[<span class="number">3</span>]:</span><br><span class="line">[&lt;Element book at <span class="number">0x1128c02c8</span>&gt;,</span><br><span class="line"> &lt;Element book at <span class="number">0x111c74108</span>&gt;,</span><br><span class="line"> &lt;Element book at <span class="number">0x111fd2288</span>&gt;,</span><br><span class="line"> &lt;Element book at <span class="number">0x1128da348</span>&gt;]</span><br></pre></td></tr></table></figure></li><li><p>选取当前节点的父节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: page.xpath(<span class="string">'//book'</span>)[<span class="number">0</span>].xpath(<span class="string">'..'</span>)</span><br><span class="line">Out[<span class="number">4</span>]: [&lt;Element bookstore at <span class="number">0x1128c0ac8</span>&gt;]</span><br></pre></td></tr></table></figure></li><li><p>选取属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">5</span>]: page.xpath(<span class="string">'//book'</span>)[<span class="number">0</span>].xpath(<span class="string">'@category'</span>)</span><br><span class="line">Out[<span class="number">5</span>]: [<span class="string">'COOKING'</span>]</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="节点查找"><a href="#节点查找" class="headerlink" title="节点查找"></a>节点查找</h3><table><thead><tr><th>表达式</th><th>结果</th></tr></thead><tbody><tr><td>nodename[1]</td><td>选取第一个元素。</td></tr><tr><td>nodename[last()]</td><td>选取最后一个元素。</td></tr><tr><td>nodename[last()-1]</td><td>选取倒数第二个元素。</td></tr><tr><td>nodename[position()&lt;3]</td><td>选取前两个子元素。</td></tr><tr><td>nodename[@lang]</td><td>选取拥有名为 lang 的属性的元素。</td></tr><tr><td>nodename[@lang=’eng’]</td><td>选取拥有lang属性，且值为 eng 的元素。</td></tr></tbody></table><ul><li><p>选取第二个book元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: page.xpath(<span class="string">'//book[2]/@category'</span>)</span><br><span class="line">Out[<span class="number">1</span>]: [<span class="string">'CHILDREN'</span>]</span><br></pre></td></tr></table></figure></li><li><p>选取倒数第三个book元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: page.xpath(<span class="string">'//book[last()-2]/@category'</span>)</span><br><span class="line">Out[<span class="number">2</span>]: [<span class="string">'CHILDREN'</span>]</span><br></pre></td></tr></table></figure></li><li><p>选取第二个元素开始的所有元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: page.xpath(<span class="string">'//book[position() &gt; 1]/@category'</span>)</span><br><span class="line">Out[<span class="number">3</span>]: [<span class="string">'CHILDREN'</span>, <span class="string">'WEB'</span>, <span class="string">'WEB'</span>]</span><br></pre></td></tr></table></figure></li><li><p>选取category属性为WEB的的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: page.xpath(<span class="string">'//book[@category="WEB"]/@category'</span>)</span><br><span class="line">Out[<span class="number">4</span>]: [<span class="string">'WEB'</span>, <span class="string">'WEB'</span>]</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="未知节点"><a href="#未知节点" class="headerlink" title="未知节点"></a>未知节点</h3><table><thead><tr><th>通配符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配任何元素节点。</td></tr><tr><td>@*</td><td>匹配任何属性节点。</td></tr></tbody></table><ul><li><p>匹配第一个book元素下的所有元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: page.xpath(<span class="string">'//book[1]/*'</span>)</span><br><span class="line">Out[<span class="number">1</span>]:</span><br><span class="line">[&lt;Element title at <span class="number">0x111f76788</span>&gt;,</span><br><span class="line"> &lt;Element author at <span class="number">0x111f76188</span>&gt;,</span><br><span class="line"> &lt;Element year at <span class="number">0x1128c1a88</span>&gt;,</span><br><span class="line"> &lt;Element price at <span class="number">0x1128c1cc8</span>&gt;]</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="获取节点中的文本"><a href="#获取节点中的文本" class="headerlink" title="获取节点中的文本"></a>获取节点中的文本</h3><ul><li><p>用<code>text()</code>获取某个节点下的文本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: page.xpath(<span class="string">'//book[1]/author/text()'</span>)</span><br><span class="line">Out[<span class="number">1</span>]: [<span class="string">'Giada De Laurentiis'</span>]</span><br></pre></td></tr></table></figure><p>如果这个节点下有多个文本，则只能取到一段。</p></li><li><p>用<code>string()</code>获取某个节点下所有的文本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: page.xpath(<span class="string">'string(//book[1])'</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'\n            Everyday Italian\n            Giada De Laurentiis\n            2005\n            30.00\n        '</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="选取多个路径"><a href="#选取多个路径" class="headerlink" title="选取多个路径"></a>选取多个路径</h3><p>通过在路径表达式中使用“|”运算符，您可以选取若干个路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: page.xpath(<span class="string">'//book[1]/title/text() | //book[1]/author/text()'</span>)</span><br><span class="line">Out[<span class="number">1</span>]: [<span class="string">'Everyday Italian'</span>, <span class="string">'Giada De Laurentiis'</span>]</span><br></pre></td></tr></table></figure><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      Xpath提取网页数据
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>优雅到骨子里的Requests</title>
    <link href="http://yoursite.com/2018/11/21/2018-11-21-reptile-request/"/>
    <id>http://yoursite.com/2018/11/21/2018-11-21-reptile-request/</id>
    <published>2018-11-20T16:00:00.000Z</published>
    <updated>2018-12-11T14:24:25.980Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:50 GMT+0800 (GMT+08:00) --><p>转载自：简书-<a href="https://www.jianshu.com/u/948da055a416" target="_blank" rel="noopener">王南北</a></p><h3 id="优雅到骨子里的Requests"><a href="#优雅到骨子里的Requests" class="headerlink" title="优雅到骨子里的Requests"></a>优雅到骨子里的Requests</h3><p><img src="/images/reptile/5.png" alt="Requests-标志"></p><hr><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>上一篇文章介绍了Python的网络请求库<code>urllib</code>和<code>urllib3</code>的使用方法，那么，作为同样是网络请求库的<code>Requests</code>，相对于<code>urllib</code>，有什么优点呢？</p><p>其实，只有两个词，简单优雅。</p><p><code>Requests</code>的宣言就是：<strong>HTTP for Humans</strong>。可以说，<code>Requests</code>彻底贯彻了Python所代表的简单优雅的精神。</p><p>之前的<code>urllib</code>做为Python的标准库，因为历史原因，使用的方式可以说是非常的麻烦而复杂的，而且官方文档也十分的简陋，常常需要去查看源码。与之相反的是，<code>Requests</code>的使用方式非常的简单、直观、人性化，让程序员的精力完全从库的使用中解放出来。</p><p>甚至在官方的urllib.request的文档中，有这样一句话来推荐<code>Requests</code>：</p><blockquote><p>The <strong>Requests packageis</strong> recommended for a higher-level HTTP client interface.</p></blockquote><p><code>Requests</code>的官方文档同样也非常的完善详尽，而且少见的有中文官方文档：<a href="http://cn.python-requests.org/zh_CN/latest/" target="_blank" rel="noopener">http://cn.python-requests.org/zh_CN/latest/</a>。</p><p>当然，为了保证准确性，还是尽量查看英文文档为好。</p><hr><h3 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h3><p><code>Requests</code>的作者<strong>Kenneth Reitz</strong>同样是一个富有传奇色彩的人物。</p><p><strong>Kenneth Reitz</strong>在有着“云服务鼻祖”之称的Heroku 公司，28岁时就担任了Python 语言的总架构师。他做了什么呢？随便列几个项目名称: requests、python-guide、pipenv、legit、autoenv，当然它也给Python界很多知名的开源项目贡献了代码，比如Flask。</p><p>可以说他是Python领域举足轻重的人物，他的代码追求一种强迫症般的美感。</p><p>大佬的传奇还不止于此，这是他当年在PyCON演讲时的照片：</p><p><img src="/images/reptile/6.png" alt="Requests-作者1"></p><p>非常可爱的小胖子，同时也符合着大众对于程序员的一些刻板印象：胖、不太修边幅、腼腆。</p><p>但是几年后，他变成了这样：</p><p><img src="/images/reptile/7.png" alt="Requests-作者2"></p><p>emmmmm，帅哥，你这是去哪整的容？</p><p>哈哈，开个玩笑。不过确实外貌方面的改变非常的巨大，由一个小肥宅的形象变得帅气潇洒。可见只要愿意去追求，我们都能变成我们想要的样子。</p><hr><h3 id="例子与特性"><a href="#例子与特性" class="headerlink" title="例子与特性"></a>例子与特性</h3><p>可以说<code>Requests</code>最大的特性就是其风格的简单直接优雅。无论是请求方法，还是响应结果的处理，还有cookies，url参数，post提交数据，都体现出了这种风格。</p><p>以下是一个简单例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = requests.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp.status_code</span><br><span class="line"><span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp.headers[<span class="string">'content-type'</span>]</span><br><span class="line"><span class="string">'application/json; charset=utf8'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp.encoding</span><br><span class="line"><span class="string">'utf-8'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp.text</span><br><span class="line"><span class="string">u'&#123;"type":"User"...'</span></span><br></pre></td></tr></table></figure><p>可以看到，不论是请求的发起还是相应的处理，都是非常直观明了的。</p><p><code>Requests</code>目前基本上完全满足web请求的所有需求，以下是<code>Requests</code>的特性：</p><ul><li>Keep-Alive &amp; 连接池</li><li>国际化域名和 URL</li><li>带持久 Cookie 的会话</li><li>浏览器式的 SSL 认证</li><li>自动内容解码</li><li>基本/摘要式的身份认证</li><li>优雅的 key/value Cookie</li><li>自动解压</li><li>Unicode 响应体</li><li>HTTP(S) 代理支持</li><li>文件分块上传</li><li>流下载</li><li>连接超时</li><li>分块请求</li><li>支持 <code>.netrc</code></li></ul><p>而<code>Requests 3.0</code>目前也募集到了资金正在开发中，预计会支持async/await来实现并发请求，且可能会支持HTTP 2.0。</p><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>Requests</code>的安装非常的简单，直接PIP安装即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><hr><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>Requests</code>的请求不再像<code>urllib</code>一样需要去构造各种Request、opener和handler，使用<code>Requests</code>构造的方法，并在其中传入需要的参数即可。</p><h3 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h3><h3 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h3><p>每一个请求方法都有一个对应的API，比如GET请求就可以使用<code>get()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = requests.get(<span class="string">'https://www.baidu.com'</span>)</span><br></pre></td></tr></table></figure><p>而POST请求就可以使用<code>post()</code>方法，并且将需要提交的数据传递给data参数即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = requests.post(<span class="string">'http://httpbin.org/post'</span>, data = &#123;<span class="string">'key'</span>:<span class="string">'value'</span>&#125;)</span><br></pre></td></tr></table></figure><p>而其他的请求类型，都有各自对应的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = requests.put(<span class="string">'http://httpbin.org/put'</span>, data = &#123;<span class="string">'key'</span>:<span class="string">'value'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = requests.delete(<span class="string">'http://httpbin.org/delete'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = requests.head(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = requests.options(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure><p>非常的简单直观明了。</p><h3 id="传递URL参数"><a href="#传递URL参数" class="headerlink" title="传递URL参数"></a>传递URL参数</h3><p>传递URL参数也不用再像<code>urllib</code>中那样需要去拼接URL，而是简单的，构造一个字典，并在请求时将其传递给params参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>params = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = requests.get(<span class="string">"http://httpbin.org/get"</span>, params=params)</span><br></pre></td></tr></table></figure><p>此时，查看请求的URL，则可以看到URL已经构造正确了：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(resp.url)</span><br><span class="line">http://httpbin.org/get?key2=value2&amp;key1=value1</span><br></pre></td></tr></table></figure><p>并且，有时候我们会遇到相同的url参数名，但有不同的值，而python的字典又不支持键的重名，那么我们可以把键的值用列表表示：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>params = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: [<span class="string">'value2'</span>, <span class="string">'value3'</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = requests.get(<span class="string">'http://httpbin.org/get'</span>, params=params)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(resp.url)</span><br><span class="line">http://httpbin.org/get?key1=value1&amp;key2=value2&amp;key2=value3</span><br></pre></td></tr></table></figure><h3 id="自定义Headers"><a href="#自定义Headers" class="headerlink" title="自定义Headers"></a>自定义Headers</h3><p>如果想自定义请求的Headers，同样的将字典数据传递给headers参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'https://api.github.com/some/endpoint'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>headers = &#123;<span class="string">'user-agent'</span>: <span class="string">'my-app/0.0.1'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><h3 id="自定义Cookies"><a href="#自定义Cookies" class="headerlink" title="自定义Cookies"></a>自定义Cookies</h3><p><code>Requests</code>中自定义Cookies也不用再去构造CookieJar对象，直接将字典递给cookies参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'http://httpbin.org/cookies'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cookies = &#123;<span class="string">'cookies_are'</span>: <span class="string">'working'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = requests.get(url, cookies=cookies)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp.text</span><br><span class="line"><span class="string">'&#123;"cookies": &#123;"cookies_are": "working"&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><p>当我们需要使用代理时，同样构造代理字典，传递给<code>proxies</code>参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">'http'</span>: <span class="string">'http://10.10.1.10:3128'</span>,</span><br><span class="line">  <span class="string">'https'</span>: <span class="string">'http://10.10.1.10:1080'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requests.get(<span class="string">'http://example.org'</span>, proxies=proxies)</span><br></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>在网络请求中，我们常常会遇到状态码是3开头的重定向问题，在<code>Requests</code>中是默认开启允许重定向的，即遇到重定向时，会自动继续访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = requests.get(<span class="string">'http://github.com'</span>, allow_redirects=<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp.status_code</span><br><span class="line"><span class="number">301</span></span><br></pre></td></tr></table></figure><h3 id="禁止证书验证"><a href="#禁止证书验证" class="headerlink" title="禁止证书验证"></a>禁止证书验证</h3><p>有时候我们使用了抓包工具，这个时候由于抓包工具提供的证书并不是由受信任的数字证书颁发机构颁发的，所以证书的验证会失败，所以我们就需要关闭证书验证。</p><p>在请求的时候把<code>verify</code>参数设置为<code>False</code>就可以关闭证书验证了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = requests.get(<span class="string">'http://httpbin.org/post'</span>, verify=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>但是关闭验证后，会有一个比较烦人的<code>warning</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">py:<span class="number">858</span>: InsecureRequestWarning: Unverified HTTPS request <span class="keyword">is</span> being made. Adding certificate verification <span class="keyword">is</span> strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html<span class="comment">#ssl-warnings</span></span><br><span class="line">  InsecureRequestWarning)</span><br></pre></td></tr></table></figure><p>可以使用以下方法关闭警告：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line"><span class="comment"># 禁用安全请求警告</span></span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br></pre></td></tr></table></figure><h3 id="设置超时"><a href="#设置超时" class="headerlink" title="设置超时"></a>设置超时</h3><p>设置访问超时，设置<code>timeout</code>参数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">'http://github.com'</span>, timeout=<span class="number">0.001</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">requests.exceptions.Timeout: HTTPConnectionPool(host=<span class="string">'github.com'</span>, port=<span class="number">80</span>): Request timed out. (timeout=<span class="number">0.001</span>)</span><br></pre></td></tr></table></figure><p>可见，通过<code>Requests</code>发起请求，只需要构造好几个需要的字典，并将其传入请求的方法中，即可完成基本的网络请求。</p><hr><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>通过<code>Requests</code>发起请求获取到的，是一个<code>requests.models.Response</code>对象。通过这个对象我们可以很方便的获取响应的内容。</p><h3 id="响应内容"><a href="#响应内容" class="headerlink" title="响应内容"></a>响应内容</h3><p>之前通过<code>urllib</code>获取的响应，读取的内容都是bytes的二进制格式，需要我们自己去将结果<code>decode()</code>一次转换成字符串数据。</p><p>而<code>Requests</code>通过<code>text</code>属性，就可以获得字符串格式的响应内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = requests.get(<span class="string">'https://api.github.com/events'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp.text</span><br><span class="line"><span class="string">u'[&#123;"repository":&#123;"open_issues":0,"url":"https://github.com/...</span></span><br></pre></td></tr></table></figure><p><code>Requests</code>会自动的根据响应的报头来猜测网页的编码是什么，然后根据猜测的编码来解码网页内容，基本上大部分的网页都能够正确的被解码。而如果发现<code>text</code>解码不正确的时候，就需要我们自己手动的去指定解码的编码格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = requests.get(<span class="string">'https://api.github.com/events'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp.encoding = <span class="string">'utf-8'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp.text</span><br><span class="line"><span class="string">u'[&#123;"repository":&#123;"open_issues":0,"url":"https://github.com/...</span></span><br></pre></td></tr></table></figure><p>而如果你需要获得原始的二进制数据，那么使用<code>content</code>属性即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp.content</span><br><span class="line"><span class="string">b'[&#123;"repository":&#123;"open_issues":0,"url":"https://github.com/...</span></span><br></pre></td></tr></table></figure><p>如果我们访问之后获得的数据是JSON格式的，那么我们可以使用<code>json()</code>方法，直接获取转换成字典格式的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = requests.get(<span class="string">'https://api.github.com/events'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp.json()</span><br><span class="line">[&#123;<span class="string">u'repository'</span>: &#123;<span class="string">u'open_issues'</span>: <span class="number">0</span>, <span class="string">u'url'</span>: <span class="string">'https://github.com/...</span></span><br></pre></td></tr></table></figure><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>通过<code>status_code</code>属性获取响应的状态码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = requests.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp.status_code</span><br><span class="line"><span class="number">200</span></span><br></pre></td></tr></table></figure><h3 id="响应报头"><a href="#响应报头" class="headerlink" title="响应报头"></a>响应报头</h3><p>通过<code>headers</code>属性获取响应的报头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.headers</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">'content-encoding'</span>: <span class="string">'gzip'</span>,</span><br><span class="line">    <span class="string">'transfer-encoding'</span>: <span class="string">'chunked'</span>,</span><br><span class="line">    <span class="string">'connection'</span>: <span class="string">'close'</span>,</span><br><span class="line">    <span class="string">'server'</span>: <span class="string">'nginx/1.0.4'</span>,</span><br><span class="line">    <span class="string">'x-runtime'</span>: <span class="string">'148ms'</span>,</span><br><span class="line">    <span class="string">'etag'</span>: <span class="string">'"e1ca502697e5c9317743dc078f67693f"'</span>,</span><br><span class="line">    <span class="string">'content-type'</span>: <span class="string">'application/json'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务器返回的cookies"><a href="#服务器返回的cookies" class="headerlink" title="服务器返回的cookies"></a>服务器返回的cookies</h3><p>通过<code>cookies</code>属性获取服务器返回的<code>cookies</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'http://example.com/some/cookie/setting/url'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = requests.get(url)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp.cookies[<span class="string">'example_cookie_name'</span>]</span><br><span class="line"><span class="string">'example_cookie_value'</span></span><br></pre></td></tr></table></figure><h3 id="url"><a href="#url" class="headerlink" title="url"></a>url</h3><p>还可以使用<code>url</code>属性查看访问的url。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>params = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = requests.get(<span class="string">"http://httpbin.org/get"</span>, params=params)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(resp.url)</span><br><span class="line">http://httpbin.org/get?key2=value2&amp;key1=value1</span><br></pre></td></tr></table></figure><hr><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>在<code>Requests</code>中，实现了<code>Session(会话)</code>功能，当我们使用<code>Session</code>时，能够像浏览器一样，在没有关闭关闭浏览器时，能够保持住访问的状态。</p><p>这个功能常常被我们用于登陆之后的数据获取，使我们不用再一次又一次的传递cookies。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line">session.get(<span class="string">'http://httpbin.org/cookies/set/sessioncookie/123456789'</span>)</span><br><span class="line">resp = session.get(<span class="string">'http://httpbin.org/cookies'</span>)</span><br><span class="line"></span><br><span class="line">print(resp.text)</span><br><span class="line"><span class="comment"># '&#123;"cookies": &#123;"sessioncookie": "123456789"&#125;&#125;'</span></span><br></pre></td></tr></table></figure><p>首先我们需要去生成一个<code>Session</code>对象，然后用这个<code>Session</code>对象来发起访问，发起访问的方法与正常的请求是一摸一样的。</p><p>同时，需要注意的是，如果是我们在<code>get()</code>方法中传入<code>headers</code>和<code>cookies</code>等数据，那么这些数据只在当前这一次请求中有效。如果你想要让一个<code>headers</code>在<code>Session</code>的整个生命周期内都有效的话，需要用以下的方式来进行设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置整个headers</span></span><br><span class="line">session.headers = &#123;</span><br><span class="line">    <span class="string">'user-agent'</span>: <span class="string">'my-app/0.0.1'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 增加一条headers</span></span><br><span class="line">session.headers.update(&#123;<span class="string">'x-test'</span>: <span class="string">'true'</span>&#125;)</span><br></pre></td></tr></table></figure><hr><p><strong>后记：或许有人不认可代码的美学，认为代码写的丑没事，能跑起来就好。但是我始终认为，世间万物都应该是美好的，追求美好的脚步也不应该停止。</strong></p><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      优雅到骨子里的Requests
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python与常见加密方式</title>
    <link href="http://yoursite.com/2018/11/21/2018-11-21-python-encryption/"/>
    <id>http://yoursite.com/2018/11/21/2018-11-21-python-encryption/</id>
    <published>2018-11-20T16:00:00.000Z</published>
    <updated>2018-12-11T14:23:25.357Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:50 GMT+0800 (GMT+08:00) --><p>转载自：简书-<a href="https://www.jianshu.com/u/948da055a416" target="_blank" rel="noopener">王南北</a></p><h3 id="Python与常见加密方式"><a href="#Python与常见加密方式" class="headerlink" title="Python与常见加密方式"></a>Python与常见加密方式</h3><p>本文地址：<a href="https://www.jianshu.com/p/4ba20afacce2" target="_blank" rel="noopener">https://www.jianshu.com/p/4ba20afacce2</a></p><hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我们所说的加密方式，都是对二进制编码的格式进行加密的，对应到Python中，则是我们的<code>Bytes</code>。</p><p>所以当我们在Python中进行加密操作的时候，要确保我们操作的是<code>Bytes</code>，否则就会报错。</p><p>将字符串和<code>Bytes</code>互相转换可以使用<code>encode()</code>和<code>decode()</code>方法。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法中不传参数则是以默认的utf-8编码进行转换</span></span><br><span class="line">In [<span class="number">1</span>]: <span class="string">'南北'</span>.encode()</span><br><span class="line">Out[<span class="number">1</span>]: <span class="string">b'\xe5\x8d\x97\xe5\x8c\x97'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="string">b'\xe5\x8d\x97\xe5\x8c\x97'</span>.decode()</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'南北'</span></span><br></pre></td></tr></table></figure><p><strong>注：两位十六进制常常用来显示一个二进制字节。</strong></p><p>利用<code>binascii</code>模块可以将十六进制显示的字节转换成我们在加解密中更常用的显示方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="string">'南北'</span>.encode()</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">b'\xe5\x8d\x97\xe5\x8c\x97'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: binascii.b2a_hex(<span class="string">'南北'</span>.encode())</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">b'e58d97e58c97'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: binascii.a2b_hex(<span class="string">b'e58d97e58c97'</span>)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">b'\xe5\x8d\x97\xe5\x8c\x97'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: binascii.a2b_hex(<span class="string">b'e58d97e58c97'</span>).decode()</span><br><span class="line">Out[<span class="number">5</span>]: <span class="string">'南北'</span></span><br></pre></td></tr></table></figure><hr><h2 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>正常的URL中是只能包含ASCII字符的，也就是字符、数字和一些符号。而URL编码就是一种浏览器用来避免url中出现特殊字符（如汉字）的编码方式。</p><p>其实就是将超出ASCII范围的字符转换成带<code>%</code>的十六进制格式。</p><h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># quote()方法会自动将str转换成bytes，所以这里传入str和bytes都可以</span></span><br><span class="line">In [<span class="number">2</span>]: parse.quote(<span class="string">'南北'</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'%E5%8D%97%E5%8C%97'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: parse.unquote(<span class="string">'%E5%8D%97%E5%8C%97'</span>)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">'南北'</span></span><br></pre></td></tr></table></figure><hr><h2 id="Base64编码"><a href="#Base64编码" class="headerlink" title="Base64编码"></a>Base64编码</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>Base64是一种用64个字符来表示任意二进制数据的方法。</p><p>Base64编码可以成为密码学的基石。可以将任意的二进制数据进行Base64编码。所有的数据都能被编码为并只用65个字符就能表示的文本文件。（ 65字符：A~Z a~z 0~9 + / = ）编码后的数据~=编码前数据的4/3，会大1/3左右。</p><h3 id="Base64编码的原理"><a href="#Base64编码的原理" class="headerlink" title="Base64编码的原理"></a>Base64编码的原理</h3><p><img src="/images/py/69.png" alt="加密方式-base64原理"></p><ol><li>将所有字符转化为ASCII码。</li><li>将ASCII码转化为8位二进制 。</li><li>将二进制3个归成一组(不足3个在后边补0)共24位，再拆分成4组，每组6位。</li><li>统一在6位二进制前补两个0凑足8位。</li><li>将补0后的二进制转为十进制。</li><li>从Base64编码表获取十进制对应的Base64编码。</li></ol><h3 id="Base64编码的说明"><a href="#Base64编码的说明" class="headerlink" title="Base64编码的说明"></a>Base64编码的说明</h3><ol><li>转换的时候，将三个byte的数据，先后放入一个24bit的缓冲区中，先来的byte占高位。</li><li>数据不足3byte的话，于缓冲区中剩下的bit用0补足。然后，每次取出6个bit，按照其值选择查表选择对应的字符作为编码后的输出。</li><li>不断进行，直到全部输入数据转换完成。</li><li>如果最后剩下两个输入数据，在编码结果后加1个“=”。</li><li>如果最后剩下一个输入数据，编码结果后加2个“=”。</li><li>如果没有剩下任何数据，就什么都不要加，这样才可以保证资料还原的正确性。</li></ol><h3 id="Python的Base64使用"><a href="#Python的Base64使用" class="headerlink" title="Python的Base64使用"></a>Python的Base64使用</h3><p>Python内置的<code>base64</code>模块可以直接进行base64的编解码</p><p><strong><em>注意：用于base64编码的，要么是ASCII包含的字符，要么是二进制数据</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: base64.b64encode(<span class="string">b'hello world'</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">b'aGVsbG8gd29ybGQ='</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: base64.b64decode(<span class="string">b'aGVsbG8gd29ybGQ='</span>)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">b'hello world'</span></span><br></pre></td></tr></table></figure><hr><h2 id="MD5（信息-摘要算法）"><a href="#MD5（信息-摘要算法）" class="headerlink" title="MD5（信息-摘要算法）"></a>MD5（信息-摘要算法）</h2><h3 id="简述-1"><a href="#简述-1" class="headerlink" title="简述"></a>简述</h3><p>message-digest algorithm 5（信息-摘要算法）。经常说的“MD5加密”，就是它→信息-摘要算法。</p><p>md5，其实就是一种算法。可以将一个字符串，或文件，或压缩包，执行md5后，就可以生成一个固定长度为128bit的串。这个串，基本上是唯一的。</p><h3 id="不可逆性"><a href="#不可逆性" class="headerlink" title="不可逆性"></a>不可逆性</h3><p>每个人都有不同的指纹，看到这个人，可以得出他的指纹等信息，并且唯一对应，但你只看一个指纹，是不可能看到或读到这个人的长相或身份等信息。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>压缩性：任意长度的数据，算出的MD5值长度都是固定的。</li><li>容易计算：从原数据计算出MD5值很容易。</li><li>抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。</li><li>强抗碰撞：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。</li></ol><p>举个栗子：世界上只有一个我，但是但是妞却是非常非常多的，以一个有限的我对几乎是无限的妞，所以可能能搞定非常多（100+）的妞，这个理论上的确是通的，可是实际情况下….</p><h3 id="Python的MD5使用"><a href="#Python的MD5使用" class="headerlink" title="Python的MD5使用"></a>Python的MD5使用</h3><p>由于MD5模块在python3中被移除，在python3中使用<code>hashlib</code>模块进行md5操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 待加密信息</span></span><br><span class="line">str = <span class="string">'这是一个测试'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建md5对象</span></span><br><span class="line">hl = hashlib.md5()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处必须声明encode</span></span><br><span class="line"><span class="comment"># 若写法为hl.update(str)  报错为： Unicode-objects must be encoded before hashing</span></span><br><span class="line">hl.update(str.encode(encoding=<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'MD5加密前为 ：'</span> + str)</span><br><span class="line">print(<span class="string">'MD5加密后为 ：'</span> + hl.hexdigest())</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MD5加密前为 ：这是一个测试</span><br><span class="line">MD5加密后为 ：cfca700b9e09cf664f3ae80733274d9f</span><br></pre></td></tr></table></figure><h3 id="MD5长度"><a href="#MD5长度" class="headerlink" title="MD5长度"></a>MD5长度</h3><p>md5的长度，默认为128bit，也就是128个0和1的二进制串。这样表达是很不友好的。所以将二进制转成了16进制，每4个bit表示一个16进制，所以128/4 = 32 换成16进制表示后，为32位了。</p><p>为什么网上还有md5是16位的呢？</p><p>其实16位的长度，是从32位md5值来的。是将32位md5去掉前八位，去掉后八位得到的。</p><hr><h2 id="Python加密库PyCryptodome"><a href="#Python加密库PyCryptodome" class="headerlink" title="Python加密库PyCryptodome"></a>Python加密库PyCryptodome</h2><p>PyCrypto是 Python 中密码学方面最有名的第三方软件包。可惜的是，它的开发工作于2012年就已停止。</p><p>幸运的是，有一个该项目的分支PyCrytodome 取代了 PyCrypto 。</p><h3 id="安装与导入"><a href="#安装与导入" class="headerlink" title="安装与导入"></a>安装与导入</h3><p>安装之前需要先安装<strong><em>Microsoft Visual c++ 2015</em></strong>。</p><p>在Linux上安装，可以使用以下 pip 命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pycryptodome</span><br></pre></td></tr></table></figure><p>导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Crypto</span><br></pre></td></tr></table></figure><p>在Windows 系统上安装则稍有不同：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pycryptodomex</span><br></pre></td></tr></table></figure><p>导入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Cryptodome</span><br></pre></td></tr></table></figure><hr><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>DES算法为密码体制中的对称密码体制，又被称为美国数据加密标准。</p><p>DES是一个分组加密算法，典型的DES以64位为分组对数据加密，加密和解密用的是同一个算法。</p><p>DES算法的入口参数有三个：Key、Data、Mode。其中Key为7个字节共56位，是DES算法的工作密钥；Data为8个字节64位，是要被加密或被解密的数据；Mode为DES的工作方式,有两种:加密或解密。</p><p>密钥长64位，密钥事实上是56位参与DES运算（第8、16、24、32、40、48、56、64位是校验位，使得每个密钥都有奇数个1），分组后的明文组和56位的密钥按位替代或交换的方法形成密文组。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入DES模块</span></span><br><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是密钥</span></span><br><span class="line">key = <span class="string">b'abcdefgh'</span></span><br><span class="line"><span class="comment"># 需要去生成一个DES对象</span></span><br><span class="line">des = DES.new(key, DES.MODE_ECB)</span><br><span class="line"><span class="comment"># 需要加密的数据</span></span><br><span class="line">text = <span class="string">'python spider!'</span></span><br><span class="line">text = text + (<span class="number">8</span> - (len(text) % <span class="number">8</span>)) * <span class="string">'='</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密的过程</span></span><br><span class="line">encrypto_text = des.encrypt(text.encode())</span><br><span class="line">encrypto_text = binascii.b2a_hex(encrypto_text)</span><br><span class="line">print(encrypto_text)</span><br></pre></td></tr></table></figure><hr><h2 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>3DES（或称为Triple DES）是三重数据加密算法（TDEA，Triple Data Encryption Algorithm）块密码的通称。它相当于是对每个数据块应用三次DES加密算法。</p><p>由于计算机运算能力的增强，原版DES密码的密钥长度变得容易被暴力破解。3DES即是设计用来提供一种相对简单的方法，即通过增加DES的密钥长度来避免类似的攻击，而不是设计一种全新的块密码算法。</p><p>3DES（即Triple DES）是DES向AES过渡的加密算法（1999年，NIST将3-DES指定为过渡的加密标准），加密算法，其具体实现如下：设Ek()和Dk()代表DES算法的加密和解密过程，K代表DES算法使用的密钥，M代表明文，C代表密文，这样：</p><p>3DES加密过程为：C=Ek3(Dk2(Ek1(M)))</p><p>3DES解密过程为：M=Dk1(EK2(Dk3(C)))</p><hr><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p><strong>高级加密标准</strong>（英语：<strong>Advanced Encryption Standard</strong>，缩写：<strong>AES</strong>），在密码学中又称<strong>Rijndael加密法</strong>，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。</p><p>AES在软件及硬件上都能快速地加解密，相对来说较易于实作，且只需要很少的存储器。作为一个新的加密标准，目前正被部署应用到更广大的范围。</p><h3 id="特点与思想"><a href="#特点与思想" class="headerlink" title="特点与思想"></a>特点与思想</h3><ol><li>抵抗所有已知的攻击。</li><li>在多个平台上速度快，编码紧凑。</li><li>设计简单。</li></ol><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><p><img src="/images/py/70.png" alt="加密方式-对称加密"></p><p>AES为分组密码，分组密码也就是把明文分成一组一组的，每组长度相等，每次加密一组数据，直到加密完整个明文。在AES标准规范中，分组长度只能是128位，也就是说，每个分组为16个字节（每个字节8位）。密钥的长度可以使用128位、192位或256位。密钥的长度不同，推荐加密轮数也不同。</p><p><strong>一般常用的是128位</strong></p><p>###Python实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Cryptodome <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> b2a_hex  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 要加密的明文</span></span><br><span class="line">data = <span class="string">'南来北往'</span></span><br><span class="line"><span class="comment"># 密钥key 长度必须为16（AES-128）、24（AES-192）、或32（AES-256）Bytes 长度.</span></span><br><span class="line"><span class="comment"># 目前AES-128足够用</span></span><br><span class="line">key = <span class="string">b'this is a 16 key'</span></span><br><span class="line"><span class="comment"># 生成长度等于AES块大小的不可重复的密钥向量</span></span><br><span class="line">iv = Random.new().read(AES.block_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用key和iv初始化AES对象, 使用MODE_CFB模式</span></span><br><span class="line">mycipher = AES.new(key, AES.MODE_CFB, iv)</span><br><span class="line"><span class="comment"># 加密的明文长度必须为16的倍数，如果长度不为16的倍数，则需要补足为16的倍数</span></span><br><span class="line"><span class="comment"># 将iv（密钥向量）加到加密的密文开头，一起传输</span></span><br><span class="line">ciphertext = iv + mycipher.encrypt(data.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密的话要用key和iv生成新的AES对象</span></span><br><span class="line">mydecrypt = AES.new(key, AES.MODE_CFB, ciphertext[:<span class="number">16</span>])</span><br><span class="line"><span class="comment"># 使用新生成的AES对象，将加密的密文解密</span></span><br><span class="line">decrypttext = mydecrypt.decrypt(ciphertext[<span class="number">16</span>:])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'密钥k为：'</span>, key)</span><br><span class="line">print(<span class="string">'iv为：'</span>, b2a_hex(ciphertext)[:<span class="number">16</span>])</span><br><span class="line">print(<span class="string">'加密后数据为：'</span>, b2a_hex(ciphertext)[<span class="number">16</span>:])</span><br><span class="line">print(<span class="string">'解密后数据为：'</span>, decrypttext.decode())</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">密钥k为： <span class="string">b'this is a 16 key'</span></span><br><span class="line">iv为： <span class="string">b'a78a177cffd50878'</span></span><br><span class="line">加密后数据为： <span class="string">b'33f61e7678c25d795d565d40f2f68371da051202'</span></span><br><span class="line">解密后数据为： 南来北往</span><br></pre></td></tr></table></figure><hr><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>典型的如RSA等，常见方法，使用openssl ,keytools等工具生成一对公私钥对，使用被公钥加密的数据可以使用私钥来解密，反之亦然（被私钥加密的数据也可以被公钥解密) 。</p><p>在实际使用中私钥一般保存在发布者手中，是私有的不对外公开的，只将公钥对外公布，就能实现只有私钥的持有者才能将数据解密的方法。 这种加密方式安全系数很高，因为它不用将解密的密钥进行传递，从而没有密钥在传递过程中被截获的风险，而破解密文几乎又是不可能的。</p><p>但是算法的效率低，所以常用于很重要数据的加密，常和对称配合使用，使用非对称加密的密钥去加密对称加密的密钥。</p><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p><strong>RSA加密算法</strong>是一种<code>非对称加密算法</code>。在公开密钥加密和电子商业中RSA被广泛使用。</p><p>该算法基于一个十分简单的数论事实：将两个大素数相乘十分容易，但那时想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥，即公钥，而两个大素数组合成私钥。公钥是可发布的供任何人使用，私钥则为自己所有，供解密之用。</p><h3 id="Python实现-1"><a href="#Python实现-1" class="headerlink" title="Python实现"></a>Python实现</h3><p>首先我们需要安装一个<code>rsa</code>模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install rsa</span><br></pre></td></tr></table></figure><p>而且，因为RSA加密算法的特性，RSA的公钥私钥都是10进制的，但公钥的值常常保存为16进制的格式，所以需要将其用<code>int()</code>方法转换为10进制格式。</p><h4 id="用网页中的公钥把数据加密"><a href="#用网页中的公钥把数据加密" class="headerlink" title="用网页中的公钥把数据加密"></a>用网页中的公钥把数据加密</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用网页中获得的n和e值，将明文加密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rsa_encrypt</span><span class="params">(rsa_n, rsa_e, message)</span>:</span></span><br><span class="line">    <span class="comment"># 用n值和e值生成公钥</span></span><br><span class="line">    key = rsa.PublicKey(rsa_n, rsa_e)</span><br><span class="line">    <span class="comment"># 用公钥把明文加密</span></span><br><span class="line">    message = rsa.encrypt(message.encode(), key)</span><br><span class="line">    <span class="comment"># 转化成常用的可读性高的十六进制</span></span><br><span class="line">    message = binascii.b2a_hex(message)</span><br><span class="line">    <span class="comment"># 将加密结果转化回字符串并返回</span></span><br><span class="line">    <span class="keyword">return</span> message.decode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># RSA的公钥有两个值n和e，我们在网站中获得的公钥一般就是这样的两个值。</span></span><br><span class="line"><span class="comment"># n常常为长度为256的十六进制字符串</span></span><br><span class="line"><span class="comment"># e常常为十六进制‘10001’</span></span><br><span class="line">pubkey_n = <span class="string">'8d7e6949d411ce14d7d233d7160f5b2cc753930caba4d5ad24f923a505253b9c39b09a059732250e56c594d735077cfcb0c3508e9f544f101bdf7e97fe1b0d97f273468264b8b24caaa2a90cd9708a417c51cf8ba35444d37c514a0490441a773ccb121034f29748763c6c4f76eb0303559c57071fd89234d140c8bb965f9725'</span></span><br><span class="line">pubkey_e = <span class="string">'10001'</span></span><br><span class="line"><span class="comment"># 需要将十六进制转换成十进制</span></span><br><span class="line">rsa_n = int(pubkey_n, <span class="number">16</span>)</span><br><span class="line">rsa_e = int(pubkey_e, <span class="number">16</span>)</span><br><span class="line"><span class="comment"># 要加密的明文</span></span><br><span class="line">message = <span class="string">'南北今天很忙'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"公钥n值长度："</span>, len(pubkey_n))</span><br><span class="line">print(rsa_encrypt(rsa_n, rsa_e, message))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">公钥n值长度： <span class="number">256</span></span><br><span class="line"><span class="number">480</span>f302eed822c8250256511ddeb017fcb28949cc05739ae66440eecc4ab76e7a7b2f1df398aefdfef2b9bfce6d6152bf6cc1552a0ed8bebee9e094a7ce9a52622487a6412632144787aa81f6ec9b96be95890c4c28a31b3e8d9ea430080d79297c5d75cd11df04df6e71b237511164399d72ccb2f4c34022b1ea7b76189a56e</span><br></pre></td></tr></table></figure><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      Python与常见加密方式
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>HTML解析库BeautifulSoup4</title>
    <link href="http://yoursite.com/2018/11/21/2018-11-21-reptile-beautifulsoup4/"/>
    <id>http://yoursite.com/2018/11/21/2018-11-21-reptile-beautifulsoup4/</id>
    <published>2018-11-20T16:00:00.000Z</published>
    <updated>2018-12-11T14:24:03.253Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:50 GMT+0800 (GMT+08:00) --><p>转载自：简书-<a href="https://www.jianshu.com/u/948da055a416" target="_blank" rel="noopener">王南北</a></p><h3 id="HTML解析库BeautifulSoup4"><a href="#HTML解析库BeautifulSoup4" class="headerlink" title="HTML解析库BeautifulSoup4"></a>HTML解析库BeautifulSoup4</h3><p><code>BeautifulSoup</code> 是一个可以从HTML或XML文件中提取数据的Python库，它的使用方式相对于正则来说更加的简单方便，常常能够节省我们大量的时间。</p><p><code>BeautifulSoup</code>也是有官方中文文档的：<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a></p><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>BeautifulSoup</code>的安装也是非常方便的，pip安装即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><hr><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><p>以下是一段HTML代码，作为例子被多次用到，这是 <em>爱丽丝梦游仙境</em> 中的一段内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">html_doc = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>我们获取的网页数据通常会像上面这样是完全的字符串格式，所以我们首先需要使用<code>BeautifulSoup</code>来解析这段字符串。然后会获得一个<code>BeautifulSoup</code>对象，通过这个对象我们就可以进行一系列操作了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: soup = BeautifulSoup(html_doc)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: soup.title</span><br><span class="line">Out[<span class="number">3</span>]: &lt;title&gt;The Dormouse<span class="string">'s story&lt;/title&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [4]: soup.title.name</span></span><br><span class="line"><span class="string">Out[4]: '</span>title<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [5]: soup.title.string</span></span><br><span class="line"><span class="string">Out[5]: "The Dormouse'</span>s story<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [6]: soup.title.parent.name</span></span><br><span class="line"><span class="string">Out[6]: 'head'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [7]: soup.p</span></span><br><span class="line"><span class="string">Out[7]: &lt;p class="</span>title<span class="string">"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [8]: soup.p['class']</span></span><br><span class="line"><span class="string">Out[8]: ['title']</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [9]: soup.a</span></span><br><span class="line"><span class="string">Out[9]: &lt;a class="</span>siste<span class="string">r" href="</span>http://example.com/elsie<span class="string">" id="</span>link1<span class="string">"&gt;Elsie&lt;/a&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [10]: soup.find_all('a')</span></span><br><span class="line"><span class="string">Out[10]:</span></span><br><span class="line"><span class="string">[&lt;a class="</span>siste<span class="string">r" href="</span>http://example.com/elsie<span class="string">" id="</span>link1<span class="string">"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string"> &lt;a class="</span>siste<span class="string">r" href="</span>http://example.com/lacie<span class="string">" id="</span>link2<span class="string">"&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="string"> &lt;a class="</span>siste<span class="string">r" href="</span>http://example.com/tillie<span class="string">" id="</span>link3<span class="string">"&gt;Tillie&lt;/a&gt;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">In [11]: soup.find(id="</span>link3<span class="string">")</span></span><br><span class="line"><span class="string">Out[11]: &lt;a class="</span>siste<span class="string">r" href="</span>http://example.com/tillie<span class="string">" id="</span>link3<span class="string">"&gt;Tillie&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，相对于正则来说，操作简单了不止一个量级。</p><hr><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h3 id="指定解析器"><a href="#指定解析器" class="headerlink" title="指定解析器"></a>指定解析器</h3><p>在上面的例子中，我们可以看到在查找数据之前，是有一个解析网页的过程的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(html_doc)</span><br></pre></td></tr></table></figure><p><code>BeautifulSoup</code>会自动的在系统中选定一个可用的解析器，以下是主要的几种解析器：</p><table><thead><tr><th>解析器</th><th>使用方法</th><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>Python标准库</td><td><code>BeautifulSoup(markup, &quot;html.parser&quot;)</code></td><td>Python的内置标准库执行速度适中文档容错能力强</td><td>Python 2.7.3 or 3.2.2)前 的版本中文档容错能力差</td></tr><tr><td>lxml HTML 解析器</td><td><code>BeautifulSoup(markup, &quot;lxml&quot;)</code></td><td>速度快文档容错能力强</td><td>需要安装C语言库</td></tr><tr><td>lxml XML 解析器</td><td><code>BeautifulSoup(markup, [&quot;lxml&quot;, &quot;xml&quot;])`</code>BeautifulSoup(markup, “xml”)`</td><td>速度快唯一支持XML的解析器</td><td>需要安装C语言库</td></tr><tr><td>html5lib</td><td><code>BeautifulSoup(markup, &quot;html5lib&quot;)</code></td><td>最好的容错性以浏览器的方式解析文档生成HTML5格式的文档</td><td>速度慢不依赖外部扩展</td></tr></tbody></table><p>由于这个解析的过程在大规模的爬取中是会影响到整个爬虫系统的速度的，所以推荐使用的是<code>lxml</code>，速度会快很多，而<code>lxml</code>需要单独安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br></pre></td></tr></table></figure><p>安装成功后，在解析网页的时候，指定为lxml即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(html_doc, <span class="string">'lxml'</span>)</span><br></pre></td></tr></table></figure><p>注意：<strong>如果一段HTML或XML文档格式不正确的话,那么在不同的解析器中返回的结果可能是不一样的，所以要指定某一个解析器。</strong></p><hr><h3 id="节点对象"><a href="#节点对象" class="headerlink" title="节点对象"></a>节点对象</h3><p>BeautifulSoup将复杂HTML文档转换成一个复杂的树形结构，每个节点都是Python对象，所有对象可以归纳为4种：<code>Tag</code>，<code>NavigableString</code>，<code>BeautifulSoup</code>，<code>Comment</code>。</p><h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><p><code>tag</code>就是标签的意思，<code>tag</code>还有许多的方法和属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(<span class="string">'&lt;b class="boldest"&gt;Extremely bold&lt;/b&gt;'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tag = soup.b</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(tag)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>name</p><p>每一个<code>tag</code>对象都有<code>name</code>属性，为标签的名字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tag.name</span><br><span class="line"><span class="string">'b'</span></span><br></pre></td></tr></table></figure></li><li><p>Attributes</p><p>在HTML中，<code>tag</code>可能有多个属性，所以<code>tag</code>属性的取值跟字典相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tag[<span class="string">'class'</span>]</span><br><span class="line"><span class="string">'boldest'</span></span><br></pre></td></tr></table></figure><p>如果某个<code>tag</code>属性有多个值，那么返回的则是列表格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(<span class="string">'&lt;p class="body strikeout"&gt;&lt;/p&gt;'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.p[<span class="string">'class'</span>]</span><br><span class="line">[<span class="string">"body"</span>, <span class="string">"strikeout"</span>]</span><br></pre></td></tr></table></figure></li><li><p>get_text()</p><p>通过<code>get_text()</code>方法我们可以获取某个<code>tag</code>下所有的文本内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: soup.body.get_text()</span><br><span class="line">Out[<span class="number">1</span>]: <span class="string">"The Dormouse's story\nOnce upon a time there were three little sisters; and their names were\nElsie,\nLacie and\nTillie;\nand they lived at the bottom of a well.\n...\n"</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="NavigableString"><a href="#NavigableString" class="headerlink" title="NavigableString"></a>NavigableString</h3><p><code>NavigableString</code>的意思是可以遍历的字符串，一般被标签包裹在其中的的文本就是<code>NavigableString</code>格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: soup = BeautifulSoup(<span class="string">'&lt;p&gt;No longer bold&lt;/p&gt;'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: soup.p.string</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'No longer bold'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: type(soup.p.string)</span><br><span class="line">Out[<span class="number">3</span>]: bs4.element.NavigableString</span><br></pre></td></tr></table></figure><h3 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h3><p><code>BeautifulSoup</code>对象就是解析网页获得的对象。</p><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p><code>Comment</code>指的是在网页中的注释以及特殊字符串。</p><hr><h3 id="Tag与遍历文档树"><a href="#Tag与遍历文档树" class="headerlink" title="Tag与遍历文档树"></a>Tag与遍历文档树</h3><p><code>tag</code>对象可以说是<code>BeautifulSoup</code>中最为重要的对象，通过<code>BeautifulSoup</code>来提取数据基本都围绕着这个对象来进行操作。</p><p>首先，一个节点中是可以包含多个子节点和多个字符串的。例如<code>html</code>节点中包含着<code>head</code>和<code>body</code>节点。所以<code>BeautifulSoup</code>就可以将一个HTML的网页用这样一层层嵌套的节点来进行表示。</p><p>以上方的爱丽丝梦游仙境为例：</p><h3 id="contents和children"><a href="#contents和children" class="headerlink" title="contents和children"></a>contents和children</h3><p>通过<code>contents</code>可以获取某个节点所有的子节点，包括里面的<code>NavigableString</code>对象。获取的子节点是列表格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: soup.head.contents</span><br><span class="line">Out[<span class="number">1</span>]: [&lt;title&gt;The Dormouse<span class="string">'s story&lt;/title&gt;]</span></span><br></pre></td></tr></table></figure><p>而通过<code>children</code>同样的是获取某个节点的所有子节点，但是返回的是一个迭代器，这种方式会比列表格式更加的节省内存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: tags = soup.head.children</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: tags</span><br><span class="line">Out[<span class="number">2</span>]: &lt;list_iterator at <span class="number">0x110f76940</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">            print(tag)</span><br><span class="line"></span><br><span class="line">&lt;title&gt;The Dormouse<span class="string">'s story&lt;/title&gt;</span></span><br></pre></td></tr></table></figure><h3 id="descendants"><a href="#descendants" class="headerlink" title="descendants"></a>descendants</h3><p>上面的<code>contents</code>和<code>children</code>获取的是某个节点的直接子节点，而无法获得子孙节点。通过<code>descendants</code>可以获得所有子孙节点，返回的结果跟<code>children</code>一样，需要迭代或者转类型使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: len(list(soup.body.descendants))</span><br><span class="line">Out[<span class="number">1</span>]: <span class="number">19</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: len(list(soup.body.children))</span><br><span class="line">Out[<span class="number">2</span>]: <span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="string和strings"><a href="#string和strings" class="headerlink" title="string和strings"></a>string和strings</h3><p>我们常常会遇到需要获取某个节点中的文本值的情况，如果这个节点中只有一个字符串，那么使用<code>string</code>可以正常将其取出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: soup.title.string</span><br><span class="line">Out[<span class="number">1</span>]: <span class="string">"The Dormouse's story"</span></span><br></pre></td></tr></table></figure><p>而如果这个节点中有多个字符串的时候，<code>BeautifulSoup</code>就无法确定要取出哪个字符串了，这时候需要使用<code>strings</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: list(soup.body.strings)</span><br><span class="line">Out[<span class="number">1</span>]:</span><br><span class="line">[<span class="string">"The Dormouse's story"</span>,</span><br><span class="line"> <span class="string">'\n'</span>,</span><br><span class="line"> <span class="string">'Once upon a time there were three little sisters; and their names were\n'</span>,</span><br><span class="line"> <span class="string">'Elsie'</span>,</span><br><span class="line"> <span class="string">',\n'</span>,</span><br><span class="line"> <span class="string">'Lacie'</span>,</span><br><span class="line"> <span class="string">' and\n'</span>,</span><br><span class="line"> <span class="string">'Tillie'</span>,</span><br><span class="line"> <span class="string">';\nand they lived at the bottom of a well.'</span>,</span><br><span class="line"> <span class="string">'\n'</span>,</span><br><span class="line"> <span class="string">'...'</span>,</span><br><span class="line"> <span class="string">'\n'</span>]</span><br></pre></td></tr></table></figure><p>而使用<code>stripped_strings</code>可以将全是空白的行去掉。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: list(soup.body.stripped_strings)</span><br><span class="line">Out[<span class="number">1</span>]:</span><br><span class="line">[<span class="string">"The Dormouse's story"</span>,</span><br><span class="line"> <span class="string">'Once upon a time there were three little sisters; and their names were'</span>,</span><br><span class="line"> <span class="string">'Elsie'</span>,</span><br><span class="line"> <span class="string">','</span>,</span><br><span class="line"> <span class="string">'Lacie'</span>,</span><br><span class="line"> <span class="string">'and'</span>,</span><br><span class="line"> <span class="string">'Tillie'</span>,</span><br><span class="line"> <span class="string">';\nand they lived at the bottom of a well.'</span>,</span><br><span class="line"> <span class="string">'...'</span>]</span><br></pre></td></tr></table></figure><h3 id="父节点parent和parents"><a href="#父节点parent和parents" class="headerlink" title="父节点parent和parents"></a>父节点parent和parents</h3><p>有时我们也需要去获取某个节点的父节点，也就是包裹着当前节点的节点。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: soup.b.parent</span><br><span class="line">Out[1]: &lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>而使用<code>parents</code>则可以获得当前节点递归到顶层的所有父辈元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: [i.name <span class="keyword">for</span> i <span class="keyword">in</span> soup.b.parents]</span><br><span class="line">Out[<span class="number">1</span>]: [<span class="string">'p'</span>, <span class="string">'body'</span>, <span class="string">'html'</span>, <span class="string">'[document]'</span>]</span><br></pre></td></tr></table></figure><h3 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h3><p>兄弟节点指的就是父节点相同的节点。</p><ul><li><p><strong>next_sibling 和 previous_sibling</strong></p><p>兄弟节点选取的方法与当前节点的位置有关，<code>next_sibling</code>获取的是当前节点的下一个兄弟节点，<code>previous_sibling</code>获取的是当前节点的上一个兄弟节点。</p><p>所以，兄弟节点中排第一个的节点是没有<code>previous_sibling</code>的，最后一个节点是没有<code>next_sibling</code>的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">51</span>]: soup.head.next_sibling</span><br><span class="line">Out[<span class="number">51</span>]: <span class="string">'\n'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: soup.head.previos_sibling</span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: soup.body.previous_sibling</span><br><span class="line">Out[<span class="number">59</span>]: <span class="string">'\n'</span></span><br></pre></td></tr></table></figure></li><li><p><strong>next_siblings 和 previous_siblings</strong></p><p>相对应的，<code>next_siblings</code>获取的是下方所有的兄弟节点，<code>previous_siblings</code>获取的上方所有的兄弟节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">47</span>]: [i.name <span class="keyword">for</span> i <span class="keyword">in</span> soup.head.next_siblings]</span><br><span class="line">Out[<span class="number">47</span>]: [<span class="keyword">None</span>, <span class="string">'body'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: [i.name <span class="keyword">for</span> i <span class="keyword">in</span> soup.body.next_siblings]</span><br><span class="line">Out[<span class="number">48</span>]: []</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: [i.name <span class="keyword">for</span> i <span class="keyword">in</span> soup.body.previous_siblings]</span><br><span class="line">Out[<span class="number">49</span>]: [<span class="keyword">None</span>, <span class="string">'head'</span>]</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="find-all"><a href="#find-all" class="headerlink" title="find_all()"></a>find_all()</h3><p>上方这种直接通过属性来进行访问属性的方法，很多时候只能适用于比较简单的一些场景，所以<code>BeautifulSoup</code>还提供了搜索整个文档树的方法<code>find_all()</code>。</p><p>需要注意的是，<code>find_all()</code>方法基本所有节点对象都能调用。</p><h3 id="通过name搜索"><a href="#通过name搜索" class="headerlink" title="通过name搜索"></a>通过name搜索</h3><p>就像以下演示的，<code>find_all()</code>可以直接查找出整个文档树中所有的b标签，并返回列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(<span class="string">'b'</span>)</span><br><span class="line">[&lt;b&gt;The Dormouse<span class="string">'s story&lt;/b&gt;]</span></span><br></pre></td></tr></table></figure><p>而如果传入的是一个列表，则会与列表中任意一个元素进行匹配。可以看到，搜索的结果包含了所有的a标签和b标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all([<span class="string">"a"</span>, <span class="string">"b"</span>])</span><br><span class="line">[&lt;b&gt;The Dormouse<span class="string">'s story&lt;/b&gt;,</span></span><br><span class="line"><span class="string"> &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string"> &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="string"> &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></span><br></pre></td></tr></table></figure><h3 id="通过属性搜索"><a href="#通过属性搜索" class="headerlink" title="通过属性搜索"></a>通过属性搜索</h3><p>我们在搜索的时候一般只有标签名是不够的，因为可能同名的标签很多，那么这时候我们就要通过标签的属性来进行搜索。</p><p>这时候我们可以通过传递给attrs一个字典参数来搜索属性。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: soup.find_all(attrs=&#123;<span class="string">'class'</span>: <span class="string">'sister'</span>&#125;)</span><br><span class="line">Out[<span class="number">1</span>]:</span><br><span class="line">[&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span><br><span class="line"> &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span><br><span class="line"> &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span><br></pre></td></tr></table></figure><p>可以看到找出了所有class属性为sister的标签。</p><h3 id="通过文本搜索"><a href="#通过文本搜索" class="headerlink" title="通过文本搜索"></a>通过文本搜索</h3><p>在<code>find_all()</code>方法中，还可以根据文本内容来进行搜索。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(text=<span class="string">"Elsie"</span>)</span><br><span class="line">[<span class="string">u'Elsie'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(text=[<span class="string">"Tillie"</span>, <span class="string">"Elsie"</span>, <span class="string">"Lacie"</span>])</span><br><span class="line">[<span class="string">u'Elsie'</span>, <span class="string">u'Lacie'</span>, <span class="string">u'Tillie'</span>]</span><br></pre></td></tr></table></figure><p>可见找到的都是字符串对象，如果想要找到包含某个文本的<code>tag</code>，加上<code>tag</code>名即可。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.find_all(<span class="string">"a"</span>, text=<span class="string">"Elsie"</span>)</span><br><span class="line">[&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;]</span><br></pre></td></tr></table></figure><h3 id="限制查找范围为子节点"><a href="#限制查找范围为子节点" class="headerlink" title="限制查找范围为子节点"></a>限制查找范围为子节点</h3><p><code>find_all()</code>方法会默认的去所有的子孙节点中搜索，而如果将<code>recursive</code>参数设置为False，则可以将搜索范围限制在直接子节点中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.html.find_all(<span class="string">"title"</span>)</span><br><span class="line">[&lt;title&gt;The Dormouse<span class="string">'s story&lt;/title&gt;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; soup.html.find_all("title", recursive=False)</span></span><br><span class="line"><span class="string">[]</span></span><br></pre></td></tr></table></figure><h3 id="通过正则表达式来筛选查找结果"><a href="#通过正则表达式来筛选查找结果" class="headerlink" title="通过正则表达式来筛选查找结果"></a>通过正则表达式来筛选查找结果</h3><p>在<code>BeautifulSoup</code>中，也是可以与<code>re</code>模块进行相互配合的，将re.compile编译的对象传入<code>find_all()</code>方法，即可通过正则来进行搜索。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: tags = soup.find_all(re.compile(<span class="string">"^b"</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: [i.name <span class="keyword">for</span> i <span class="keyword">in</span> tags]</span><br><span class="line">Out[<span class="number">3</span>]: [<span class="string">'body'</span>, <span class="string">'b'</span>]</span><br></pre></td></tr></table></figure><p>可以看到，找到了标签名是以’b’开头的两个标签。</p><p>同样的，也能够以正则来筛选<code>tag</code>的属性。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: soup.find_all(attrs=&#123;<span class="string">'class'</span>: re.compile(<span class="string">"si"</span>)&#125;)</span><br><span class="line">Out[<span class="number">1</span>]:</span><br><span class="line">[&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span><br><span class="line"> &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span><br><span class="line"> &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span><br></pre></td></tr></table></figure><hr><h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><p>在<code>BeautifulSoup</code>中，同样也支持使用CSS选择器来进行搜索。使用<code>select()</code>，在其中传入字符串参数，就可以使用CSS选择器的语法来找到tag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.select(<span class="string">"title"</span>)</span><br><span class="line">[&lt;title&gt;The Dormouse<span class="string">'s story&lt;/title&gt;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; soup.select("p &gt; a")</span></span><br><span class="line"><span class="string">[&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string"> &lt;a class="sister" href="http://example.com/lacie"  id="link2"&gt;Lacie&lt;/a&gt;,</span></span><br><span class="line"><span class="string"> &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></span><br></pre></td></tr></table></figure><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      HTML解析库BeautifulSoup4
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>logging-Python多层级日志输出</title>
    <link href="http://yoursite.com/2018/11/21/2018-11-21-python-log/"/>
    <id>http://yoursite.com/2018/11/21/2018-11-21-python-log/</id>
    <published>2018-11-20T16:00:00.000Z</published>
    <updated>2018-12-11T14:23:40.501Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:50 GMT+0800 (GMT+08:00) --><p>转载自：简书-<a href="https://www.jianshu.com/u/948da055a416" target="_blank" rel="noopener">王南北</a></p><p>本文地址：<a href="https://www.jianshu.com/p/3be28b5d2ff8" target="_blank" rel="noopener">https://www.jianshu.com/p/3be28b5d2ff8</a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在应用的开发过程中，我们常常需要去记录应用的状态，事件，结果。而Python最基础的Print很难满足我们的需求，这种情况下我们就需要使用python的另一个标准库：<code>logging</code>。</p><p>这是一个专门用于记录日志的模块。相对于Print来说，<code>logging</code>提供了日志信息的分级，格式化，过滤等功能。如果在程序中定义了丰富而有条理的log信息，那么可以非常方便的去分析程序的运行状况，在有问题时也能够方便的去定位问题，分析问题。</p><p>以下是具体的一些应用场景。</p><table><thead><tr><th style="text-align:left">执行的任务</th><th style="text-align:left">这项任务的最佳工具</th></tr></thead><tbody><tr><td style="text-align:left">显示控制台输出</td><td style="text-align:left">print()</td></tr><tr><td style="text-align:left">报告在程序正常运行期间发生的事件</td><td style="text-align:left">logging.info()或 logging.debug()</td></tr><tr><td style="text-align:left">发出有关特定运行时事件的警告</td><td style="text-align:left">logging.warning()</td></tr><tr><td style="text-align:left">报告有关特定运行时事件的错误</td><td style="text-align:left">抛出异常</td></tr><tr><td style="text-align:left">报告错误但不抛出异常</td><td style="text-align:left">logging.error()， logging.exception()或 logging.critical()</td></tr></tbody></table><hr><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><p>以下是一些<code>logging</code>最基础的使用方法，如果不需要深入的去定制log的话，那么只需要使用最基础的部分即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: logging.info(<span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: logging.warning(<span class="string">'good luck'</span>)</span><br><span class="line">WARNING:root:good luck</span><br></pre></td></tr></table></figure><p>可以看到，<code>logging.info()</code>的日志信息没有被输出，而<code>logging.warning()</code>的日志信息被输出了，这就是因为<code>logging</code>的日志信息分为几个不同的重要性级别，而默认输出的级别则是<code>warning</code>，也就是说，重要性大于等于<code>warning</code>的信息才会被输出。</p><p>以下是<code>logging</code>模块中信息的五个级别，重要性从上往下递增。</p><table><thead><tr><th>等级</th><th>什么时候使用</th></tr></thead><tbody><tr><td><code>DEBUG</code></td><td>详细信息，通常仅在Debug时使用。</td></tr><tr><td><code>INFO</code></td><td>程序正常运行时输出的信息。</td></tr><tr><td><code>WARNING</code></td><td>表示有些预期之外的情况发生，或者在将来可能发生什么情况。程序依然能按照预期运行。</td></tr><tr><td><code>ERROR</code></td><td>因为一些严重的问题，程序的某些功能无法使用了。</td></tr><tr><td><code>CRITICAL</code></td><td>发生了严重的错误，程序已经无法运行。</td></tr></tbody></table><p>我们也可以通过设置来设定输出日志的级别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: logging.basicConfig(level=logging.DEBUG)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: logging.info(<span class="string">'hello world'</span>)</span><br><span class="line">INFO:root:hello world</span><br></pre></td></tr></table></figure><p>可以看到，在设定了<code>level</code>参数为<code>logging.DEBUG</code>后，<code>logging.info()</code>的日志信息就正常输出了。</p><hr><h3 id="logging-basicConfig-kwargs"><a href="#logging-basicConfig-kwargs" class="headerlink" title="logging.basicConfig(*\kwargs*)"></a>logging.basicConfig(*<em>\</em>kwargs*)</h3><p>通过<code>basicConfig()</code>方法可以为<code>logging</code>做一些简单的配置。此方法可以传递一些关键字参数。</p><ul><li><p><strong>filename</strong></p><p>文件名参数，如果指定了这个参数，那么<code>logging</code>会把日志信息输入到指定的文件之中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(filename=<span class="string">'example.log'</span>)</span><br><span class="line">logging.warning(<span class="string">'Hello world'</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>filemode</strong></p><p>如果指定了<code>filename</code>来输出日志到文件，那么<code>filemode</code>就是打开文件的模式，默认为’a’，追加模式。当然也可以设置为’w’，则每一次输入都会丢弃掉之前日志文件中的内容。</p></li><li><p><strong>format</strong></p><p>指定输出的log信息的格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: logging.basicConfig(format=<span class="string">'%(asctime)s %(message)s'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: logging.warning(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="number">2018</span><span class="number">-07</span><span class="number">-06</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">12</span>,<span class="number">074</span> hello world</span><br></pre></td></tr></table></figure></li><li><p><strong>datefmt</strong></p><p>如果在<code>format</code>中使用了<code>asctime</code>输出时间，那么可以使用此参数控制输出日期的格式，使用方式与<code>time.strftime()</code>相同。</p></li><li><p><strong>level</strong></p><p>设置输出的日志的级别，只有高出此级别的日志信息才会被输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: logging.basicConfig(level=logging.INFO)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: logging.info(<span class="string">'hi'</span>)</span><br><span class="line">INFO:root:hi</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: logging.debug(<span class="string">'byebye'</span>)</span><br></pre></td></tr></table></figure></li></ul><p><strong>注：需要注意的是，<code>basicConfig()</code>方法是一个一次性的方法，只能用来做简单的配置，多次的调用<code>basicConfig()</code>是无效的。</strong></p><hr><h3 id="深度定制logging日志信息"><a href="#深度定制logging日志信息" class="headerlink" title="深度定制logging日志信息"></a>深度定制logging日志信息</h3><p>在深度使用<code>logging</code>来定制日志信息之前，我们需要先来了解一下<code>logging</code>的结构。<code>logging</code>的主要逻辑结构主要由以下几个组件构成：</p><ul><li><strong>Logger</strong>：提供应用程序直接使用的接口。</li><li><strong>Handler</strong>：将log信息发送到目标位置。</li><li><strong>Filter</strong>：提供更加细粒度的log信息过滤。</li><li><strong>Formatter</strong>：格式化log信息。</li></ul><p>这四个组件是<code>logging</code>模块的基础，在基础用法中的使用方式，其实也是这四大组件的封装结果。</p><p>这四个组件的关系如下所示：</p><p><img src="/images/py/68.png" alt="logging-结构"></p><p><code>logger</code>主要为外部提供使用的api接口，而每个<code>logger</code>下可以设置多个<code>Handler</code>，来将log信息输出到多个位置，而每一个<code>Handler</code>下又可以设置一个<code>Formatter</code>和多个<code>Filter</code>来定制输出的信息。</p><hr><h3 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h3><p><code>Logger</code>这个对象主要有三个任务要做：</p><ul><li>向外部提供使用接口。</li><li>基于日志严重等级（默认的过滤组件）或filter对象来决定要对哪些日志进行后续处理。</li><li>将日志消息传送给所有符合输出级别的<code>Handlers</code>。</li></ul><h4 id="logging-getLogger-name-None"><a href="#logging-getLogger-name-None" class="headerlink" title="logging.getLogger(name=None)"></a>logging.getLogger(name=None)</h4><p>首先，我们需要通过<code>getLogger()</code>方法来生成一个<code>Logger</code>，这个方法中有一个参数name，则是生成的<code>Logger</code>的名称，如果不传或者传入一个空值的话，<code>Logger</code>的名称默认为root。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: logger = logging.getLogger(<span class="string">'nanbei'</span>)</span><br></pre></td></tr></table></figure><p>需要注意的是，只要在同一个解释器的进程中，那么相同的<code>Logger</code>名称，使用<code>getLogger()</code>方法将会指向同一个<code>Logger</code>对象。</p><p>而使用<code>logger</code>的一个好习惯，是生成一个模块级别的<code>Logger</code>对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: logger = logging.getLogger(__name__)</span><br></pre></td></tr></table></figure><p>通过这种方式，我们可以让<code>logger</code>清楚的记录下事件发生的模块位置。</p><p>除此之外，<code>logger</code>对象是有层级结构的：</p><ul><li><p><code>Logger</code>的名称可以是一个以<code>.</code>分割的层级结构，每个<code>.</code>后面的<code>Logger</code>都是<code>.</code>前面的<code>logger</code>的子辈。</p><p>例如，有一个名称为<strong>nanbei</strong>的<code>logger</code>，其它名称分别为<strong>nanbei.a</strong>，<strong>nanbei.b</strong>和<strong>nanbei.a.c</strong>都是<strong>nanbei</strong>的后代。</p></li><li><p>子<code>Logger</code>在完成对日志消息的处理后，默认会将log日志消息传递给它们的父辈<code>Logger</code>相关的<code>Handler</code>。</p><p>因此，我们不不需要去配置每一个的<code>Logger</code>，只需要将程序中一个顶层的<code>Logger</code>配置好，然后按照需要创建子<code>Logger</code>就好了。也可以通过将一个<code>logger</code>的<code>propagate</code>属性设置为False来关闭这种传递机制。</p></li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> logging</span><br><span class="line"><span class="comment"># 生成一个名称为nanbei的Logger</span></span><br><span class="line">In [<span class="number">2</span>]: logger = logging.getLogger(<span class="string">'nanbei'</span>)</span><br><span class="line"><span class="comment"># 生成一个StreamHandler，这个Handler可以将日志输出到console中</span></span><br><span class="line">In [<span class="number">3</span>]: sh = logging.StreamHandler()</span><br><span class="line"><span class="comment"># 生成一个Formatter对象，使输出日志时只显示Logger名称和日志信息</span></span><br><span class="line">In [<span class="number">4</span>]: fmt = logging.Formatter(fmt=<span class="string">'%(name)s - %(message)s'</span>)</span><br><span class="line"><span class="comment"># 设置Formatter到StreamHandler中</span></span><br><span class="line">In [<span class="number">5</span>]: sh.setFormatter(fmt)</span><br><span class="line"><span class="comment"># 将Handler添加到Logger中</span></span><br><span class="line">In [<span class="number">6</span>]: logger.addHandler(sh)</span><br><span class="line"><span class="comment"># 生成一个nanbei的子Logger：nanbei.child</span></span><br><span class="line">In [<span class="number">7</span>]: child_logger = logging.getLogger(<span class="string">'nanbei.child'</span>)</span><br><span class="line"><span class="comment"># 可以看到两个Logger输出的日志信息都使用了相同的日志格式</span></span><br><span class="line">In [<span class="number">8</span>]: logger.warning(<span class="string">'hello'</span>)</span><br><span class="line">nanbei - hello</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: child_logger.warning(<span class="string">'hello'</span>)</span><br><span class="line">nanbei.child - hello</span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>在<code>Logger</code>对象中，主要提供了以下方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Logger.setLevel()</td><td>设置日志器将会处理的日志消息的最低输出级别</td></tr><tr><td>Logger.addHandler() 和 Logger.removeHandler()</td><td>为该logger对象添加、移除一个handler对象</td></tr><tr><td>Logger.addFilter() 和 Logger.removeFilter()</td><td>为该logger对象添加、移除一个filter对象</td></tr><tr><td>Logger.debug()，Logger.info()，Logger.warning()，Logger.error()，Logger.critical()</td><td>输出一条与方法名对应等级的日志</td></tr><tr><td>Logger.exception()</td><td>输出一条与Logger.error()类似的日志</td></tr><tr><td>Logger.log()</td><td>可以传入一个明确的日志level参数来输出一条日志</td></tr></tbody></table><hr><h3 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h3><p><code>Handler</code>的作用主要是把log信息输出到我们希望的目标位置，其提供了如下的方法以供使用：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Handler.setLevel()</td><td>设置handler处理日志消息的最低级别</td></tr><tr><td>Handler.setFormatter()</td><td>为handler设置一个格式器对象</td></tr><tr><td>Handler.addFilter() 和 Handler.removeFilter()</td><td>为handler添加、删除一个过滤器对象</td></tr></tbody></table><p>我们可以通过这几个方法，给每一个<code>Handler</code>设置一个<code>Formatter</code>和多个<code>Filter</code>，来定制不同的输出log信息的策略。</p><p>而<code>Handler</code>本身是一个基类，不应该直接实例化使用，我们应该使用的是其多种多样的子类，每一个不同的子类可以将日志信息输出到不同的目标位置，以下是一些常用的<code>Handler</code>。</p><table><thead><tr><th>Handler</th><th>描述</th></tr></thead><tbody><tr><td>logging.StreamHandler</td><td>将日志消息发送到输出到Stream，如std.out, std.err或任何file-like对象。</td></tr><tr><td>logging.FileHandler</td><td>将日志消息发送到磁盘文件，默认情况下文件大小会无限增长</td></tr><tr><td>logging.handlers.RotatingFileHandler</td><td>将日志消息发送到磁盘文件，并支持日志文件按大小切割</td></tr><tr><td>logging.hanlders.TimedRotatingFileHandler</td><td>将日志消息发送到磁盘文件，并支持日志文件按时间切割</td></tr><tr><td>logging.handlers.HTTPHandler</td><td>将日志消息以GET或POST的方式发送给一个HTTP服务器</td></tr><tr><td>logging.handlers.SMTPHandler</td><td>将日志消息发送给一个指定的email地址</td></tr><tr><td>logging.NullHandler</td><td>该Handler实例会忽略error messages，通常被想使用logging的library开发者使用来避免’No handlers could be found for logger XXX’信息的出现。</td></tr></tbody></table><hr><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p><code>Filter</code>可以被<code>Handler</code>和<code>Logger</code>用来做比level分级更细粒度的、更复杂的过滤功能。</p><p><code>Filter</code>是一个过滤器基类，它可以通过name参数，来使这个<code>logger</code>下的日志通过过滤。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">logging</span>.<span class="title">Filter</span><span class="params">(name=<span class="string">''</span>)</span></span></span><br></pre></td></tr></table></figure><p>比如，一个<code>Filter</code>实例化时传递的name参数值为<code>A.B</code>，那么该<code>Filter</code>实例将只允许名称为类似如下规则的<code>Loggers</code>产生的日志通过过滤：<code>A.B</code>，<code>A.B.C</code>，<code>A.B.C.D</code>，<code>A.B.D</code>。</p><p>而名称为<code>A.BB</code>，<code>B.A.B</code>的<code>Loggers</code>产生的日志则会被过滤掉。如果name的值为空字符串，则允许所有的日志事件通过过滤。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: logger = logging.getLogger(<span class="string">'nanbei'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: filt = logging.Filter(name=<span class="string">'nanbei.a'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: sh = logging.StreamHandler()</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: sh.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: sh.addFilter(filt)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: logger.addHandler(sh)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: logging.getLogger(<span class="string">'nanbei.a.b'</span>).warning(<span class="string">'i am nanbei.a.b'</span>)</span><br><span class="line">i am nanbei.a.b</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: logging.getLogger(<span class="string">'nanbei.b.b'</span>).warning(<span class="string">'i am nanbei.a.b'</span>)</span><br></pre></td></tr></table></figure><p>可以看到，名称为<strong>nanbei.b.b</strong>的<code>Logger</code>的日志没有被输出。</p><hr><h3 id="Formatter"><a href="#Formatter" class="headerlink" title="Formatter"></a>Formatter</h3><p><code>Formater</code>对象用于配置日志信息的最终顺序、结构和内容。</p><p><code>Formatter</code>类的构造方法定义如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.Formatter.__init__(fmt=<span class="keyword">None</span>, datefmt=<span class="keyword">None</span>, style=<span class="string">'%'</span>)</span><br></pre></td></tr></table></figure><ul><li><p><strong>fmt</strong></p><p>这个参数主要用于格式化log信息整体的输出。</p><p>以下是可以用来格式化的字段：</p><p>| 字段/属性名称 | 使用格式 | 描述 |<br>| :————– | :—————— | :———————————————————-: |<br>| asctime | %(asctime)s | 日志事件发生的时间–人类可读时间，如：2003-07-08 16:49:45,896 |<br>| created | %(created)f | 日志事件发生的时间–时间戳，就是当时调用time.time()函数返回的值 |<br>| relativeCreated | %(relativeCreated)d | 日志事件发生的时间相对于logging模块加载时间的相对毫秒数（目前还不知道干嘛用的） |<br>| msecs | %(msecs)d | 日志事件发生事件的毫秒部分 |<br>| levelname | %(levelname)s | 该日志记录的文字形式的日志级别（’DEBUG’, ‘INFO’, ‘WARNING’, ‘ERROR’, ‘CRITICAL’） |<br>| levelno | %(levelno)s | 该日志记录的数字形式的日志级别（10, 20, 30, 40, 50） |<br>| name | %(name)s | 所使用的日志器名称，默认是’root’，因为默认使用的是 rootLogger |<br>| message | %(message)s | 日志记录的文本内容，通过 <code>msg % args</code>计算得到的 |<br>| pathname | %(pathname)s | 调用日志记录函数的源码文件的全路径 |<br>| filename | %(filename)s | pathname的文件名部分，包含文件后缀 |<br>| module | %(module)s | filename的名称部分，不包含后缀 |<br>| lineno | %(lineno)d | 调用日志记录函数的源代码所在的行号 |<br>| funcName | %(funcName)s | 调用日志记录函数的函数名 |<br>| process | %(process)d | 进程ID |<br>| processName | %(processName)s | 进程名称，Python 3.1新增 |<br>| thread | %(thread)d | 线程ID |<br>| threadName | %(thread)s | 线程名称 |</p></li><li><p><strong>datefmt</strong></p><p>如果在dmt中指定了asctime，那么这个参数可以用来格式化asctime的输出，使用方式与time.strftime()相同。</p></li><li><p><strong>style</strong></p><p>Python 3.2新增的参数，可取值为 ‘%’, ‘{‘和 ‘$’，如果不指定该参数则默认使用’%’。</p></li></ul><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      logging-Python多层级日志输出
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出了解TCP/IP协议</title>
    <link href="http://yoursite.com/2018/11/21/2018-11-21-reptile-tcp-ip/"/>
    <id>http://yoursite.com/2018/11/21/2018-11-21-reptile-tcp-ip/</id>
    <published>2018-11-20T16:00:00.000Z</published>
    <updated>2018-12-11T14:24:39.756Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:50 GMT+0800 (GMT+08:00) --><p>转载自：简书-<a href="https://www.jianshu.com/u/948da055a416" target="_blank" rel="noopener">王南北</a></p><h3 id="深入浅出了解TCP-IP协议"><a href="#深入浅出了解TCP-IP协议" class="headerlink" title="深入浅出了解TCP/IP协议"></a>深入浅出了解TCP/IP协议</h3><p><img src="/images/reptile/10.png" alt="TCPIP协议-封面"></p><p>在当今互联网世界，上网已经不再是什么稀罕事，动动手指就能够通过互联网做到很多以前做不到的事情，但是作为一名互联网从业的开发人员，网络协议依然是必须知道的基础知识。</p><p>那么网络协议究竟是什么意思呢？</p><p><strong>其实网络协议，就是为了所有的计算机能够在同一个网络中互相传递数据，而制定的数据传输规则。</strong> 就好像我们只有说同一种语言才能互相交流一个道理，那么想要在互联网中传递数据，就得遵守标准的网络协议。</p><hr><h3 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h3><p>既然说到网络协议就像一种语言，同语言间才能够互相交流，那么自然网络协议也像语言一样，是多种多样的。</p><p>在这种情况下<code>国际标准化组织</code>(ISO)提出的一个试图使各种计算机在世界范围内互连为网络的标准框架，简称OSI，OSI模型，即开放式通信系统互联参考模型(Open System Interconnection,OSI/RM,Open Systems Interconnection Reference Model)。</p><p>这个模型的目的是：提供给开发者一个必须的、通用的概念以便开发完善、可以用来解释连接不同系统的框架。也就是说希望规范网络协议。</p><p>OSI模型定义了网络互联的七层框架，也就是将网络协议从软件到硬件，从上到下的分成了七层，每层都为更高一层提供服务。</p><p><img src="/images/reptile/8.png" alt="TCPIP协议-OSI七层模型"></p><p>虽然说OSI模型算是网络协议的框架标准，但是在实际的使用中，TCP/IP的五层协议使用的更加广泛。</p><hr><h3 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h3><p><strong>TCP/IP指的其实不只是TCP和IP这两个协议，而是一个协议簇，其中包括了IP、ICMP、TCP、http、ftp、pop3 等等的一系列协议。</strong> TCP/IP（Transmission Control Protocol/Internet Protocol）是传输控制协议和网络协议的简称，它定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。</p><p>TCP/IP是Internet互联网上所有主机间的共同协议。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>而TCP/IP协议采用五层结构，其与OSI模型的各层对应关系为</p><p><img src="/images/reptile/13.png" alt="TCPIP协议-协议结构对比"></p><h3 id="各层作用"><a href="#各层作用" class="headerlink" title="各层作用"></a>各层作用</h3><h4 id="物理层和数据链路层"><a href="#物理层和数据链路层" class="headerlink" title="物理层和数据链路层"></a>物理层和数据链路层</h4><p>物理层是定义物理介质的各种特性：</p><ol><li>机械特性</li><li>电子特性</li><li>功能特性</li><li>规程特性</li></ol><p>数据链路层是负责接收IP数据包并通过网络发送，或者从网络上接收物理帧，抽出IP数据包，交给IP层。</p><ul><li>ARP是正向地址解析协议，通过已知的IP，寻找对应主机的MAC地址。</li><li>RARP是反向地址解析协议，通过MAC地址确定IP地址。比如无盘工作站还有DHCP服务。</li></ul><p>常见的接口层协议有：</p><p>Ethernet 802.3、Token Ring 802.5、X.25、Frame relay、HDLC、PPP ATM等。</p><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><p>负责相邻计算机之间的通信。其功能包括三方面。</p><ol><li>处理来自传输层的分组发送请求，收到请求后，将分组装入IP数据报，填充报头，选择去往信宿机的路径，然后将数据报发往适当的网络接口。</li><li>处理输入数据报：首先检查其合法性，然后进行寻径–假如该数据报已到达信宿机，则去掉报头，将剩下部分交给适当的传输协议；假如该数据报尚未到达信宿，则转发该数据报。</li><li>处理路径、流控、拥塞等问题。</li></ol><p>网络层包括：IP(Internet Protocol）协议、ICMP(Internet Control Message Protocol)</p><p>控制报文协议、ARP(Address Resolution Protocol）地址转换协议、RARP(Reverse ARP)反向地址转换协议。</p><ul><li>IP是网络层的核心，通过路由选择将下一条IP封装后交给接口层。IP数据报是无连接服务。</li><li>ICMP是网络层的补充，可以回送报文。用来检测网络是否通畅。Ping命令就是发送ICMP的echo包，通过回送的echo relay进行网络测试。</li></ul><h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><p>提供应用程序间的通信。其功能包括：一、格式化信息流；二、提供可靠传输。为实现后者，传输层协议规定接收端必须发回确认，并且假如分组丢失，必须重新发送，即耳熟能详的“三次握手”过程，从而提供可靠的数据传输。</p><p>传输层协议主要是：传输控制协议TCP(Transmission Control Protocol）和用户数据报协议UDP(User Datagram protocol）。</p><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>向用户提供一组常用的应用程序，比如电子邮件、文件传输访问、远程登录等。远程登录TELNET使用TELNET协议提供在网络其它主机上注册的接口。TELNET会话提供了基于字符的虚拟终端。文件传输访问FTP使用FTP协议来提供网络内机器间的文件拷贝功能。</p><p>应用层协议主要包括如下几个：FTP、TELNET、DNS、SMTP、NFS、HTTP。</p><ul><li>FTP(File Transfer Protocol）是文件传输协议，一般上传下载用FTP服务，数据端口是20H，控制端口是21H。</li><li>Telnet服务是用户远程登录服务，使用23H端口，使用明码传送，保密性差、简单方便。</li><li>DNS(Domain Name Service）是域名解析服务，提供域名到IP地址之间的转换，使用端口53。</li><li>SMTP(Simple Mail Transfer Protocol）是简单邮件传输协议，用来控制信件的发送、中转，使用端口25。</li><li>NFS（Network File System）是网络文件系统，用于网络中不同主机间的文件共享。</li><li>HTTP(Hypertext Transfer Protocol）是超文本传输协议，用于实现互联网中的WWW服务，使用端口80。</li></ul><hr><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>TCP（Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。</p><p>在TCP/IP协议簇中，TCP处于传输层中。</p><p>应用层向TCP层发送用于网间传输的、用8位字节表示的数据流，然后TCP把数据流分区成适当长度的报文段。之后TCP把结果包传给IP层，由它来通过网络将包传送给接收端实体的TCP层。</p><p>TCP为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的包发回一个相应的确认（ACK），如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就被假设为已丢失将会被进行重传。TCP用一个校验和函数来检验数据是否有错误，在发送和接收时都要计算校验和。</p><h3 id="TCP报文头"><a href="#TCP报文头" class="headerlink" title="TCP报文头"></a>TCP报文头</h3><p>TCP传输的数据分为头部和数据部分。</p><p><img src="/images/reptile/9.png" alt="TCPIP协议-TCP头信息"></p><p><strong>各个段位说明:</strong></p><ul><li><strong>源端口和目的端口</strong>: 各占 2 字节.端口是传输层与应用层的服务接口.传输层的复用和分用功能都要通过端口才能实现</li><li><strong>序号</strong>: 占 4 字节.TCP 连接中传送的数据流中的每一个字节都编上一个序号.序号字段的值则指的是本报文段所发送的数据的第一个字节的序号</li><li><strong>确认号</strong>: 占 4 字节,是期望收到对方的下一个报文段的数据的第一个字节的序号</li><li><strong>数据偏移/首部长度</strong>: 占 4 位,它指出 TCP 报文段的数据起始处距离 TCP 报文段的起始处有多远.“数据偏移”的单位是 32 位字(以 4 字节为计算单位)</li><li><strong>保留</strong>: 占 6 位,保留为今后使用,但目前应置为 0</li><li><strong>紧急URG</strong>: 当 URG=1 时,表明紧急指针字段有效.它告诉系统此报文段中有紧急数据,应尽快传送(相当于高优先级的数据)</li><li><strong>确认ACK</strong>: 只有当 ACK=1 时确认号字段才有效.当 ACK=0 时,确认号无效</li><li><strong>PSH(PuSH)</strong>: 接收 TCP 收到 PSH = 1 的报文段,就尽快地交付接收应用进程,而不再等到整个缓存都填满了后再向上交付</li><li><strong>RST (ReSeT)</strong>: 当 RST=1 时,表明 TCP 连接中出现严重差错（如由于主机崩溃或其他原因）,必须释放连接,然后再重新建立运输连接</li><li><strong>同步 SYN</strong>: 同步 SYN = 1 表示这是一个连接请求或连接接受报文</li><li><strong>终止 FIN</strong>: 用来释放一个连接.FIN=1 表明此报文段的发送端的数据已发送完毕,并要求释放运输连接</li><li><strong>检验和</strong>: 占 2 字节.检验和字段检验的范围包括首部和数据这两部分.在计算检验和时,要在 TCP 报文段的前面加上 12 字节的伪首部</li><li><strong>紧急指针</strong>: 占 16 位,指出在本报文段中紧急数据共有多少个字节（紧急数据放在本报文段数据的最前面）</li><li><strong>选项</strong>: 长度可变.TCP 最初只规定了一种选项,即最大报文段长度 MSS.MSS 告诉对方 TCP：“我的缓存所能接收的报文段的数据字段的最大长度是 MSS 个字节.” [MSS(Maximum Segment Size)是 TCP 报文段中的数据字段的最大长度.数据字段加上 TCP 首部才等于整个的 TCP 报文段]</li><li><strong>填充</strong>: 这是为了使整个首部长度是 4 字节的整数倍</li><li><strong>其他选项</strong>:<ul><li><strong>窗口扩大</strong>: 占 3 字节,其中有一个字节表示移位值 S.新的窗口值等于TCP 首部中的窗口位数增大到(16 + S),相当于把窗口值向左移动 S 位后获得实际的窗口大小</li><li><strong>时间戳</strong>: 占10 字节,其中最主要的字段时间戳值字段(4字节)和时间戳回送回答字段(4字节)</li><li><strong>选择确认</strong>: 接收方收到了和前面的字节流不连续的两2字节.如果这些字节的序号都在接收窗口之内,那么接收方就先收下这些数据,但要把这些信息准确地告诉发送方,使发送方不要再重复发送这些已收到的数据</li></ul></li></ul><hr><h3 id="三次握手四次挥手"><a href="#三次握手四次挥手" class="headerlink" title="三次握手四次挥手"></a>三次握手四次挥手</h3><p>既然说到TCP，不能不提到广为人知的三次握手和四次挥手，TCP协议为了保证信息传输的连接和可靠性，使用了这样的方式来保证连接的可靠性。</p><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><p>所谓三次握手，其实指的是TCP建立连接的过程，整个建立连接的过程需要发送三个包，来确认建立连接，具体流程如下：</p><p><img src="/images/reptile/11.png" alt="TCPIP协议-三次握手"></p><ul><li>第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</li><li>第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</li><li>第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。</li></ul><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p>四次挥手指的则是断开连接的过程：</p><p><img src="/images/reptile/12.png" alt="TCPIP协议-四次挥手"></p><ul><li>第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。</li><li>第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。</li><li>第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。</li><li>第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</li></ul><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      深入浅出了解TCP/IP协议
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出了解HTTP协议</title>
    <link href="http://yoursite.com/2018/11/21/2018-11-21-reptile-http/"/>
    <id>http://yoursite.com/2018/11/21/2018-11-21-reptile-http/</id>
    <published>2018-11-20T16:00:00.000Z</published>
    <updated>2018-12-11T14:24:14.026Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:50 GMT+0800 (GMT+08:00) --><p>转载自：简书-<a href="https://www.jianshu.com/u/948da055a416" target="_blank" rel="noopener">王南北</a></p><h3 id="深入浅出了解HTTP协议"><a href="#深入浅出了解HTTP协议" class="headerlink" title="深入浅出了解HTTP协议"></a>深入浅出了解HTTP协议</h3><p><img src="/images/reptile/2.jpg" alt="HTTP协议-封面"></p><p>HTTP（HyperText Transfer Protocol，超文本传输协议)是互联网上应用最为广泛的一种网络协议。目前使用最普遍的一个版本是HTTP 1.1。</p><p>HTTP协议是用于从WWW服务器传输超文本到本地浏览器的传送协议。它可以使浏览器更加高效，使网络传输减少。它不仅保证计算机正确快速地传输超文本文档，还确定传输文档中的哪一部分，以及哪部分内容首先显示(如文本先于图形)等。</p><hr><h3 id="HTTP协议简介"><a href="#HTTP协议简介" class="headerlink" title="HTTP协议简介"></a>HTTP协议简介</h3><p>HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。</p><p>一次HTTP请求的基本流程一般是，在建立TCP连接后，由客户端向服务端发起一次请求（request），而服务器在接收到以后返回给客户端一个响应（response）。</p><p>所以我们看到的HTTP请求内容一般就分为请求和响应两部分。</p><p>HTTP协议通常承载于TCP协议之上，有时也承载于TLS或SSL协议层之上，这个时候，就成了我们常说的HTTPS。</p><p>默认HTTP的端口号为80。</p><h3 id="无状态协议"><a href="#无状态协议" class="headerlink" title="无状态协议"></a>无状态协议</h3><p>HTTP协议是无状态的，也就是说每一次HTTP请求之间都是相互独立的，没有联系的，服务端不知道客户端具体的状态。</p><p>比如客户端访问一次网页之后关闭浏览器，然后再一次启动浏览器，再访问该网站，服务器是不知道客户关闭了一次浏览器的。</p><p>这样设计的原因是因为Web服务器一般需要面对很多浏览器的并发访问，为了提高Web服务器对并发访问的处理能力，在设计HTTP协议时规定Web服务器发送HTTP应答报文和文档时，不保存发出请求的Web浏览器进程的任何状态信息。</p><hr><h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><p>每一个HTTP请求都由三部分组成，分别是：请求行、请求报头、请求正文。</p><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p>请求行一般由<strong>请求方法</strong>、<strong>url路径</strong>、<strong>协议版本</strong>组成，如下所示：</p><p><img src="/images/reptile/3.png" alt="HTTP协议-请求行"></p><h3 id="请求报头"><a href="#请求报头" class="headerlink" title="请求报头"></a>请求报头</h3><p>请求行下方的是则是请求报头，HTTP消息报头包括普通报头、请求报头、响应报头、实体报头。每个报头的形式如下：</p><blockquote><p>名字 + : + 空格 + 值</p></blockquote><ul><li><p><strong>Host</strong></p><p>指定的请求资源的域名（主机和端口号）。HTTP请求必须包含HOST，否则系统会以400状态码返回。</p></li><li><p><strong>User-Agant</strong></p><p>简称UA，内容包含发出请求的用户信息，通常UA包含浏览者的信息，主要是浏览器的名称版本和所用的操作系统。这个UA头不仅仅是使用浏览器才存在，只要使用了基于HTTP协议的客户端软件都会发送，无论是手机端还是PDA等，这个UA头是辨别客户端所用设备的重要依据。</p></li><li><p><strong>Accept</strong></p><p>告诉服务器可以接受的文件格式。通常这个值在各种浏览器中都差不多，不过WAP浏览器所能接受的格式要少一些，这也是用来区分WAP和计算机浏览器的主要依据之一，随着WAP浏览器的升级，其已经和计算机浏览器越来越接近，因此这个判断所起的作用也越来越弱。</p></li><li><p><strong>Cookie</strong></p><p>Cookie信息。</p></li><li><p><strong>Cache-Control</strong></p><p>指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置Cache-Control并不会修改另一个消息消息处理过程中的缓存处理过程。请求时的缓存指令包括no-cache、no-store、man-age、max-stake、min-fresh、only-if-cached；响应消息中的指令包括 public、privete、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age。</p></li><li><p><strong>Referer</strong></p><p>页面跳转处，表明产生请求的网页来自于哪个URL，用户是从该 Referer页面访问到当前请求的页面。这个属性可以用来跟踪Web请求来自哪个页面，是从什么网站来的。</p></li><li><p><strong>Content-Length</strong></p><p>内容长度。</p></li><li><p><strong>Content-Range</strong></p><p>响应的资源范围。可以在每次请求中标记请求的资源范围，在连接断开重连时，客户端只请求该资源未下载的部分，而不是重新请求整个资源，实现断点续传。迅雷就是基于这个原，使用多线程分段读取网络上的资源，最后再合并。</p></li><li><p><strong>Accept-Encoding</strong></p><p>指定所能接收的编码方式，通常服务器会对页面进行GZIP压缩后再输出以减少流量，一般浏览器均支持对这种压缩后的数据进行处理，但对于我们来说，如果不想接收到这些看似乱码的数据，可以指定不接收任何服务器端压缩处理，要求其原样返回。</p></li><li><p><strong>Accept-Language</strong></p><p>指浏览器可以接受的语言种类 en、en-us指英语 zh、zh-cn指中文。</p></li><li><p><strong>Connection</strong></p><p>客户端与服务器链接类型，keep-alive:保持链接，close:关闭链接。</p></li></ul><h3 id="请求正文"><a href="#请求正文" class="headerlink" title="请求正文"></a>请求正文</h3><p>请求正文通常是使用POST方法进行发送的数据，GET方法是没有请求正文的。</p><p>请求正文跟上面的消息报头一般由一个空行隔开。</p><hr><h3 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h3><p>HTTP响应同样也是由状态行、响应报头、报文主体三部分组成。</p><h3 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h3><p>状态行由HTTP协议版本号， 状态码， 状态消息三部分组成。如下所示：</p><p><img src="/images/reptile/4.png" alt="HTTP协议-状态行"></p><h3 id="响应报头"><a href="#响应报头" class="headerlink" title="响应报头"></a>响应报头</h3><ul><li><p><strong>Allow</strong></p><p>服务器支持哪些请求方法（如GET、POST等）。</p></li><li><p><strong>Date</strong></p><p>表示消息发送的时间，时间的描述格式由rfc822定义。例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。</p></li><li><p><strong>Set-Cookie</strong></p><p>非常重要的header, 用于把cookie发送到客户端浏览器，每一个写入cookie都会生成一个Set-Cookie。</p></li><li><p><strong>Expires</strong></p><p>指明应该在什么时候认为文档已经过期，从而不再缓存它，重新从服务器获取，会更新缓存。过期之前使用本地缓存。</p></li><li><p><strong>Content-Type</strong></p><p>WEB服务器告诉客户端自己响应的对象的类型和字符集。</p></li><li><p><strong>Content-Encoding</strong></p><p>文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。</p></li><li><p><strong>Content-Length</strong></p><p>指明实体正文的长度，以字节方式存储的十进制数字来表示。</p></li><li><p><strong>Location</strong></p><p>用于重定向一个新的位置，包含新的URL地址。表示客户应当到哪里去提取文档。</p></li><li><p><strong>Refresh</strong></p><p>表示浏览器应该在多少时间之后刷新文档，以秒计。</p></li></ul><h3 id="响应正文"><a href="#响应正文" class="headerlink" title="响应正文"></a>响应正文</h3><p>服务器返回的数据。</p><hr><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>URL（Uniform Resource Locator），中文叫统一资源定位符。是用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：</p><p><img src="/images/reptile/1.png" alt="HTTP协议-url结构"></p><ol><li><p>协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在”HTTP”后面的“//”为分隔符。</p></li><li><p>域名部分：该URL的域名部分为“<a href="http://www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用。" target="_blank" rel="noopener">www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用。</a></p></li><li><p>端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口。</p></li><li><p>路径部分：从域名后的第一个“/”开始到最后一个“？”为止，是路径部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是路径部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是路径部分。</p><p>本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名。</p></li><li><p>参数部分：从“？”开始到“#”为止之间的部分为参数部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</p></li><li><p>锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分。</p><p>锚部分是用来定位到页面中某个元素的。</p></li></ol><hr><h3 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h3><p>HTTP协议中定义的请求方法有以下几种：</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>GET</td><td>请求指定的页面信息，并返回实体主体。</td></tr><tr><td>2</td><td>HEAD</td><td>类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td>3</td><td>POST</td><td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</td></tr><tr><td>4</td><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td>5</td><td>DELETE</td><td>请求服务器删除指定的页面。</td></tr><tr><td>6</td><td>CONNECT</td><td>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td>7</td><td>OPTIONS</td><td>允许客户端查看服务器的性能。</td></tr><tr><td>8</td><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断。</td></tr></tbody></table><p>虽然HTTP请求中定义的方法有这么多种，但是我们平常使用的基本只有<code>GET</code>和<code>POST</code>两种方法，而且大部分网站都是禁用掉了除<code>GET</code>和<code>POST</code>外其他的方法。</p><p>因为其他几种方法通过<code>GET</code>或者<code>POST</code>都能实现，而且对于网站来说更加的安全和可控。</p><ul><li><p><code>GET</code></p><p>其实简单来说，<code>GET</code>方法一般用来负责获取数据，或者将一些简短的数据放到URL参数中传递到服务器。比<code>POST</code>更加高效和方便。</p></li><li><p><code>POST</code></p><p>由于<code>GET</code>方法最多在url中携带1024字节数据，且将数据放到URL中传递太不安全，数据量大时URL也会变得冗长。所以传递数据量大或者安全性要求高的数据的时候，最好使用<code>POST</code>方法来传递数据。</p></li></ul><hr><h3 id="状态码（status-code）"><a href="#状态码（status-code）" class="headerlink" title="状态码（status code）"></a>状态码（status code）</h3><p>当客户端向服务端发起一次请求后，服务端在返回的响应头中会包含一个HTTP状态码。下面是一些常见的状态码：</p><ul><li>200 - 请求成功</li><li>301 - 资源（网页等）被永久转移到其它URL</li><li>404 - 请求的资源（网页等）不存在</li><li>500 - 内部服务器错误</li></ul><p>HTTP的状态码是由三位数字来表示的，由第一位数字来表示状态码的类型，一般来说有五种类型：</p><table><thead><tr><th>分类</th><th>分类描述</th></tr></thead><tbody><tr><td>1**</td><td>信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td>2**</td><td>成功，操作被成功接收并处理</td></tr><tr><td>3**</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>4**</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>5**</td><td>服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><p>以下是详细的状态码列表：</p><table><thead><tr><th>状态码</th><th>状态码英文名称</th><th>中文描述</th></tr></thead><tbody><tr><td>100</td><td>Continue</td><td>继续。<a href="http://www.dreamdu.com/webbuild/client_vs_server/" target="_blank" rel="noopener">客户端</a>应继续其请求</td></tr><tr><td>101</td><td>Switching Protocols</td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td></td><td></td><td></td></tr><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源</td></tr><tr><td>202</td><td>Accepted</td><td>已接受。已经接受请求，但未处理完成</td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td>No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td>205</td><td>Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td>206</td><td>Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td></tr><tr><td></td><td></td><td></td></tr><tr><td>300</td><td>Multiple Choices</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>303</td><td>See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>305</td><td>Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td></tr><tr><td>306</td><td>Unused</td><td>已经被废弃的HTTP状态码</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td></td><td></td><td></td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td></tr><tr><td>402</td><td>Payment Required</td><td>保留，将来使用</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>客户端请求中的方法被禁止</td></tr><tr><td>406</td><td>Not Acceptable</td><td>服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td>407</td><td>Proxy Authentication Required</td><td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td>408</td><td>Request Time-out</td><td>服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td>409</td><td>Conflict</td><td>服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td>410</td><td>Gone</td><td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td>411</td><td>Length Required</td><td>服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td>412</td><td>Precondition Failed</td><td>客户端请求信息的先决条件错误</td></tr><tr><td>413</td><td>Request Entity Too Large</td><td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td>414</td><td>Request-URI Too Large</td><td>请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td>415</td><td>Unsupported Media Type</td><td>服务器无法处理请求附带的媒体格式</td></tr><tr><td>416</td><td>Requested range not satisfiable</td><td>客户端请求的范围无效</td></tr><tr><td>417</td><td>Expectation Failed</td><td>服务器无法满足Expect的请求头信息</td></tr><tr><td></td><td></td><td></td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td>502</td><td>Bad Gateway</td><td>充当网关或代理的服务器，从远端服务器接收到了一个无效的请求</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td>504</td><td>Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td>505</td><td>HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table><hr><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p><code>Cookie</code>有时也用其复数形式 <code>Cookies</code>，英文是饼干的意思。指某些网站为了辨别用户身份、进行 session 跟踪而储存在用户本地终端上的数据（通常经过加密）。最新的规范是 RFC6265 。</p><p><code>Cookie</code>其实就是由服务器发给客户端的特殊信息，而这些信息以文本文件的方式存放在客户端，然后客户端每次向服务器发送请求的时候都会带上这些特殊的信息。 服务器在接收到<code>Cookie</code>以后，会验证<code>Cookie</code>的信息，以此来辨别用户的身份。</p><p><code>Cookie</code>可以理解为一个临时通行证。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p><code>Cookie</code>其实是HTTP请求头的扩展部分，由于HTTP协议是无状态的协议，所以为了在网页上实现登陆之类的需求，所以扩展了<code>Cookie</code>这样的功能。</p><p>每一次HTTP请求在数据交换完毕之后就会关闭连接，所以下一次HTTP请求就无法让服务端得知你和上一次请求的关系。而使用了<code>Cookie</code>之后，你在第一次登陆之类的请求成功之后，服务器会在<code>Response</code>的头信息中给你返回<code>Cookie</code>信息，你下一次访问的时候带上这个Cookie信息，则服务器就能识别你为上一次成功登陆的用户。</p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p><code>Cookie</code>一般保存的格式为json格式，由一些属性组成。</p><ul><li>name：<code>Cookie</code>的名称</li><li>value：<code>Cookie</code>的值</li><li>domain：可以使用此<code>Cookie</code>的域名</li><li>path：可以使用此<code>Cookie</code>的页面路径</li><li>expires/Max-Age：此<code>Cookie</code>的超时时间</li><li>secure：设置是否只能通过https来传递此条<code>Cookie</code></li></ul><h3 id="domain属性"><a href="#domain属性" class="headerlink" title="domain属性"></a>domain属性</h3><p>域名一般来说分为顶级域名，二级域名，三级域名等等。</p><p>例如baidu.com是一个顶级域名，而<a href="http://www.baidu.com和map.baidu.com就是二级域名，依次类推。" target="_blank" rel="noopener">www.baidu.com和map.baidu.com就是二级域名，依次类推。</a></p><p>而在我们的<code>Cookie</code>来说，都有一个<code>domain</code>属性，这个属性限制了访问哪些域名时可以使用这一条<code>Cookie</code>。因为每个网站基本上都会分发<code>Cookie</code>，所以<code>domain</code>属性就可以让我们在访问新浪时不会带上百度分发给我们的<code>Cookie</code>。</p><p>而在同一系的域名中，顶级域名是无法使用其二级域名的<code>Cookie</code>的，也就是说访问baidu.com的时候是不会带上map.baidu.com分发的<code>Cookie</code>的，二级域名之间的<code>Cookie</code>也不可以共享。但访问二级域名时是可以使用顶级域名的<code>Cookie</code>的。</p><h3 id="path属性"><a href="#path属性" class="headerlink" title="path属性"></a>path属性</h3><p>path属性为可以访问此cookie的页面路径。 比如domain是abc.com，path是/test，那么只有/test路径下的页面可以读取此cookie。</p><h3 id="expires-Max-Age属性"><a href="#expires-Max-Age属性" class="headerlink" title="expires/Max-Age属性"></a>expires/Max-Age属性</h3><p>字段为此cookie超时时间。若设置其值为一个时间，那么当到达此时间后，此cookie失效。不设置的话默认值是Session，意思是cookie会和session一起失效。当浏览器关闭(不是浏览器标签页，而是整个浏览器) 后，此cookie失效。</p><hr><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>Session，中文经常翻译为会话，其本来的含义是指有始有终的一系列动作/消息，比如打电话时从拿起电话拨号到挂断电话这中间的一系列过程可以称之为一个session。这个词在各个领域都有在使用。</p><p>而我们web领域，一般使用的是其本义，<strong>一个浏览器窗口从打开到关闭这个期间</strong>。</p><p>Session的目的则是，在一个客户从打开浏览器到关闭浏览器这个期间内，发起的所有请求都可以被识别为同一个用户。而实现的方式则是，在一个客户打开浏览器开始访问网站的时候，会生成一个SessionID，这个ID每次的访问都会带上，而服务器会识别这个SessionID并且将与这个SessionID有关的数据保存在服务器上。由此来实现客户端的状态识别。</p><p>Session与Cookie相反，Session是存储在服务器上的数据，只由客户端传上来的SessionId来进行判定，所以相对于Cookie，Session的安全性更高。</p><p>一般SessionID会在浏览器被关闭时丢弃，或者服务器会验证Session的活跃程度，例如30分钟某一个SessionID都没有活跃，那么也会被识别为失效。</p><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      深入浅出了解HTTP协议
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python图像处理-Pillow</title>
    <link href="http://yoursite.com/2018/11/21/2018-11-21-python-pillow/"/>
    <id>http://yoursite.com/2018/11/21/2018-11-21-python-pillow/</id>
    <published>2018-11-20T16:00:00.000Z</published>
    <updated>2018-12-11T14:23:51.872Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:50 GMT+0800 (GMT+08:00) --><p>转载自：简书-<a href="https://www.jianshu.com/u/948da055a416" target="_blank" rel="noopener">王南北</a></p><p>本文地址：<a href="https://www.jianshu.com/p/3740dec1f436" target="_blank" rel="noopener">https://www.jianshu.com/p/3740dec1f436</a></p><hr><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Python传统的图像处理库<code>PIL</code>(Python Imaging Library )，可以说基本上是Python处理图像的标准库，功能强大，使用简单。</p><p>但是由于<code>PIL</code>不支持Python3，而且更新缓慢。所以有志愿者在<code>PIL</code>的基础上创建了一个分支版本，命名为<code>Pillow</code>，<code>Pillow</code>目前最新支持到python3.6，更新活跃，并且增添了许多新的特性。所以我们安装Pillow即可。</p><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>Pillow</code>的安装比较的简单，直接pip安装即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure><p>但是要注意的一点是，<code>Pillow</code>和<code>PIL</code>不能共存在同一个环境中，所以如果安装的有<code>PIL</code>的话，那么安装<code>Pillow</code>之前应该删除<code>PIL</code>。</p><p>由于是继承自<code>PIL</code>的分支，所以<code>Pillow</code>的导入是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PIL </span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br></pre></td></tr></table></figure><hr><h3 id="使用手册"><a href="#使用手册" class="headerlink" title="使用手册"></a>使用手册</h3><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p><code>Image</code>是Pillow中最为重要的类，实现了Pillow中大部分的功能。要创建这个类的实例主要有三个方式：</p><ol><li>从文件加载图像</li><li>处理其他图像获得</li><li>创建一个新的图像</li></ol><h4 id="读取图像"><a href="#读取图像" class="headerlink" title="读取图像"></a>读取图像</h4><p>一般来说，我们都是都过从文件加载图像来实例化这个类，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">picture = Image.open(<span class="string">'happy.png'</span>)</span><br></pre></td></tr></table></figure><p>如果没有指定图片格式的话，那么<code>Pillow</code>会自动识别文件内容为文件格式。</p><h4 id="新建图像"><a href="#新建图像" class="headerlink" title="新建图像"></a>新建图像</h4><p><code>Pillow</code>新建空白图像使用<code>new()</code>方法， 第一个参数是mode即颜色空间模式，第二个参数指定了图像的分辨率(宽x高)，第三个参数是颜色。</p><ul><li>可以直接填入常用颜色的名称。如’red’。</li><li>也可以填入十六进制表示的颜色，如<code>#FF0000</code>表示红色。</li><li>还能传入元组，比如(255, 0, 0, 255)或者(255， 0， 0)表示红色。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picture = Image.new(<span class="string">'RGB'</span>, (<span class="number">200</span>, <span class="number">100</span>), <span class="string">'red'</span>)</span><br></pre></td></tr></table></figure><h4 id="保存图像"><a href="#保存图像" class="headerlink" title="保存图像"></a>保存图像</h4><p>保存图片的话需要使用<code>save()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">picture.save(<span class="string">'happy.png'</span>)</span><br></pre></td></tr></table></figure><p>保存的时候，如果没有指定图片格式的话，那么<code>Pillow</code>会根据输入的后缀名决定保存的文件格式。</p><hr><h3 id="图像的坐标表示"><a href="#图像的坐标表示" class="headerlink" title="图像的坐标表示"></a>图像的坐标表示</h3><p>在Pillow中，用的是图像的<strong>左上角</strong>为坐标的原点（0，0），所以这意味着，x轴的数值是从左到右增长的，y轴的数值是从上到下增长的。</p><p>我们处理图像时，常常需要去表示一个矩形的图像区域。<code>Pillow</code>中很多方法都需要传入一个表示矩形区域的元祖参数。</p><p>这个元组参数包含四个值，分别代表矩形四条边的距离X轴或者Y轴的距离。顺序是<code>(左，顶，右，底)</code>。其实就相当于，矩形的左上顶点坐标为<code>(左，顶)</code>，矩形的右下顶点坐标为<code>(右，底)</code>，两个顶点就可以确定一个矩形的位置。</p><p>右和底坐标稍微特殊，跟python列表索引规则一样，是左闭又开的。可以理解为<code>[左, 右)</code>和<code>[顶， 底)</code>这样左闭右开的区间。比如(3, 2, 8, 9)就表示了横坐标范围[3, 7]；纵坐标范围[2, 8]的矩形区域。</p><hr><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><ul><li><p><code>PIL.Image.filename</code></p><p>图像源文件的文件名或者路径，只有使用<code>open()</code>方法创建的对象有这个属性。</p><p>类型：字符串</p></li><li><p><code>PIL.Image.format</code></p><p>图像源文件的文件格式。</p></li><li><p><code>PIL.Image.mode</code></p><p>图像的模式，一般来说是“1”, “L”, “RGB”, 或者“CMYK” 。</p></li><li><p><code>PIL.Image.size</code></p><p>图像的大小</p></li><li><p><code>PIL.Image.width</code></p><p>图像的宽度</p></li><li><p><code>PIL.Image.height</code></p><p>图像的高度</p></li><li><p><code>PIL.Image.info</code></p><p>图像的一些信息，为字典格式</p></li></ul><hr><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="裁剪图片"><a href="#裁剪图片" class="headerlink" title="裁剪图片"></a>裁剪图片</h4><p><code>Image</code>使用<code>crop()</code>方法来裁剪图像，此方法需要传入一个矩形元祖参数，返回一个新的<code>Image</code>对象，对原图没有影响。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">croped_im = im.crop((<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>))</span><br></pre></td></tr></table></figure><h4 id="复制与粘贴图像"><a href="#复制与粘贴图像" class="headerlink" title="复制与粘贴图像"></a>复制与粘贴图像</h4><p>复制图像使用<code>copy()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copyed_im = im.copy()</span><br></pre></td></tr></table></figure><p>粘贴图像使用<code>paste()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">croped_im = im.crop((<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>))</span><br><span class="line">im.paste(croped_im, (<span class="number">0</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>im对象调用了<code>paste()</code>方法，第一个参数是被裁剪下来用来粘贴的图像，第二个参数是一个位置参数元祖，这个位置参数是粘贴的图像的左顶点。</p><h4 id="调整图像的大小"><a href="#调整图像的大小" class="headerlink" title="调整图像的大小"></a>调整图像的大小</h4><p>调整图像大小使用<code>resize()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resized_im = im.resize((width, height))</span><br></pre></td></tr></table></figure><p><code>resize()</code>方法会返回一个重设了大小的<code>Image</code>对象。</p><h4 id="旋转图像和翻转图像"><a href="#旋转图像和翻转图像" class="headerlink" title="旋转图像和翻转图像"></a>旋转图像和翻转图像</h4><p>旋转图像使用<code>rotate()</code>方法，此方法按逆时针旋转，并返回一个新的<code>Image</code>对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逆时针旋转90度</span></span><br><span class="line">im.rotate(<span class="number">90</span>)</span><br><span class="line">im.rotate(<span class="number">180</span>)</span><br><span class="line">im.rotate(<span class="number">20</span>, expand=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>旋转的时候，会将图片超出边界的边角裁剪掉。如果加入<code>expand=True</code>参数，就可以将图片边角保存住。</p><p>翻转图像使用<code>transpose()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 水平翻转</span></span><br><span class="line">im.transpose(Image.FLIP_LEFT_RIGHT)</span><br><span class="line"><span class="comment"># 垂直翻转</span></span><br><span class="line">im.transpose(Image.FLIP_TOP_BOTTOM)</span><br></pre></td></tr></table></figure><h4 id="获取单个像素的值"><a href="#获取单个像素的值" class="headerlink" title="获取单个像素的值"></a>获取单个像素的值</h4><p>使用<code>getpixel</code>(<em>xy</em>)方法可以获取单个像素位置的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">im.getpixel((<span class="number">100</span>, <span class="number">100</span>))</span><br></pre></td></tr></table></figure><p>传入的xy需要是一个元祖形式的坐标。</p><p>如果图片是多通道的，那么返回的是一个元祖。</p><h4 id="通过通道分割图片"><a href="#通过通道分割图片" class="headerlink" title="通过通道分割图片"></a>通过通道分割图片</h4><h5 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h5><p><code>split()</code>可以将多通道图片按通道分割为单通道图片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R, G, B = im.split()</span><br></pre></td></tr></table></figure><p><code>split()</code>方法返回的是一个元祖，元祖中的元素则是分割后的单个通道的值。</p><h5 id="getchannel-channel"><a href="#getchannel-channel" class="headerlink" title="getchannel(channel)"></a>getchannel(channel)</h5><p><code>getchannel()</code>可以获取单个通道的数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R = im.getchannel(<span class="string">"R"</span>)</span><br></pre></td></tr></table></figure><h4 id="加载图片全部数据"><a href="#加载图片全部数据" class="headerlink" title="加载图片全部数据"></a>加载图片全部数据</h4><p>我们可以使用<code>load()</code>方法加载图片所有的数据，并比较方便的修改像素的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pixdata = im.load()</span><br><span class="line">pixdata[<span class="number">100</span>,<span class="number">200</span>] = <span class="number">255</span></span><br></pre></td></tr></table></figure><p>此方法返回的是一个<code>PIL.PyAccess</code>，可以通过这个类的索引来对指定坐标的像素点进行修改。</p><h4 id="关闭图片并释放内存"><a href="#关闭图片并释放内存" class="headerlink" title="关闭图片并释放内存"></a>关闭图片并释放内存</h4><p>此方法会删除图片对象并释放内存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">im.close()</span><br></pre></td></tr></table></figure><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      Python图像处理-Pillow
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>datetime-Python时间处理模块</title>
    <link href="http://yoursite.com/2018/11/21/2018-11-21-python-date/"/>
    <id>http://yoursite.com/2018/11/21/2018-11-21-python-date/</id>
    <published>2018-11-20T16:00:00.000Z</published>
    <updated>2018-12-11T14:23:10.259Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:50 GMT+0800 (GMT+08:00) --><p>转载自：简书-<a href="https://www.jianshu.com/u/948da055a416" target="_blank" rel="noopener">王南北</a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在Python的时间处理模块中，<code>time</code>这个模块主要侧重于时间戳格式的处理，而<code>datetime</code>则相当于<code>time</code>模块的高级封装，提供了更多关于日期处理的方法。</p><p>并且<code>datetime</code>的接口使用起来更加的直观，方便。</p><hr><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><code>datetime</code>主要由五个模块组成：</p><ul><li><strong>datetime.date</strong>：表示日期的类。常用的属性有year, month, day。</li><li><strong>datetime.time</strong>：表示时间的类。常用的属性有hour, minute, second, microsecond。</li><li><strong>datetime.datetime</strong>：表示日期+时间。</li><li><strong>datetime.timedelta</strong>：表示时间间隔，即两个时间点之间的长度，常常用来做时间的加减。</li><li><strong>datetime.tzinfo</strong>：与时区有关的相关信息。</li></ul><p>在<code>datetime</code>中，使用的最多的就是<code>datetime.datetime</code>模块，而<code>datetime.timedelta</code>常常被用来修改时间。</p><p>最后，<code>datetime</code>的时间显示是与时区有关系的，所以还有一个处理时区信息的模块<code>datetime.tzinfo</code>。</p><hr><h3 id="datetime-datetime"><a href="#datetime-datetime" class="headerlink" title="datetime.datetime"></a>datetime.datetime</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">datetime</span>.<span class="title">datetime</span><span class="params">(year, month, day, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span>, microsecond=<span class="number">0</span>, tzinfo=None, *, fold=<span class="number">0</span>)</span></span></span><br></pre></td></tr></table></figure><ul><li>MINYEAR &lt;= year &lt;= MAXYEAR</li><li>1 &lt;= month &lt;= 12</li><li>1 &lt;= day &lt;= number of days in the given month and year</li><li>0 &lt;= hour &lt; 24</li><li>0 &lt;= minute &lt; 60</li><li>0 &lt;= second &lt; 60</li><li>0 &lt;= microsecond &lt; 1000000</li><li>fold in [0, 1]</li></ul><p>这是<code>datetime.datetime</code>参数的取值范围，如果设定的值超过这个范围，那么就会抛出<code>ValueError</code>异常。</p><p>其中<code>year</code>，<code>month</code>，<code>day</code>是必须参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: datetime.datetime(year=<span class="number">2000</span>, month=<span class="number">1</span>, day=<span class="number">1</span>, hour=<span class="number">12</span>)</span><br><span class="line">Out[<span class="number">2</span>]: datetime.datetime(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="类方法-Classmethod"><a href="#类方法-Classmethod" class="headerlink" title="类方法 Classmethod"></a>类方法 Classmethod</h3><p>这些方法大多数用来生成一个<code>datetime</code>对象。</p><ul><li><p>classmethod datetime.<strong>today()</strong></p><p>获取今天的时间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: datetime.datetime.today()</span><br><span class="line">Out[<span class="number">1</span>]: datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">127663</span>)</span><br></pre></td></tr></table></figure></li><li><p>classmethod datetime.<strong>now(tz=None)</strong></p><p>获取当前的时间，可以传入一个<code>tzinfo</code>对象来指定某一个时区。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: datetime.datetime.now()</span><br><span class="line">Out[<span class="number">2</span>]: datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">30</span>, <span class="number">593801</span>)</span><br></pre></td></tr></table></figure></li><li><p>classmethod datetime.<strong>fromtimestamp(timestamp, tz=None)</strong></p><p>用一个时间戳来生成<code>datetime</code>对象，同样可以指定时区。</p><p><strong>注：时间戳需要为10位的</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: datetime.datetime.fromtimestamp(<span class="number">1530515475.18224</span>)</span><br><span class="line">Out[<span class="number">3</span>]: datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">182240</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="实例方法-instance-method"><a href="#实例方法-instance-method" class="headerlink" title="实例方法 instance method"></a>实例方法 instance method</h3><p>这些方法大多是一个<code>datetime</code>对象能进行的操作。</p><ul><li><p>datetime.<strong>date()</strong> 和 datetime.<strong>time()</strong></p><p>获取<code>datetime</code>对象的日期或者时间部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: datetime.datetime.now().date()</span><br><span class="line">Out[<span class="number">1</span>]: datetime.date(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">1</span>]: datetime.datetime.now().time()</span><br><span class="line">Out[<span class="number">1</span>]: datetime.time(<span class="number">15</span>, <span class="number">24</span>, <span class="number">37</span>, <span class="number">355514</span>)</span><br></pre></td></tr></table></figure></li><li><p>datetime.<strong>replace(year=self.year, month=self.month, day=self.day, hour=self.hour, minute=self.minute, second=self.second, microsecond=self.microsecond, tzinfo=self.tzinfo, * fold=0)</strong></p><p>替换<code>datetime</code>对象的指定数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: now = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: now</span><br><span class="line">Out[<span class="number">2</span>]: datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">26</span>, <span class="number">45</span>, <span class="number">116239</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: now.replace(year=<span class="number">2000</span>)</span><br><span class="line">Out[<span class="number">3</span>]: datetime.datetime(<span class="number">2000</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">26</span>, <span class="number">45</span>, <span class="number">116239</span>)</span><br></pre></td></tr></table></figure></li><li><p>datetime.<code>timestamp()</code></p><p>转换成时间戳。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: datetime.datetime.now().timestamp()</span><br><span class="line">Out[<span class="number">1</span>]: <span class="number">1530515994.798248</span></span><br></pre></td></tr></table></figure></li><li><p>datetime.<strong>weekday()</strong></p><p>返回一个值，表示日期为星期几。0为星期一，6为星期天。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: datetime.now().weekday()</span><br><span class="line">Out[<span class="number">1</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="datetime-timedelta"><a href="#datetime-timedelta" class="headerlink" title="datetime.timedelta"></a>datetime.timedelta</h3><p>在实际的使用中，我们常常会遇到这样的需求：需要给某个时间增加或减少一天，甚至是增加或减少一天三小时二十分钟。</p><p>那么在遇到这样的需求时，去计算时间戳是非常的麻烦的，所以<code>datetime.timedelta</code>这个模块使我们能够非常方便的对时间做加减。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">datetime</span>.<span class="title">timedelta</span><span class="params">(days=<span class="number">0</span>, seconds=<span class="number">0</span>, microseconds=<span class="number">0</span>, milliseconds=<span class="number">0</span>, minutes=<span class="number">0</span>, hours=<span class="number">0</span>, weeks=<span class="number">0</span>)</span></span></span><br></pre></td></tr></table></figure><p><code>datetime</code>是对某些运算符进行了重载的，所以我们可以如下操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: now</span><br><span class="line">Out[<span class="number">2</span>]: datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">26</span>, <span class="number">45</span>, <span class="number">116239</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: now - timedelta(days=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">3</span>]: datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">26</span>, <span class="number">45</span>, <span class="number">116239</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: now + timedelta(days=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">4</span>]: datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">26</span>, <span class="number">45</span>, <span class="number">116239</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: now + timedelta(days=<span class="number">-1</span>)</span><br><span class="line">Out[<span class="number">5</span>]: datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">26</span>, <span class="number">45</span>, <span class="number">116239</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="strftime-和-strptime"><a href="#strftime-和-strptime" class="headerlink" title="strftime() 和 strptime()"></a>strftime() 和 strptime()</h3><p><code>datetime</code>中提供了两个方法，可以方便的把<code>datetime</code>对象转换成格式化的字符串或者把字符串转换成<code>datetime</code>对象。</p><ul><li><p>由<code>datetime</code>转换成字符串：<strong>datetime.strftime()</strong></p><p><code>strftime()</code>是datetime对象的实例方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S %f'</span>)</span><br><span class="line">Out[<span class="number">1</span>]: <span class="string">'2018-07-02 15:26:45 116239'</span></span><br></pre></td></tr></table></figure></li><li><p>由字符串转换成<code>datetime</code>：<strong>datetime.datetime.strptime()</strong></p><p><code>strptime()</code>则是一个类方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: newsTime=<span class="string">'Sun, 23 Apr 2017 05:15:05 GMT'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: GMT_FORMAT = <span class="string">'%a, %d %b %Y %H:%M:%S GMT'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: datetime.datetime.strptime(newsTime,GMT_FORMAT)</span><br><span class="line">Out[<span class="number">3</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">23</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure></li></ul><p>以下是格式化的符号：</p><ul><li>%y 两位数的年份表示（00-99）</li><li>%Y 四位数的年份表示（000-9999）</li><li>%m 月份（01-12）</li><li>%d 月内中的一天（0-31）</li><li>%H 24小时制小时数（0-23）</li><li>%I 12小时制小时数（01-12）</li><li>%M 分钟数（00=59）</li><li>%S 秒（00-59）</li><li>%a 本地简化星期名称</li><li>%A 本地完整星期名称</li><li>%b 本地简化的月份名称</li><li>%B 本地完整的月份名称</li><li>%c 本地相应的日期表示和时间表示</li><li>%j 年内的一天（001-366）</li><li>%p 本地A.M.或P.M.的等价符</li><li>%U 一年中的星期数（00-53）星期天为星期的开始</li><li>%w 星期（0-6），星期天为星期的开始</li><li>%W 一年中的星期数（00-53）星期一为星期的开始</li><li>%x 本地相应的日期表示</li><li>%X 本地相应的时间表示</li><li>%Z 当前时区的名称</li><li>%% %号本身</li></ul><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      datetime-Python时间处理模块
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python网络请求urllib和urllib3详解</title>
    <link href="http://yoursite.com/2018/11/21/2018-11-21-reptile-urllib/"/>
    <id>http://yoursite.com/2018/11/21/2018-11-21-reptile-urllib/</id>
    <published>2018-11-20T16:00:00.000Z</published>
    <updated>2018-12-11T14:24:52.729Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:50 GMT+0800 (GMT+08:00) --><p>转载自：简书-<a href="https://www.jianshu.com/u/948da055a416" target="_blank" rel="noopener">王南北</a></p><h3 id="Python网络请求urllib和urllib3详解"><a href="#Python网络请求urllib和urllib3详解" class="headerlink" title="Python网络请求urllib和urllib3详解"></a>Python网络请求urllib和urllib3详解</h3><p><code>urllib</code>是Python中请求url连接的官方标准库，在Python2中主要为urllib和urllib2，在Python3中整合成了urllib。</p><p>而urllib3则是增加了连接池等功能，两者互相都有补充的部分。</p><h3 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h3><p>urllib作为Python的标准库，基本上涵盖了基础的网络请求功能。</p><hr><h3 id="urllib-request"><a href="#urllib-request" class="headerlink" title="urllib.request"></a>urllib.request</h3><p>urllib中，<code>request</code>这个模块主要负责构造和发起网络请求，并在其中加入Headers、Proxy等。</p><h3 id="发起GET请求"><a href="#发起GET请求" class="headerlink" title="发起GET请求"></a>发起GET请求</h3><p>主要使用<code>urlopen()</code>方法来发起请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">resp = request.urlopen(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(resp.read().decode())</span><br></pre></td></tr></table></figure><p>在<code>urlopen()</code>方法中传入字符串格式的url地址，则此方法会访问目标网址，然后返回访问的结果。</p><p>访问的结果会是一个<code>http.client.HTTPResponse</code>对象，使用此对象的<code>read()</code>方法，则可以获取访问网页获得的数据。但是要注意的是，获得的数据会是<code>bytes</code>的二进制格式，所以需要<code>decode()</code>一下，转换成字符串格式。</p><h3 id="发起POST请求"><a href="#发起POST请求" class="headerlink" title="发起POST请求"></a>发起POST请求</h3><p><code>urlopen()</code>默认的访问方式是GET，当在<code>urlopen()</code>方法中传入data参数时，则会发起POST请求。<strong>注意：传递的data数据需要为bytes格式。</strong></p><p>设置timeout参数还可以设置超时时间，如果请求时间超出，那么就会抛出异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">resp = request.urlopen(<span class="string">'http://httpbin.org'</span>, data=<span class="string">b'word=hello'</span>, timeout=<span class="number">10</span>)</span><br><span class="line">print(resp.read().decode())</span><br></pre></td></tr></table></figure><h3 id="添加Headers"><a href="#添加Headers" class="headerlink" title="添加Headers"></a>添加Headers</h3><p>通过<code>urllib</code>发起的请求会有默认的一个Headers：”User-Agent”:”Python-urllib/3.6”，指明请求是由<code>urllib</code>发送的。</p><p>所以遇到一些验证User-Agent的网站时，我们需要自定义Headers，而这需要借助于urllib.request中的<code>Request</code>对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://httpbin.org/get'</span></span><br><span class="line">headers = &#123;<span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要使用url和headers生成一个Request对象，然后将其传入urlopen方法中</span></span><br><span class="line">req = request.Request(url, headers=headers)</span><br><span class="line">resp = request.urlopen(req)</span><br><span class="line">print(resp.read().decode())</span><br></pre></td></tr></table></figure><h3 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h3><p>如上所示，<code>urlopen()</code>方法中不止可以传入字符串格式的url，也可以传入一个<code>Request</code>对象来扩展功能，<code>Request</code>对象如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">urllib</span>.<span class="title">request</span>.<span class="title">Request</span><span class="params">(url, data=None, headers=&#123;&#125;,</span></span></span><br><span class="line"><span class="class"><span class="params">                             origin_req_host=None,</span></span></span><br><span class="line"><span class="class"><span class="params">                             unverifiable=False, method=None)</span></span></span><br></pre></td></tr></table></figure><p>构造<code>Request</code>对象必须传入url参数，data数据和headers都是可选的。</p><p>最后，<code>Request</code>方法可以使用method参数来自由选择请求的方法，如PUT，DELETE等等，默认为GET。</p><h3 id="添加Cookie"><a href="#添加Cookie" class="headerlink" title="添加Cookie"></a>添加Cookie</h3><p>为了在请求时能带上Cookie信息，我们需要重新构造一个opener。</p><p>使用request.build_opener方法来进行构造opener，将我们想要传递的cookie配置到opener中，然后使用这个opener的open方法来发起请求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> http <span class="keyword">import</span> cookiejar</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://httpbin.org/cookies'</span></span><br><span class="line"><span class="comment"># 创建一个cookiejar对象</span></span><br><span class="line">cookie = cookiejar.CookieJar()</span><br><span class="line"><span class="comment"># 使用HTTPCookieProcessor创建cookie处理器</span></span><br><span class="line">cookies = request.HTTPCookieProcessor(cookie)</span><br><span class="line"><span class="comment"># 并以它为参数创建Opener对象</span></span><br><span class="line">opener = request.build_opener(cookies)</span><br><span class="line"><span class="comment"># 使用这个opener来发起请求</span></span><br><span class="line">resp = opener.open(url)</span><br><span class="line">print(resp.read().decode())</span><br></pre></td></tr></table></figure><p>或者也可以把这个生成的opener使用install_opener方法来设置为全局的。</p><p>则之后使用urlopen方法发起请求时，都会带上这个cookie。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将这个opener设置为全局的opener</span></span><br><span class="line">request.install_opener(opener)</span><br><span class="line">resp = request.urlopen(url)</span><br></pre></td></tr></table></figure><h3 id="设置Proxy代理"><a href="#设置Proxy代理" class="headerlink" title="设置Proxy代理"></a>设置Proxy代理</h3><p>使用爬虫来爬取数据的时候，常常需要使用代理来隐藏我们的真实IP。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://httpbin.org/ip'</span></span><br><span class="line">proxy = &#123;<span class="string">'http'</span>:<span class="string">'50.233.137.33:80'</span>,<span class="string">'https'</span>:<span class="string">'50.233.137.33:80'</span>&#125;</span><br><span class="line"><span class="comment"># 创建代理处理器</span></span><br><span class="line">proxies = request.ProxyHandler(proxy)</span><br><span class="line"><span class="comment"># 创建opener对象</span></span><br><span class="line">opener = request.build_opener(proxies)</span><br><span class="line"></span><br><span class="line">resp = opener.open(url)</span><br><span class="line">print(resp.read().decode())</span><br></pre></td></tr></table></figure><h3 id="下载数据到本地"><a href="#下载数据到本地" class="headerlink" title="下载数据到本地"></a>下载数据到本地</h3><p>在我们进行网络请求时常常需要保存图片或音频等数据到本地，一种方法是使用python的文件操作，将read()获取的数据保存到文件中。</p><p>而<code>urllib</code>提供了一个<code>urlretrieve()</code>方法，可以简单的直接将请求获取的数据保存成文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://python.org/'</span></span><br><span class="line">request.urlretrieve(url, <span class="string">'python.html'</span>)</span><br></pre></td></tr></table></figure><p><code>urlretrieve()</code>方法传入的第二个参数为文件保存的位置，以及文件名。</p><p>注：<code>urlretrieve()</code>方法是python2直接移植过来的方法，以后有可能在某个版本中弃用。</p><hr><h3 id="urllib-response"><a href="#urllib-response" class="headerlink" title="urllib.response"></a>urllib.response</h3><p>在使用<code>urlopen()</code>方法或者opener的<code>open()</code>方法发起请求后，获得的结果是一个<code>response</code>对象。</p><p>这个对象有一些方法和属性，可以让我们对请求返回的结果进行一些处理。</p><ul><li><p><strong>read()</strong></p><p>获取响应返回的数据，只能使用一次。</p></li><li><p><strong>getcode()</strong></p><p>获取服务器返回的状态码。</p></li><li><p><strong>getheaders()</strong></p><p>获取返回响应的响应报头。</p></li><li><p><strong>geturl()</strong></p><p>获取访问的url。</p></li></ul><hr><h3 id="urllib-parse"><a href="#urllib-parse" class="headerlink" title="urllib.parse"></a>urllib.parse</h3><p><code>urllib.parse</code>是urllib中用来解析各种数据格式的模块。</p><h3 id="urllib-parse-quote"><a href="#urllib-parse-quote" class="headerlink" title="urllib.parse.quote"></a>urllib.parse.quote</h3><p>在url中，是只能使用ASCII中包含的字符的，也就是说，ASCII不包含的特殊字符，以及中文等字符都是不可以在url中使用的。而我们有时候又有将中文字符加入到url中的需求，例如百度的搜索地址：</p><p><code>https://www.baidu.com/s?wd=南北</code></p><p>？之后的wd参数，则是我们搜索的关键词。那么我们实现的方法就是将特殊字符进行url编码，转换成可以url可以传输的格式，urllib中可以使用<code>quote()</code>方法来实现这个功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>keyword = <span class="string">'南北'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parse.quote(keyword)</span><br><span class="line"><span class="string">'%E5%8D%97%E5%8C%97'</span></span><br></pre></td></tr></table></figure><p>如果需要将编码后的数据转换回来，可以使用<code>unquote()</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>parse.unquote(<span class="string">'%E5%8D%97%E5%8C%97'</span>)</span><br><span class="line"><span class="string">'南北'</span></span><br></pre></td></tr></table></figure><h3 id="urllib-parse-urlencode"><a href="#urllib-parse-urlencode" class="headerlink" title="urllib.parse.urlencode"></a>urllib.parse.urlencode</h3><p>在访问url时，我们常常需要传递很多的url参数，而如果用字符串的方法去拼接url的话，会比较麻烦，所以<code>urllib</code>中提供了<code>urlencode</code>这个方法来拼接url参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>params = &#123;<span class="string">'wd'</span>: <span class="string">'南北'</span>, <span class="string">'code'</span>: <span class="string">'1'</span>, <span class="string">'height'</span>: <span class="string">'188'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parse.urlencode(params)</span><br><span class="line"><span class="string">'wd=%E5%8D%97%E5%8C%97&amp;code=1&amp;height=188'</span></span><br></pre></td></tr></table></figure><hr><h3 id="urllib-error"><a href="#urllib-error" class="headerlink" title="urllib.error"></a>urllib.error</h3><p>在<code>urllib</code>中主要设置了两个异常，一个是<code>URLError</code>，一个是<code>HTTPError</code>，<code>HTTPError</code>是<code>URLError</code>的子类。</p><p><code>HTTPError</code>还包含了三个属性：</p><ul><li>code：请求的状态码</li><li>reason：错误的原因</li><li>headers：响应的报头</li></ul><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> urllib.error <span class="keyword">import</span> HTTPError</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">try</span>:</span><br><span class="line">   ...:     request.urlopen(<span class="string">'https://www.jianshu.com'</span>)</span><br><span class="line">   ...: <span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</span><br><span class="line">   ...:     print(e.code)</span><br><span class="line"></span><br><span class="line"><span class="number">403</span></span><br></pre></td></tr></table></figure><hr><h3 id="urllib3"><a href="#urllib3" class="headerlink" title="urllib3"></a>urllib3</h3><p>Urllib3是一个功能强大，条理清晰，用于HTTP客户端的Python库。许多Python的原生系统已经开始使用urllib3。Urllib3提供了很多python标准库urllib里所没有的重要特性：</p><ol><li>线程安全</li><li>连接池</li><li>客户端SSL/TLS验证</li><li>文件分部编码上传</li><li>协助处理重复请求和HTTP重定位</li><li>支持压缩编码</li><li>支持HTTP和SOCKS代理</li></ol><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>urllib3是一个第三方库，安装非常简单，pip安装即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install urllib3</span><br></pre></td></tr></table></figure><hr><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>urllib3</code>主要使用连接池进行网络请求的访问，所以访问之前我们需要创建一个连接池对象，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>http = urllib3.PoolManager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = http.request(<span class="string">'GET'</span>, <span class="string">'http://httpbin.org/robots.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status</span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.data</span><br><span class="line"><span class="string">'User-agent: *\nDisallow: /deny\n'</span></span><br></pre></td></tr></table></figure><h3 id="设置headers"><a href="#设置headers" class="headerlink" title="设置headers"></a>设置headers</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">headers=&#123;<span class="string">'X-Something'</span>: <span class="string">'value'</span>&#125;</span><br><span class="line">resp = http.request(<span class="string">'GET'</span>, <span class="string">'http://httpbin.org/headers'</span>, headers=headers)</span><br></pre></td></tr></table></figure><h3 id="设置url参数"><a href="#设置url参数" class="headerlink" title="设置url参数"></a>设置url参数</h3><p>对于GET等没有请求正文的请求方法，可以简单的通过设置<code>fields</code>参数来设置url参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fields = &#123;<span class="string">'arg'</span>: <span class="string">'value'</span>&#125;</span><br><span class="line">resp = http.request(<span class="string">'GET'</span>, <span class="string">'http://httpbin.org/get'</span>, fields=fields)</span><br></pre></td></tr></table></figure><p>如果使用的是POST等方法，则会将fields作为请求的请求正文发送。</p><p>所以，如果你的POST请求是需要url参数的话，那么需要自己对url进行拼接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fields = &#123;<span class="string">'arg'</span>: <span class="string">'value'</span>&#125;</span><br><span class="line">resp = http.request(<span class="string">'POST'</span>, <span class="string">'http://httpbin.org/get'</span>, fields=fields)</span><br></pre></td></tr></table></figure><h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proxy = urllib3.ProxyManager(<span class="string">'http://50.233.137.33:80'</span>, headers=&#123;<span class="string">'connection'</span>: <span class="string">'keep-alive'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp = proxy.request(<span class="string">'get'</span>, <span class="string">'http://httpbin.org/ip'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp.status</span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>resp.data</span><br><span class="line"><span class="string">b'&#123;"origin":"50.233.136.254"&#125;\n'</span></span><br></pre></td></tr></table></figure><p><strong>注：<code>urllib3</code>中没有直接设置cookies的方法和参数，只能将cookies设置到headers中</strong></p><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      Python网络请求urllib和urllib3详解
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>GIT-版本管理与控制</title>
    <link href="http://yoursite.com/2018/11/19/2018-11-19-git/"/>
    <id>http://yoursite.com/2018/11/19/2018-11-19-git/</id>
    <published>2018-11-18T16:00:00.000Z</published>
    <updated>2018-12-11T14:22:43.769Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 12 2018 22:28:50 GMT+0800 (GMT+08:00) --><h3 id="1-GIT-版本管理与控制"><a href="#1-GIT-版本管理与控制" class="headerlink" title="1.GIT-版本管理与控制"></a>1.GIT-版本管理与控制</h3><p><img src="/images/tools/1.jpg" alt="1"></p><p>转载自：简书-<a href="https://www.jianshu.com/u/948da055a416" target="_blank" rel="noopener">王南北</a></p><p>本文地址：<a href="https://www.jianshu.com/p/0e9d07ec76f9" target="_blank" rel="noopener">https://www.jianshu.com/p/0e9d07ec76f9</a></p><p><code>GIT</code>基本上是目前最为先进的分布式版本控制系统，通过<code>GIT</code>能够非常方便的管理文件多个版本，能够实现版本的回滚，比对等功能，并且支持分布式也就是多人协同工作。</p><p><code>GIT</code>也是目前使用作为广泛的版本控制软件，大名鼎鼎的<code>Github</code>网站能直接与<code>GIT</code>对接，使用<code>GIT</code>上传代码到<code>Github</code>之中。</p><h3 id="GIT部署"><a href="#GIT部署" class="headerlink" title="GIT部署"></a>GIT部署</h3><p>通常来说，<code>Linux</code>系统使用各自版本对应的包管理工具可以非常方便的安装<code>GIT</code>。例如<code>sudo apt-get install git</code>，但安装之后会有一些设置需要配置。</p><h3 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h3><p>安装<code>GIT</code>之后比较常见的一个问题，就是中文乱码，可以通过在命令行中设置解决：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="keyword">global</span> core.quotepath false</span><br></pre></td></tr></table></figure><h3 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h3><p>如果是需要跟<code>Github</code>进行对接上传代码的话，那么首先需要在<code>GIT</code>中配置你的用户名和邮箱地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name  <span class="string">"name"</span>  // 你的GitHub登陆名</span><br><span class="line">git config --global user.email <span class="string">"123@126.com"</span>  // 你的GitHub注册邮箱</span><br></pre></td></tr></table></figure><hr><h3 id="GIT使用"><a href="#GIT使用" class="headerlink" title="GIT使用"></a>GIT使用</h3><p>在使用<code>GIT</code>之前，得掌握一个<code>仓库</code>的概念，也就是<code>repository</code>。这个<code>repository</code>也就是一个目录，是<code>GIT</code>管理的单位，在一个<code>repository</code>中，所有文件的新建、修改、删除都会被<code>GIT</code>跟踪到，并加以管理，以便在以后进行还原等操作。</p><p>所以，使用<code>GIT</code>，首先要创建一个<code>repository</code>。</p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>创建一个仓库，主要可以有两种方式。</p><h3 id="【init】"><a href="#【init】" class="headerlink" title="【init】"></a>【init】</h3><p><code>init</code>的创建方式为从零开始创建一个仓库，首先需要有一个目录，使用<code>cd</code>进入到我们想要创建仓库的目录中，然后使用以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>即可将当前目录转化为一个<code>repository</code>。目录中会出现一个<code>.git</code>目录，里面保存着所有的版本信息。</p><h3 id="【clone】"><a href="#【clone】" class="headerlink" title="【clone】"></a>【clone】</h3><p>除了自己从零开始创建仓库外，还可以使用别人的远程仓库来创建，例如<code>Github</code>上有许多项目代码，都可以使用这种方式拷贝下来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://git.kernel.org/pub/scm/.../linux.git</span><br></pre></td></tr></table></figure><p>这样的话会在当前目录生成一个一模一样的仓库。</p><h3 id="基础GIT命令"><a href="#基础GIT命令" class="headerlink" title="基础GIT命令"></a>基础GIT命令</h3><p>创建好仓库之后，就可以在仓库之中开始使用命令来控制此仓库文件的版本了。</p><p>在使用这些命令之前，还有几个<code>GIT</code>的基础概念需要掌握，分别是：<code>工作区(working directory)</code>，<code>暂存区(stage)</code>，<code>分支</code>，<code>版本库</code>。</p><ul><li>首先，<code>工作区</code>指的其实就是我们平常我们修改文件，查看文件的地方。</li><li><code>暂存区</code>则是类似于一个中转的区域，被叫做<code>stage</code>或者<code>index</code>。在工作区中修改了内容，那么首先需要先将修改提交到暂存区中，积累一定的修改数量，汇集成一个版本之后，再一起提交到具体的分支中。</li><li>在<code>GIT</code>管理的项目中，有<code>分支</code>这个说法，可以理解为具体的开发方向，<code>GIT</code>仓库在初始化的时候会默认创建一个<code>master</code>分支，你的文件版本就实际保存在这些分支之中。</li><li><code>暂存区</code>和<code>分支</code>合起来称为整个版本库。</li></ul><h3 id="【status】"><a href="#【status】" class="headerlink" title="【status】"></a>【status】</h3><p>在仓库中使用<code>git status</code>命令可以查看当前仓库的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@southnorth lianjia]# git status</span><br><span class="line"># On branch master</span><br><span class="line"># Changes not staged for commit:</span><br><span class="line">#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">#</span><br><span class="line">#modified:   lianjia/settings.py</span><br><span class="line">#</span><br><span class="line"># Untracked files:</span><br><span class="line">#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">#</span><br><span class="line">#setup.py</span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p>其中主要列出了仓库当前所处的分支，被修改了的文件，以及没有被跟踪的文件。</p><p><strong>参数</strong>：</p><ol><li><code>-s</code> - 以短格式显示仓库状态。</li></ol><hr><h3 id="【add】"><a href="#【add】" class="headerlink" title="【add】"></a>【add】</h3><p>在<code>GIT</code>仓库之中，虽然我们说所有的文件都可以被跟踪，但是这只限于文本文件的修改，<code>GIT</code>无法跟踪二进制文件的修改。</p><p>同时，在跟踪之前也需要先将文件添加到仓库的索引中，也就是说，使用<code>add</code>命令添加到索引中的文件，才会被<code>GIT</code>跟踪。在每次你新建或者修改了文件之后，需要你使用<code>add</code>命令将这个文件先添加到暂存区之中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add filename</span><br></pre></td></tr></table></figure><p>运行了此命令之后，未跟踪文件将会从<code>Untracked files:</code>中转移到<code>Changes not staged for commit:</code>中。</p><p>有些时候，可能修改的文件比较多，一个个去用<code>add</code>命令去添加比较麻烦，所以也可以用<code>*</code>来匹配文件名，以下命令可以将所有未被跟踪的文件添加到暂存区中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add *</span><br></pre></td></tr></table></figure><hr><h3 id="【commit】"><a href="#【commit】" class="headerlink" title="【commit】"></a>【commit】</h3><p>在将新文件或者修改过后的文件添加到暂存区之后，就可以使用<code>commit</code>命令将其正式提交到仓库了。但是要注意的是，<code>commit</code>提交到仓库的文件状态，是最后一次执行<code>add</code>时文件的状态，而不是执行<code>commit</code>时文件的状态。</p><p>所以，在提交文件之前，最好都先使用<code>git status</code>检查一下，有没有需要添加的文件还没有用<code>add</code>添加到暂存区中。然后就可以运行命令了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure><p>直接运行此命令后，会跳出一个编辑界面，一般默认是使用<code>vim</code>。如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Please enter the commit message for your changes. Lines starting</span><br><span class="line"># with &apos;#&apos; will be ignored, and an empty message aborts the commit.</span><br><span class="line">#</span><br><span class="line"># On branch master</span><br><span class="line"># Your branch is up to date with &apos;origin/master&apos;.</span><br><span class="line">#</span><br><span class="line"># Changes to be committed:</span><br><span class="line">#       modified:   &quot;hello.md&quot;</span><br></pre></td></tr></table></figure><p>这里其实是需要你输入一些关于此次<code>commit</code>的一些信息，对此次代码提交做一定的标识，方便以后如果需要还原版本的时候清楚代码的改动。对此信息保存退出后，则<code>commit</code>提交成功。</p><p><strong>参数</strong>：</p><ol><li><p><code>-a</code> - 虽然说可以使用<code>add</code>命令对<code>commit</code>提交的暂存区做很精细的改动，但是当提交的文件非常多的时候，则<code>add</code>起来会比较的麻烦。所以<code>commit</code>提供了<code>-a</code>参数，使用此参数，则会自动将已被追踪的修改过的文件添加到缓存区中，不用再手动<code>add</code>添加了。</p></li><li><p><code>-m</code> - <code>commit</code>提交的时候需要输入信息，有时候如果希望输入的信息比较少，则可以使用-m参数直接在命令行输入。如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &apos;message&apos;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="【rm】"><a href="#【rm】" class="headerlink" title="【rm】"></a>【rm】</h3><p>如果需要移除仓库中已经被追踪的文件，那么最好使用<code>GIT</code>提供的<code>rm</code>命令来删除，会更加安全：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm filename</span><br></pre></td></tr></table></figure><p>此删除命令会将磁盘上的文件一并删除，在<code>commit</code>后，此文件将不会再被追踪。</p><p><strong>参数</strong>：</p><ol><li><p><code>-f</code> - 如果删除的文件已经被修改过，或者已经被添加到暂存区中，那么则需要用<code>-f</code>参数强制删除。这是一个保护措施，因为还未被提交的修改不会被保存下来，是无法恢复的。</p></li><li><p><code>--cached</code> - 如果希望某个仓库中的文件不再被<code>GIT</code>跟踪，但是依然被保存在磁盘里，这种时候可以使用<code>--cached</code>来删除。在错误的添加了文件到仓库中后，这个参数非常有用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached filename</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="【reset】"><a href="#【reset】" class="headerlink" title="【reset】"></a>【reset】</h3><p>使用<code>GIT</code>最大的一个好处是，<code>GIT</code>会将你提交的每个<code>commit</code>保存下来，以供你以后在出现问题后，能够非常方便的回滚版本。回滚版本的其中一个命令就是<code>reset</code>。</p><p>在你将一些文件使用<code>add</code>命令添加到暂存区之后，使用<code>git status</code>命令查看状态时可以看到提示，如果想将添加到暂存区的文件取消暂存则可以使用以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;...</span><br></pre></td></tr></table></figure><p>在这里，<code>HEAD</code>代表的是最近一次的<code>commit</code>，此命令的意思则是将指定文件回滚到最近一次<code>commit</code>提交的状态。</p><p>如果没有指定文件的话，那么将会回滚整个仓库的状态，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD</span><br></pre></td></tr></table></figure><h3 id="版本表示："><a href="#版本表示：" class="headerlink" title="版本表示："></a><strong>版本表示</strong>：</h3><p>回滚的时候可以指定回滚的版本，版本的表示方式有三种，默认情况下都是指向最近一次提交：</p><ol><li><ul><li><code>HEAD</code> - 最近一个提交</li><li><code>HEAD^</code> - 上一次提交（倒数第二次提交）</li><li><code>HEAD^ ^</code> - 倒数第三次提交</li><li><code>HEAD^^^</code> - 倒数第四次的提交</li></ul></li><li><ul><li><code>HEAD~0</code> - 最近一个提交</li><li><code>HEAD~1</code> - 上一次提交（倒数第二次提交）</li><li><code>HEAD~2</code> - 倒数第三次提交</li><li><code>HEAD~3</code> - 倒数第四次的提交</li></ul></li><li>每次提交的<code>SHA1</code>版本号。</li></ol><h3 id="参数："><a href="#参数：" class="headerlink" title="参数："></a><strong>参数</strong>：</h3><ol><li><code>--mixed</code> - <code>GIT</code>的默认模式，使用此模式的时候，会清空暂存区，将回滚的内容全部恢复成未暂存的状态。也就是说不会修改任何本地工作区文件，只会回滚<code>index</code>和清空暂存区。</li><li><code>--soft</code> - 使用此模式，同样不会修改任何本地工作区文件，与<code>--mixed</code>的区别主要在于，其会将回滚的内容放入暂存区中。</li><li><code>--hard</code> - 此模式是一个比较危险的命令，使用此模式，将会把仓库彻底还原到<code>commit</code>的状态。如果你的暂存区和工作区中有修改了但未提交的内容，将会彻底丢失，所以谨慎使用此模式。</li></ol><hr><h3 id="【diff】"><a href="#【diff】" class="headerlink" title="【diff】"></a>【diff】</h3><p><code>git diff</code>命令可以查看两次文件内容有什么不同。使用以下命令可以查看工作区和版本库中最新版本的区别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD -- &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>在这里<code>--</code>表示的是工作区，<code>HEAD</code>表示的是最近一次<code>commit</code>提交的版本，还可以用<code>--cached</code>代表暂存区。</p><p>在没有指定的情况下，是默认查看工作区和暂存区的区别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;filename&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="【log】"><a href="#【log】" class="headerlink" title="【log】"></a>【log】</h3><p>使用<code>git log</code>命令，将会用以下的格式输出提交的<code>commit</code>日志记录，如果记录较多的话，需要按<code>q</code>键退出查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 69b8e6b3ebff7b84d6190a374475a20482d4c3ba (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">Author: wnanbei &lt;wnanbei@gmail.com&gt;</span><br><span class="line">Date:   Thu Nov 15 17:16:53 2018 +0800</span><br><span class="line"></span><br><span class="line">    add git branch part</span><br><span class="line"></span><br><span class="line">commit 28056c5055ef9ed4156b74713c0205e8fde44713</span><br><span class="line">Author: wnanbei &lt;wnanbei@gmail.com&gt;</span><br><span class="line">Date:   Thu Nov 15 15:21:30 2018 +0800</span><br><span class="line"></span><br><span class="line">    complete basic git command</span><br><span class="line"></span><br><span class="line">commit 6f6aae904ad7551d49ab952e9e3afae70bc93c50</span><br><span class="line">Author: wnanbei &lt;wnanbei@gmail.com&gt;</span><br><span class="line">Date:   Thu Nov 8 17:19:46 2018 +0800</span><br><span class="line"></span><br><span class="line">    add git</span><br></pre></td></tr></table></figure><h3 id="参数：-1"><a href="#参数：-1" class="headerlink" title="参数："></a><strong>参数</strong>：</h3><ul><li><p><code>--oneline</code> - 每条<code>commit</code>日志只显示一行内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline</span><br><span class="line">69b8e6b (HEAD -&gt; master, origin/master, origin/HEAD) add git branch part</span><br><span class="line">28056c5 complete basic git command</span><br><span class="line">6f6aae9 add git</span><br></pre></td></tr></table></figure></li><li><p><code>--skip</code> - 指定跳过前面几条日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git log --skip=4 --oneline</span><br><span class="line">b9922fc add git</span><br><span class="line">edd4594 change the python file name</span><br><span class="line">a9cded2 add git article</span><br></pre></td></tr></table></figure></li><li><p><code>-[length]</code> - 指定输出的日志数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline -2</span><br><span class="line">69b8e6b (HEAD -&gt; master, origin/master, origin/HEAD) add git branch part</span><br><span class="line">28056c5 complete basic git command</span><br></pre></td></tr></table></figure></li><li><p><code>--pretty=</code> - 使用其他格式显示提交信息，可选项有：oneline、short、medium、full、fuller、email、raw，默认为medium。</p></li><li><p><code>--graph</code> - 在左侧以图形的方式显示提交的<code>commit</code>变动，更清晰的展示分支的合并等信息。</p></li><li><p><code>--decorate</code> - 展示更多的信息，例如HEAD、分支名、tag。</p></li><li><p><code>--author</code> - 通过提交者的名字来搜索提交信息。</p></li><li><p><code>--grep</code> - 从提交的关键字搜索提交信息。</p></li><li><p><code>-p</code> - 通过路径搜索提交信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log -p -- config/my.config</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="【tag】"><a href="#【tag】" class="headerlink" title="【tag】"></a>【tag】</h3><p>在<code>GIT</code>中还有一个非常方便的功能，就是打标签，可以给某个特定的<code>commit</code>进行标记。比较广泛的一个方式使用它来标记版本号。使用以下命令将会给当前分支最新的一个<code>commit</code>打上<code>tag</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure><p>如果你需要指定给某个<code>commit</code>打<code>tag</code>的话，则需要你在命令后面加上<code>commit</code>的id。</p><p>使用以下命令可以查看<code>tag</code>的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag  # 查看本地所有tag</span><br><span class="line">git show &lt;tagname&gt;  # 查看指定tag的详细信息</span><br><span class="line">git ls-remote --tags &lt;remotename&gt; 查看远程所有tag</span><br></pre></td></tr></table></figure><p>需要注意的是，我们创建的<code>tag</code>都是只存在于本地的，所以如果要把<code>tag</code>同步到远程仓库的话，需要额外单独的使用命令同步<code>tag</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;remotename&gt; &lt;tagName&gt;  # 推送单个tag到远程仓库</span><br><span class="line">git push &lt;remotename&gt; --tags  # 推送所有未推送的tag到远程仓库</span><br></pre></td></tr></table></figure><h3 id="参数：-2"><a href="#参数：-2" class="headerlink" title="参数："></a><strong>参数</strong>：</h3><ul><li>-<code>a</code> - 指定<code>tag</code>的名字。</li><li><code>-m</code> - 给<code>tag</code>添加上备注的信息，与<code>commit</code>的信息类似。</li><li><code>-d</code> - 这个参数代表删除<code>tag</code>。需要注意的是如果要删除远程的<code>tag</code>，则需要本地删除后，再push到远程仓库。</li></ul><hr><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><p>在<code>GIT</code>之中，有分支的概念。在这里举一个例子，你希望在你的工作项目上新增添一个功能，那么你就可以在当前项目的基础上新开一个分支，然后在这个专门的分支上开发的你新功能，而原来的工作项目不受任何影响。等到你的新功能开发完毕通过测试后，就可以将这个分支与之前的工作项目分支合并了。</p><p>这种开发方式，能够将工作从开发主线上分离开来，避免工作时影响到工作主线。</p><p>由于<code>GIT</code>的分支实现原理跟指针类似，所以创建切换合并分支都是非常迅速的。<code>GIT</code>也非常鼓励新建一个分支去完成任务，任务完成后和主分支合并，然后删除掉这个新分支，这样使用下来与直接在主分支工作是差不多的，但是安全性要高不少。</p><h3 id="【branch】"><a href="#【branch】" class="headerlink" title="【branch】"></a>【branch】</h3><p>首先，直接使用<code>git branch</code>命令是查看当前仓库的分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>如果在<code>git branch</code>命令后面跟上一个名字，则可以在当前仓库新建一个分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch working</span><br></pre></td></tr></table></figure><p>也可以使用当前分支的某历史版本创建分支，这样的话需要指定具体的<code>commit</code>的ID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch working 169d2dc</span><br></pre></td></tr></table></figure><p>需要注意的是，仓库一般默认会有一个<code>master</code>分支，这个分支其实并没有什么特殊，跟其他新建的分支没有什么区别，只是在<code>git init</code>时默认会创建这样一个分支，大部分人也懒得去修改。</p><p><strong>参数</strong>：</p><ul><li><p><code>-d</code> - 如果在创建之后需要删除一个分支，可以加上此参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d working</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="【checkout】"><a href="#【checkout】" class="headerlink" title="【checkout】"></a>【checkout】</h3><p>在创建了分支之后，我们所处的依然是之前的分支，要切换到新的分支的话，依然是需要我们手动切换的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout working</span><br></pre></td></tr></table></figure><p><strong>参数</strong>：</p><ul><li><code>-b</code> - 加上这个参数之后，则代表直接创建一个分支，并且切换到这个分支，也就是说可以省略掉<code>git branch</code>这个步骤。</li></ul><hr><h3 id="【merge】"><a href="#【merge】" class="headerlink" title="【merge】"></a>【merge】</h3><p>在创建了分支之后，大部分情况下最终都是要合并的，也就是将分支修改的内容和另一个分支的修改内容合并到一起。</p><p>使用<code>git merge</code>命令将可以把某一分支与当前分支合并到一起：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge working</span><br></pre></td></tr></table></figure><p>如果两个分支之间没有冲突的话，那么分支的合并将会非常简单，<code>GIT</code>会自行决定如何合并两个分支。但是如果两个分支之间有文件冲突的话，也就是说两个分支内都对同一个文件进行了修改这种类似的操作，<code>GIT</code>将无法决定保留哪一个分支的内容。</p><p>因为在逻辑层面上，也需要由你自己来决定，在冲突的情况下，保留哪个分支的内容。在这种情况下，合并的时候会显示类似以下的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONFLICT (content): Merge conflict in a.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><p>在冲突的文件内，<code>GIT</code>会将两个分支的内容都放在了一起，由你自行修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">i am master</span><br><span class="line">=======</span><br><span class="line">hello, i am working</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; working</span><br></pre></td></tr></table></figure><p>可以看到<code>====</code>分割上方的是当前分支的内容，下方是合并的<code>working</code>分支的内容。此时由你自行修改，处理完冲突之后，<code>add</code>添加好就可以提交了。</p><hr><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>在前面讲的用法基本上都是本地的<code>GIT</code>用法，但是使用<code>GIT</code>很大的一个优势是可以多人协作，同时完成项目，那么这基本必然要涉及到远程仓库的使用。远程仓库可以自己在服务器上搭建，也可以使用一些其他人提供的仓库托管服务，例如<code>Github</code>这个全球最大的同性交友网站。</p><p>使用<code>init</code>命令生成的仓库中，是没有配置远程仓库的，需要自行配置。而如果是使用<code>clone</code>获取的仓库，则会将来源的远程仓库默认配置为一个名为<code>origin</code>的远程仓库，这个远程仓库没有什么特殊，只是默认起名而已。在一些比较复杂的多人合作项目中，会配置有多个远程仓库。</p><h3 id="【remote】"><a href="#【remote】" class="headerlink" title="【remote】"></a>【remote】</h3><p>使用<code>git remote</code>命令即可查看当前仓库有配置哪些远程仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure><p>如果你需要添加新的远程仓库，那么可以使用以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;shortname&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;shortname&gt;</code>是你给这个远程分支起的名字，这个名字只会在本地起作用。</p><p>以下还有一些显示与删除等命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote show [remote-name]  # 显示远程仓库详细的信息</span><br><span class="line">git remote rename old_name new_name  # 重命名远程仓库</span><br><span class="line">git remote rm remote_name  # 删除远程仓库</span><br></pre></td></tr></table></figure><p><strong>参数</strong>：</p><ul><li><code>-v</code> - 会显示远程仓库的url。</li></ul><hr><h3 id="【fetch】"><a href="#【fetch】" class="headerlink" title="【fetch】"></a>【fetch】</h3><p>在配置了远程仓库之后，就可以从远程仓库拉取内容了。这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch [remote-name]</span><br></pre></td></tr></table></figure><p>如果需要只拉取某个分支的内容，需要在后面加上分支的名称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin master  # 拉取远程仓库origin中的master分支</span><br><span class="line">git fetch origin master:temp  # 拉取远程仓库origin中的master分支，并命名为temp分支</span><br></pre></td></tr></table></figure><p>需要注意的是，<code>fetch</code>这个命令只是将版本库中的内容拉取下来，并不会自动合并和修改你工作区中的内容，需要你自行手动合并。</p><p>之后需要合并拉取的内容到工作区的话，需要使用<code>git merge</code>命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge FETCH_HEAD</span><br></pre></td></tr></table></figure><p>这里的<code>FETCH_HEAD</code>是一个版本链接，记录在本地的一个文件中，指向着目前已经从远程仓库取下来的分支的末端版本。</p><p>一般来说一个比较常见且安全的使用方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin master:tmp  # 在本地新建一个temp分支，并将远程origin仓库的master分支代码下载到本地temp分支</span><br><span class="line">git diff tmp                 # 来比较本地代码与刚刚从远程下载下来的代码的区别</span><br><span class="line">git merge tmp                # 合并temp分支到本地的master分支</span><br><span class="line">git branch -d temp           # 如果不想保留temp分支 可以用这步删除</span><br></pre></td></tr></table></figure><hr><h3 id="【pull】"><a href="#【pull】" class="headerlink" title="【pull】"></a>【pull】</h3><p>如果觉得使用<code>fetch</code>命令比较麻烦，且确定远程仓库的内容可以安全合并的话，那么可以使用<code>pull</code>命令。<code>pull</code>命令其实是一个混合命令，相当于把<code>git fetch</code>和<code>git merge</code>这两个命令合并到了一起，一个命令直接解决问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin</span><br></pre></td></tr></table></figure><hr><h3 id="【push】"><a href="#【push】" class="headerlink" title="【push】"></a>【push】</h3><p>在多人协作完成项目时，本地工作完成后，需要推送到远程仓库中，这个时候需要使用<code>git push</code>命令来进行推送。这个命令的用法如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure><p>如果当前分支只有一个远程分支，那么主机名与分支名都可以省略：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>如果当前分支与远程分支存在追踪关系，则可以省略分支名，只留主机名，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin</span><br></pre></td></tr></table></figure><p>如果只省略远程分支名，则表示将分支退送到与之存在追踪关系的分支，如果远程分支不存在，则创建新的远程分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>如果只省略本地分支名，则代表删除指定远程分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin ：master</span><br></pre></td></tr></table></figure><p>转载请注明：<a href="http://sevenold.github.io" target="_blank" rel="noopener">Seven的博客</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      GIT-版本管理与控制
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
</feed>
